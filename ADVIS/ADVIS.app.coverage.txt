/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/AppDelegate.swift:
    1|       |//
    2|       |//  AppDelegate.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/06/04.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import SwiftyBeaver
   10|       |import UIKit
   11|       |
   12|       |// SwiftyBeaver.Type
   13|       |let log = SwiftyBeaver.self
   14|       |
   15|       |@UIApplicationMain
   16|       |class AppDelegate: UIResponder, UIApplicationDelegate {
   17|       |    var window: UIWindow?
   18|       |
   19|      2|    func application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
   20|      2|        // Override point for customization after application launch.
   21|      2|
   22|      2|        // Settings SwiftyBeaver
   23|      2|        let console = ConsoleDestination()
   24|      2|        console.format = "$DHH:mm:ss.SSS$d $C$L$c $N.$F:No.$l $M"
   25|      2|        let platform = SBPlatformDestination(
   26|      2|            appID: "Secret",
   27|      2|            appSecret: "Secret",
   28|      2|            encryptionKey: "Secret"
   29|      2|        )
   30|      2|        log.addDestination(console)
   31|      2|        log.addDestination(platform)
   32|      2|
   33|      2|        // windowを生成
   34|      2|        window = UIWindow(frame: UIScreen.main.bounds)
   35|      2|        // Storyboardを指定
   36|      2|        let storyboard = UIStoryboard(name: "Splash", bundle: nil)
   37|      2|
   38|      2|        let initialViewController = storyboard.instantiateViewController(withIdentifier: "Splash")
   39|      2|        // rootViewControllerに入れる
   40|      2|        window?.rootViewController = initialViewController
   41|      2|        // 表示
   42|      2|        window?.makeKeyAndVisible()
   43|      2|
   44|      2|        return true
   45|      2|    }
   46|       |
   47|      0|    func applicationWillResignActive(_: UIApplication) {
   48|      0|        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
   49|      0|        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
   50|      0|    }
   51|       |
   52|      0|    func applicationDidEnterBackground(_: UIApplication) {
   53|      0|        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
   54|      0|        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
   55|      0|    }
   56|       |
   57|      0|    func applicationWillEnterForeground(_: UIApplication) {
   58|      0|        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
   59|      0|    }
   60|       |
   61|      2|    func applicationDidBecomeActive(_: UIApplication) {
   62|      2|        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
   63|      2|    }
   64|       |
   65|      0|    func applicationWillTerminate(_: UIApplication) {
   66|      0|        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
   67|      0|    }
   68|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/ArduinoUnoPointControl12_9.swift:
    1|       |//
    2|       |//  PointControl.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/06/10.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |// ArduinoUnoの座標をコントロールするクラス
   13|       |class ArduinoUnoPointControl12_9 {
   14|       |    var coordinateNumberX: Double = 0.0
   15|       |    var coordinateNumberY: Double = 0.0
   16|       |
   17|      0|    func pointTranslate(pointX: Double, pointY: Double) -> Int {
   18|      0|        // Digital Pin
   19|      0|        if 54 ... 77 ~= pointY { //  Y-cordinate
   20|      0|            // X-cordinate
   21|      0|            if 490.5 ... 514 ~= pointX { // GND
   22|      0|                return 418
   23|      0|            } else if 530 ... 552.5 ~= pointX { // 13
   24|      0|                return 419
   25|      0|            } else if 569.5 ... 592.5 ~= pointX { // 12
   26|      0|                return 420
   27|      0|            } else if 610 ... 633.5 ~= pointX { // 11
   28|      0|                return 421
   29|      0|            } else if 649.5 ... 673 ~= pointX { // 10
   30|      0|                return 422
   31|      0|            } else if 686.5 ... 712 ~= pointX { // 9
   32|      0|                return 423
   33|      0|            } else if 725.5 ... 752 ~= pointX { // 8
   34|      0|                return 424
   35|      0|
   36|      0|            } else if 790 ... 821 ~= pointX { // 7
   37|      0|                return 425
   38|      0|            } else if 832 ... 858 ~= pointX { // 6
   39|      0|                return 426
   40|      0|            } else if 869.5 ... 895 ~= pointX { // 5
   41|      0|                return 427
   42|      0|            } else if 909 ... 935 ~= pointX { // 4
   43|      0|                return 428
   44|      0|            } else if 950 ... 974.5 ~= pointX { // 3
   45|      0|                return 429
   46|      0|            } else if 988.5 ... 1014.5 ~= pointX { // 2
   47|      0|                return 430
   48|      0|            } else if 1027 ... 1053.5 ~= pointX { // 1
   49|      0|                return 431
   50|      0|            } else if 1065.5 ... 1091.5 ~= pointX { // 0
   51|      0|                return 432
   52|      0|            }
   53|      0|        }
   54|      0|
   55|      0|        // AnalogPin
   56|      0|        if 972 ... 997 ~= pointY { // Y-cordinate
   57|      0|            // X-cordinate
   58|      0|            if 592.5 ... 618 ~= pointX { // 3.3V
   59|      0|                return 404
   60|      0|            } else if 632.5 ... 656.5 ~= pointX { // 5V
   61|      0|                return 405
   62|      0|            } else if 673 ... 697 ~= pointX { // GND
   63|      0|                return 406
   64|      0|            } else if 711.5 ... 732.5 ~= pointX { // GND
   65|      0|                return 407
   66|      0|            } else if 750.5 ... 775 ~= pointX { // Vin
   67|      0|                return 408
   68|      0|
   69|      0|            } else if 828 ... 854.5 ~= pointX { // A0
   70|      0|                return 409
   71|      0|            } else if 870 ... 894 ~= pointX { // A1
   72|      0|                return 410
   73|      0|            } else if 909 ... 934 ~= pointX { // A2
   74|      0|                return 411
   75|      0|            } else if 949.5 ... 973.5 ~= pointX { // A3
   76|      0|                return 412
   77|      0|            } else if 986.5 ... 1012 ~= pointX { // A4
   78|      0|                return 413
   79|      0|            } else if 1025 ... 1051 ~= pointX { // A5
   80|      0|                return 414
   81|      0|            }
   82|      0|        }
   83|      0|
   84|      0|        // Up Side -
   85|      0|        if 214 ... 226.5 ~= pointY { // Y-cordinate
   86|      0|            // X-cordinate
   87|      0|            if 114.5 ... 131.5 ~= pointX {
   88|      0|                return 1
   89|      0|            } else if 145.5 ... 161 ~= pointX {
   90|      0|                return 2
   91|      0|            } else if 175.5 ... 195 ~= pointX {
   92|      0|                return 3
   93|      0|            } else if 206.5 ... 224.5 ~= pointX {
   94|      0|                return 4
   95|      0|            } else if 237.5 ... 257.5 ~= pointX {
   96|      0|                return 5
   97|      0|            } else if 305 ... 325.5 ~= pointX {
   98|      0|                return 6
   99|      0|            } else if 336.5 ... 357 ~= pointX {
  100|      0|                return 7
  101|      0|            } else if 368 ... 388.5 ~= pointX {
  102|      0|                return 8
  103|      0|            } else if 400 ... 420 ~= pointX {
  104|      0|                return 9
  105|      0|            } else if 430 ... 449 ~= pointX {
  106|      0|                return 10
  107|      0|            } else if 501 ... 520.5 ~= pointX {
  108|      0|                return 11
  109|      0|            } else if 533 ... 552 ~= pointX {
  110|      0|                return 12
  111|      0|            } else if 563 ... 584 ~= pointX {
  112|      0|                return 13
  113|      0|            } else if 595 ... 614.5 ~= pointX {
  114|      0|                return 14
  115|      0|            } else if 624 ... 645.5 ~= pointX {
  116|      0|                return 15
  117|      0|            } else if 702 ... 721 ~= pointX {
  118|      0|                return 16
  119|      0|            } else if 732 ... 752 ~= pointX {
  120|      0|                return 17
  121|      0|            } else if 766 ... 785 ~= pointX {
  122|      0|                return 18
  123|      0|            } else if 794.5 ... 815.5 ~= pointX {
  124|      0|                return 19
  125|      0|            } else if 827 ... 847 ~= pointX {
  126|      0|                return 20
  127|      0|            } else if 902.5 ... 920.5 ~= pointX {
  128|      0|                return 21
  129|      0|            } else if 933 ... 953.5 ~= pointX {
  130|      0|                return 22
  131|      0|            } else if 966 ... 986 ~= pointX {
  132|      0|                return 23
  133|      0|            } else if 996 ... 1014 ~= pointX {
  134|      0|                return 24
  135|      0|            } else if 1026.5 ... 1047.5 ~= pointX {
  136|      0|                return 25
  137|      0|            }
  138|      0|        }
  139|      0|
  140|      0|        // Up Side +
  141|      0|        if 247 ... 264 ~= pointY { // Y-cordinate
  142|      0|            // X-cordinate
  143|      0|            if 114.5 ... 131.5 ~= pointX {
  144|      0|                return 26
  145|      0|            } else if 145.5 ... 161 ~= pointX {
  146|      0|                return 27
  147|      0|            } else if 175.5 ... 195 ~= pointX {
  148|      0|                return 28
  149|      0|            } else if 206.5 ... 224.5 ~= pointX {
  150|      0|                return 29
  151|      0|            } else if 237.5 ... 257.5 ~= pointX {
  152|      0|                return 30
  153|      0|            } else if 305 ... 325.5 ~= pointX {
  154|      0|                return 31
  155|      0|            } else if 336.5 ... 357 ~= pointX {
  156|      0|                return 32
  157|      0|            } else if 368 ... 388.5 ~= pointX {
  158|      0|                return 33
  159|      0|            } else if 400 ... 420 ~= pointX {
  160|      0|                return 34
  161|      0|            } else if 430 ... 449 ~= pointX {
  162|      0|                return 35
  163|      0|            } else if 501 ... 520.5 ~= pointX {
  164|      0|                return 36
  165|      0|            } else if 533 ... 552 ~= pointX {
  166|      0|                return 37
  167|      0|            } else if 563 ... 584 ~= pointX {
  168|      0|                return 38
  169|      0|            } else if 595 ... 614.5 ~= pointX {
  170|      0|                return 39
  171|      0|            } else if 624 ... 645.5 ~= pointX {
  172|      0|                return 40
  173|      0|            } else if 702 ... 721 ~= pointX {
  174|      0|                return 41
  175|      0|            } else if 732 ... 752 ~= pointX {
  176|      0|                return 42
  177|      0|            } else if 766 ... 785 ~= pointX {
  178|      0|                return 43
  179|      0|            } else if 794.5 ... 815.5 ~= pointX {
  180|      0|                return 44
  181|      0|            } else if 827 ... 847 ~= pointX {
  182|      0|                return 45
  183|      0|            } else if 902.5 ... 920.5 ~= pointX {
  184|      0|                return 46
  185|      0|            } else if 933 ... 953.5 ~= pointX {
  186|      0|                return 47
  187|      0|            } else if 966 ... 986 ~= pointX {
  188|      0|                return 48
  189|      0|            } else if 996 ... 1014 ~= pointX {
  190|      0|                return 49
  191|      0|            } else if 1026.5 ... 1047.5 ~= pointX {
  192|      0|                return 50
  193|      0|            }
  194|      0|        }
  195|      0|
  196|      0|        // Down Side -
  197|      0|        if 739 ... 756.5 ~= pointY {
  198|      0|            // X-cordinate
  199|      0|            if 114.5 ... 131.5 ~= pointX {
  200|      0|                return 351
  201|      0|            } else if 145.5 ... 161 ~= pointX {
  202|      0|                return 352
  203|      0|            } else if 175.5 ... 195 ~= pointX {
  204|      0|                return 353
  205|      0|            } else if 206.5 ... 224.5 ~= pointX {
  206|      0|                return 354
  207|      0|            } else if 237.5 ... 257.5 ~= pointX {
  208|      0|                return 355
  209|      0|            } else if 305 ... 325.5 ~= pointX {
  210|      0|                return 356
  211|      0|            } else if 336.5 ... 357 ~= pointX {
  212|      0|                return 357
  213|      0|            } else if 368 ... 388.5 ~= pointX {
  214|      0|                return 358
  215|      0|            } else if 400 ... 420 ~= pointX {
  216|      0|                return 359
  217|      0|            } else if 430 ... 449 ~= pointX {
  218|      0|                return 360
  219|      0|            } else if 501 ... 520.5 ~= pointX {
  220|      0|                return 361
  221|      0|            } else if 533 ... 552 ~= pointX {
  222|      0|                return 362
  223|      0|            } else if 563 ... 584 ~= pointX {
  224|      0|                return 363
  225|      0|            } else if 595 ... 614.5 ~= pointX {
  226|      0|                return 364
  227|      0|            } else if 624 ... 645.5 ~= pointX {
  228|      0|                return 365
  229|      0|            } else if 702 ... 721 ~= pointX {
  230|      0|                return 366
  231|      0|            } else if 732 ... 752 ~= pointX {
  232|      0|                return 367
  233|      0|            } else if 766 ... 785 ~= pointX {
  234|      0|                return 368
  235|      0|            } else if 794.5 ... 815.5 ~= pointX {
  236|      0|                return 369
  237|      0|            } else if 827 ... 847 ~= pointX {
  238|      0|                return 370
  239|      0|            } else if 902.5 ... 920.5 ~= pointX {
  240|      0|                return 371
  241|      0|            } else if 933 ... 953.5 ~= pointX {
  242|      0|                return 372
  243|      0|            } else if 966 ... 986 ~= pointX {
  244|      0|                return 373
  245|      0|            } else if 996 ... 1014 ~= pointX {
  246|      0|                return 374
  247|      0|            } else if 1026.5 ... 1047.5 ~= pointX {
  248|      0|                return 375
  249|      0|            }
  250|      0|        }
  251|      0|
  252|      0|        // Down Side +
  253|      0|        if 774 ... 791 ~= pointY { // Y-cordinate
  254|      0|            // X-cordinate
  255|      0|            if 114.5 ... 131.5 ~= pointX {
  256|      0|                return 376
  257|      0|            } else if 145.5 ... 161 ~= pointX {
  258|      0|                return 377
  259|      0|            } else if 175.5 ... 195 ~= pointX {
  260|      0|                return 378
  261|      0|            } else if 206.5 ... 224.5 ~= pointX {
  262|      0|                return 379
  263|      0|            } else if 237.5 ... 257.5 ~= pointX {
  264|      0|                return 380
  265|      0|            } else if 305 ... 325.5 ~= pointX {
  266|      0|                return 381
  267|      0|            } else if 336.5 ... 357 ~= pointX {
  268|      0|                return 382
  269|      0|            } else if 368 ... 388.5 ~= pointX {
  270|      0|                return 383
  271|      0|            } else if 400 ... 420 ~= pointX {
  272|      0|                return 384
  273|      0|            } else if 430 ... 449 ~= pointX {
  274|      0|                return 385
  275|      0|            } else if 501 ... 520.5 ~= pointX {
  276|      0|                return 386
  277|      0|            } else if 533 ... 552 ~= pointX {
  278|      0|                return 387
  279|      0|            } else if 563 ... 584 ~= pointX {
  280|      0|                return 388
  281|      0|            } else if 595 ... 614.5 ~= pointX {
  282|      0|                return 389
  283|      0|            } else if 624 ... 645.5 ~= pointX {
  284|      0|                return 390
  285|      0|            } else if 702 ... 721 ~= pointX {
  286|      0|                return 391
  287|      0|            } else if 732 ... 752 ~= pointX {
  288|      0|                return 392
  289|      0|            } else if 766 ... 785 ~= pointX {
  290|      0|                return 393
  291|      0|            } else if 794.5 ... 815.5 ~= pointX {
  292|      0|                return 394
  293|      0|            } else if 827 ... 847 ~= pointX {
  294|      0|                return 395
  295|      0|            } else if 902.5 ... 920.5 ~= pointX {
  296|      0|                return 396
  297|      0|            } else if 933 ... 953.5 ~= pointX {
  298|      0|                return 397
  299|      0|            } else if 966 ... 986 ~= pointX {
  300|      0|                return 398
  301|      0|            } else if 996 ... 1014 ~= pointX {
  302|      0|                return 399
  303|      0|            } else if 1026.5 ... 1047.5 ~= pointX {
  304|      0|                return 400
  305|      0|            }
  306|      0|        }
  307|      0|
  308|      0|        // Bread Board
  309|      0|        // j
  310|      0|        if 326.5 ... 346.5 ~= pointY { // Y-cordinate
  311|      0|            if 97.5 ... 117 ~= pointX { // 1
  312|      0|                return 51
  313|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  314|      0|                return 52
  315|      0|            } else if 166 ... 186 ~= pointX { // 3
  316|      0|                return 53
  317|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  318|      0|                return 54
  319|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  320|      0|                return 55
  321|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  322|      0|                return 56
  323|      0|            } else if 295 ... 316 ~= pointX { // 7
  324|      0|                return 57
  325|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  326|      0|                return 58
  327|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  328|      0|                return 59
  329|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  330|      0|                return 60
  331|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  332|      0|                return 61
  333|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  334|      0|                return 62
  335|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  336|      0|                return 63
  337|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  338|      0|                return 64
  339|      0|            } else if 559 ... 580 ~= pointX { // 15
  340|      0|                return 65
  341|      0|            } else if 593 ... 613 ~= pointX { // 16
  342|      0|                return 66
  343|      0|            } else if 625 ... 645 ~= pointX { // 17
  344|      0|                return 67
  345|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  346|      0|                return 68
  347|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  348|      0|                return 69
  349|      0|            } else if 723 ... 743 ~= pointX { // 20
  350|      0|                return 70
  351|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  352|      0|                return 71
  353|      0|            } else if 788 ... 809 ~= pointX { // 22
  354|      0|                return 72
  355|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  356|      0|                return 73
  357|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  358|      0|                return 74
  359|      0|            } else if 888 ... 911 ~= pointX { // 25
  360|      0|                return 75
  361|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  362|      0|                return 76
  363|      0|            } else if 956 ... 978 ~= pointX { // 27
  364|      0|                return 77
  365|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  366|      0|                return 78
  367|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  368|      0|                return 79
  369|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  370|      0|                return 80
  371|      0|            }
  372|      0|        }
  373|      0|
  374|      0|        // i
  375|      0|        if 357.5 ... 376.5 ~= pointY { // Y-cordinate
  376|      0|            if 97.5 ... 117 ~= pointX { // 1
  377|      0|                return 81
  378|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  379|      0|                return 82
  380|      0|            } else if 166 ... 186 ~= pointX { // 3
  381|      0|                return 83
  382|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  383|      0|                return 84
  384|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  385|      0|                return 85
  386|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  387|      0|                return 86
  388|      0|            } else if 295 ... 316 ~= pointX { // 7
  389|      0|                return 87
  390|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  391|      0|                return 88
  392|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  393|      0|                return 89
  394|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  395|      0|                return 90
  396|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  397|      0|                return 91
  398|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  399|      0|                return 92
  400|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  401|      0|                return 93
  402|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  403|      0|                return 94
  404|      0|            } else if 559 ... 580 ~= pointX { // 15
  405|      0|                return 95
  406|      0|            } else if 593 ... 613 ~= pointX { // 16
  407|      0|                return 96
  408|      0|            } else if 625 ... 645 ~= pointX { // 17
  409|      0|                return 97
  410|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  411|      0|                return 98
  412|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  413|      0|                return 99
  414|      0|            } else if 723 ... 743 ~= pointX { // 20
  415|      0|                return 100
  416|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  417|      0|                return 101
  418|      0|            } else if 788 ... 809 ~= pointX { // 22
  419|      0|                return 102
  420|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  421|      0|                return 103
  422|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  423|      0|                return 104
  424|      0|            } else if 888 ... 911 ~= pointX { // 25
  425|      0|                return 105
  426|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  427|      0|                return 106
  428|      0|            } else if 956 ... 978 ~= pointX { // 27
  429|      0|                return 107
  430|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  431|      0|                return 108
  432|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  433|      0|                return 109
  434|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  435|      0|                return 110
  436|      0|            }
  437|      0|        }
  438|      0|
  439|      0|        // h
  440|      0|        if 390 ... 408.5 ~= pointY { // Y-cordinate
  441|      0|            if 97.5 ... 117 ~= pointX { // 1
  442|      0|                return 111
  443|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  444|      0|                return 112
  445|      0|            } else if 166 ... 186 ~= pointX { // 3
  446|      0|                return 113
  447|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  448|      0|                return 114
  449|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  450|      0|                return 115
  451|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  452|      0|                return 116
  453|      0|            } else if 295 ... 316 ~= pointX { // 7
  454|      0|                return 117
  455|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  456|      0|                return 118
  457|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  458|      0|                return 119
  459|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  460|      0|                return 120
  461|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  462|      0|                return 121
  463|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  464|      0|                return 122
  465|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  466|      0|                return 123
  467|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  468|      0|                return 124
  469|      0|            } else if 559 ... 580 ~= pointX { // 15
  470|      0|                return 125
  471|      0|            } else if 593 ... 613 ~= pointX { // 16
  472|      0|                return 126
  473|      0|            } else if 625 ... 645 ~= pointX { // 17
  474|      0|                return 127
  475|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  476|      0|                return 128
  477|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  478|      0|                return 129
  479|      0|            } else if 723 ... 743 ~= pointX { // 20
  480|      0|                return 130
  481|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  482|      0|                return 131
  483|      0|            } else if 788 ... 809 ~= pointX { // 22
  484|      0|                return 132
  485|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  486|      0|                return 133
  487|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  488|      0|                return 134
  489|      0|            } else if 888 ... 911 ~= pointX { // 25
  490|      0|                return 135
  491|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  492|      0|                return 136
  493|      0|            } else if 956 ... 978 ~= pointX { // 27
  494|      0|                return 137
  495|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  496|      0|                return 138
  497|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  498|      0|                return 139
  499|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  500|      0|                return 140
  501|      0|            }
  502|      0|        }
  503|      0|
  504|      0|        // g
  505|      0|        if 420.5 ... 437.5 ~= pointY { // Y-cordinate
  506|      0|            if 97.5 ... 117 ~= pointX { // 1
  507|      0|                return 141
  508|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  509|      0|                return 142
  510|      0|            } else if 166 ... 186 ~= pointX { // 3
  511|      0|                return 143
  512|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  513|      0|                return 144
  514|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  515|      0|                return 145
  516|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  517|      0|                return 146
  518|      0|            } else if 295 ... 316 ~= pointX { // 7
  519|      0|                return 147
  520|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  521|      0|                return 148
  522|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  523|      0|                return 149
  524|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  525|      0|                return 150
  526|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  527|      0|                return 151
  528|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  529|      0|                return 152
  530|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  531|      0|                return 153
  532|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  533|      0|                return 154
  534|      0|            } else if 559 ... 580 ~= pointX { // 15
  535|      0|                return 155
  536|      0|            } else if 593 ... 613 ~= pointX { // 16
  537|      0|                return 156
  538|      0|            } else if 625 ... 645 ~= pointX { // 17
  539|      0|                return 157
  540|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  541|      0|                return 158
  542|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  543|      0|                return 159
  544|      0|            } else if 723 ... 743 ~= pointX { // 20
  545|      0|                return 160
  546|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  547|      0|                return 161
  548|      0|            } else if 788 ... 809 ~= pointX { // 22
  549|      0|                return 162
  550|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  551|      0|                return 163
  552|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  553|      0|                return 164
  554|      0|            } else if 888 ... 911 ~= pointX { // 25
  555|      0|                return 165
  556|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  557|      0|                return 166
  558|      0|            } else if 956 ... 978 ~= pointX { // 27
  559|      0|                return 167
  560|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  561|      0|                return 168
  562|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  563|      0|                return 169
  564|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  565|      0|                return 170
  566|      0|            }
  567|      0|        }
  568|      0|
  569|      0|        // f
  570|      0|        if 451 ... 467.5 ~= pointY { // Y-cordinate
  571|      0|            if 97.5 ... 117 ~= pointX { // 1
  572|      0|                return 171
  573|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  574|      0|                return 172
  575|      0|            } else if 166 ... 186 ~= pointX { // 3
  576|      0|                return 173
  577|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  578|      0|                return 174
  579|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  580|      0|                return 175
  581|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  582|      0|                return 176
  583|      0|            } else if 295 ... 316 ~= pointX { // 7
  584|      0|                return 177
  585|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  586|      0|                return 178
  587|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  588|      0|                return 179
  589|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  590|      0|                return 180
  591|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  592|      0|                return 181
  593|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  594|      0|                return 182
  595|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  596|      0|                return 183
  597|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  598|      0|                return 184
  599|      0|            } else if 559 ... 580 ~= pointX { // 15
  600|      0|                return 185
  601|      0|            } else if 593 ... 613 ~= pointX { // 16
  602|      0|                return 186
  603|      0|            } else if 625 ... 645 ~= pointX { // 17
  604|      0|                return 187
  605|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  606|      0|                return 188
  607|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  608|      0|                return 189
  609|      0|            } else if 723 ... 743 ~= pointX { // 20
  610|      0|                return 190
  611|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  612|      0|                return 191
  613|      0|            } else if 788 ... 809 ~= pointX { // 22
  614|      0|                return 192
  615|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  616|      0|                return 193
  617|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  618|      0|                return 194
  619|      0|            } else if 888 ... 911 ~= pointX { // 25
  620|      0|                return 195
  621|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  622|      0|                return 196
  623|      0|            } else if 956 ... 978 ~= pointX { // 27
  624|      0|                return 197
  625|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  626|      0|                return 198
  627|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  628|      0|                return 199
  629|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  630|      0|                return 200
  631|      0|            }
  632|      0|        }
  633|      0|
  634|      0|        // e
  635|      0|        if 529 ... 547.5 ~= pointY { // Y-cordinate
  636|      0|            if 97.5 ... 117 ~= pointX { // 1
  637|      0|                return 201
  638|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  639|      0|                return 202
  640|      0|            } else if 166 ... 186 ~= pointX { // 3
  641|      0|                return 203
  642|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  643|      0|                return 204
  644|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  645|      0|                return 205
  646|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  647|      0|                return 206
  648|      0|            } else if 295 ... 316 ~= pointX { // 7
  649|      0|                return 207
  650|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  651|      0|                return 208
  652|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  653|      0|                return 209
  654|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  655|      0|                return 210
  656|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  657|      0|                return 211
  658|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  659|      0|                return 212
  660|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  661|      0|                return 213
  662|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  663|      0|                return 214
  664|      0|            } else if 559 ... 580 ~= pointX { // 15
  665|      0|                return 215
  666|      0|            } else if 593 ... 613 ~= pointX { // 16
  667|      0|                return 216
  668|      0|            } else if 625 ... 645 ~= pointX { // 17
  669|      0|                return 217
  670|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  671|      0|                return 218
  672|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  673|      0|                return 219
  674|      0|            } else if 723 ... 743 ~= pointX { // 20
  675|      0|                return 220
  676|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  677|      0|                return 221
  678|      0|            } else if 788 ... 809 ~= pointX { // 22
  679|      0|                return 222
  680|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  681|      0|                return 223
  682|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  683|      0|                return 224
  684|      0|            } else if 888 ... 911 ~= pointX { // 25
  685|      0|                return 225
  686|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  687|      0|                return 226
  688|      0|            } else if 956 ... 978 ~= pointX { // 27
  689|      0|                return 227
  690|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  691|      0|                return 228
  692|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  693|      0|                return 229
  694|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  695|      0|                return 230
  696|      0|            }
  697|      0|        }
  698|      0|
  699|      0|        // d
  700|      0|        if 558.5 ... 577 ~= pointY { // Y-cordinate
  701|      0|            if 97.5 ... 117 ~= pointX { // 1
  702|      0|                return 231
  703|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  704|      0|                return 232
  705|      0|            } else if 166 ... 186 ~= pointX { // 3
  706|      0|                return 233
  707|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  708|      0|                return 234
  709|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  710|      0|                return 235
  711|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  712|      0|                return 236
  713|      0|            } else if 295 ... 316 ~= pointX { // 7
  714|      0|                return 237
  715|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  716|      0|                return 238
  717|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  718|      0|                return 239
  719|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  720|      0|                return 240
  721|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  722|      0|                return 241
  723|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  724|      0|                return 242
  725|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  726|      0|                return 243
  727|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  728|      0|                return 244
  729|      0|            } else if 559 ... 580 ~= pointX { // 15
  730|      0|                return 245
  731|      0|            } else if 593 ... 613 ~= pointX { // 16
  732|      0|                return 246
  733|      0|            } else if 625 ... 645 ~= pointX { // 17
  734|      0|                return 247
  735|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  736|      0|                return 248
  737|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  738|      0|                return 249
  739|      0|            } else if 723 ... 743 ~= pointX { // 20
  740|      0|                return 250
  741|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  742|      0|                return 251
  743|      0|            } else if 788 ... 809 ~= pointX { // 22
  744|      0|                return 252
  745|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  746|      0|                return 253
  747|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  748|      0|                return 254
  749|      0|            } else if 888 ... 911 ~= pointX { // 25
  750|      0|                return 255
  751|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  752|      0|                return 256
  753|      0|            } else if 956 ... 978 ~= pointX { // 27
  754|      0|                return 257
  755|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  756|      0|                return 258
  757|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  758|      0|                return 259
  759|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  760|      0|                return 260
  761|      0|            }
  762|      0|        }
  763|      0|
  764|      0|        // c
  765|      0|        if 589 ... 608 ~= pointY { // Y-cordinate
  766|      0|            if 97.5 ... 117 ~= pointX { // 1
  767|      0|                return 261
  768|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  769|      0|                return 262
  770|      0|            } else if 166 ... 186 ~= pointX { // 3
  771|      0|                return 263
  772|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  773|      0|                return 264
  774|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  775|      0|                return 265
  776|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  777|      0|                return 266
  778|      0|            } else if 295 ... 316 ~= pointX { // 7
  779|      0|                return 267
  780|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  781|      0|                return 268
  782|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  783|      0|                return 269
  784|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  785|      0|                return 270
  786|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  787|      0|                return 271
  788|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  789|      0|                return 272
  790|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  791|      0|                return 273
  792|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  793|      0|                return 274
  794|      0|            } else if 559 ... 580 ~= pointX { // 15
  795|      0|                return 275
  796|      0|            } else if 593 ... 613 ~= pointX { // 16
  797|      0|                return 276
  798|      0|            } else if 625 ... 645 ~= pointX { // 17
  799|      0|                return 277
  800|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  801|      0|                return 278
  802|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  803|      0|                return 279
  804|      0|            } else if 723 ... 743 ~= pointX { // 20
  805|      0|                return 280
  806|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  807|      0|                return 281
  808|      0|            } else if 788 ... 809 ~= pointX { // 22
  809|      0|                return 282
  810|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  811|      0|                return 283
  812|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  813|      0|                return 284
  814|      0|            } else if 888 ... 911 ~= pointX { // 25
  815|      0|                return 285
  816|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  817|      0|                return 286
  818|      0|            } else if 956 ... 978 ~= pointX { // 27
  819|      0|                return 287
  820|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  821|      0|                return 288
  822|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  823|      0|                return 289
  824|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  825|      0|                return 290
  826|      0|            }
  827|      0|        }
  828|      0|
  829|      0|        // b
  830|      0|        if 621.5 ... 640.5 ~= pointY { // Y-cordinate
  831|      0|            if 97.5 ... 117 ~= pointX { // 1
  832|      0|                return 291
  833|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  834|      0|                return 292
  835|      0|            } else if 166 ... 186 ~= pointX { // 3
  836|      0|                return 293
  837|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  838|      0|                return 294
  839|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  840|      0|                return 295
  841|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  842|      0|                return 296
  843|      0|            } else if 295 ... 316 ~= pointX { // 7
  844|      0|                return 297
  845|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  846|      0|                return 298
  847|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  848|      0|                return 299
  849|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  850|      0|                return 300
  851|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  852|      0|                return 301
  853|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  854|      0|                return 302
  855|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  856|      0|                return 303
  857|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  858|      0|                return 304
  859|      0|            } else if 559 ... 580 ~= pointX { // 15
  860|      0|                return 305
  861|      0|            } else if 593 ... 613 ~= pointX { // 16
  862|      0|                return 306
  863|      0|            } else if 625 ... 645 ~= pointX { // 17
  864|      0|                return 307
  865|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  866|      0|                return 308
  867|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  868|      0|                return 309
  869|      0|            } else if 723 ... 743 ~= pointX { // 20
  870|      0|                return 310
  871|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  872|      0|                return 311
  873|      0|            } else if 788 ... 809 ~= pointX { // 22
  874|      0|                return 312
  875|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  876|      0|                return 313
  877|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  878|      0|                return 314
  879|      0|            } else if 888 ... 911 ~= pointX { // 25
  880|      0|                return 315
  881|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  882|      0|                return 316
  883|      0|            } else if 956 ... 978 ~= pointX { // 27
  884|      0|                return 317
  885|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  886|      0|                return 318
  887|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  888|      0|                return 319
  889|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  890|      0|                return 320
  891|      0|            }
  892|      0|        }
  893|      0|
  894|      0|        // a
  895|      0|        if 653 ... 670 ~= pointY { // Y-cordinate
  896|      0|            if 97.5 ... 117 ~= pointX { // 1
  897|      0|                return 321
  898|      0|            } else if 133 ... 151.5 ~= pointX { // 2
  899|      0|                return 322
  900|      0|            } else if 166 ... 186 ~= pointX { // 3
  901|      0|                return 323
  902|      0|            } else if 198 ... 217.5 ~= pointX { // 4
  903|      0|                return 324
  904|      0|            } else if 230.5 ... 251 ~= pointX { // 5
  905|      0|                return 325
  906|      0|            } else if 262 ... 283.5 ~= pointX { // 6
  907|      0|                return 326
  908|      0|            } else if 295 ... 316 ~= pointX { // 7
  909|      0|                return 327
  910|      0|            } else if 327 ... 347.5 ~= pointX { // 8
  911|      0|                return 328
  912|      0|            } else if 361.5 ... 380.5 ~= pointX { // 9
  913|      0|                return 329
  914|      0|            } else if 392.5 ... 412.5 ~= pointX { // 10
  915|      0|                return 330
  916|      0|            } else if 426.5 ... 445.5 ~= pointX { // 11
  917|      0|                return 331
  918|      0|            } else if 457.5 ... 479 ~= pointX { // 12
  919|      0|                return 332
  920|      0|            } else if 492.5 ... 515 ~= pointX { // 13
  921|      0|                return 333
  922|      0|            } else if 527 ... 548.5 ~= pointX { // 14
  923|      0|                return 334
  924|      0|            } else if 559 ... 580 ~= pointX { // 15
  925|      0|                return 335
  926|      0|            } else if 593 ... 613 ~= pointX { // 16
  927|      0|                return 336
  928|      0|            } else if 625 ... 645 ~= pointX { // 17
  929|      0|                return 337
  930|      0|            } else if 659.5 ... 679.5 ~= pointX { // 18
  931|      0|                return 338
  932|      0|            } else if 691.5 ... 711 ~= pointX { // 19
  933|      0|                return 339
  934|      0|            } else if 723 ... 743 ~= pointX { // 20
  935|      0|                return 340
  936|      0|            } else if 755.5 ... 775 ~= pointX { // 21
  937|      0|                return 341
  938|      0|            } else if 788 ... 809 ~= pointX { // 22
  939|      0|                return 342
  940|      0|            } else if 821.5 ... 844 ~= pointX { // 23
  941|      0|                return 343
  942|      0|            } else if 856.5 ... 878 ~= pointX { // 24
  943|      0|                return 344
  944|      0|            } else if 888 ... 911 ~= pointX { // 25
  945|      0|                return 345
  946|      0|            } else if 921.5 ... 944 ~= pointX { // 26
  947|      0|                return 346
  948|      0|            } else if 956 ... 978 ~= pointX { // 27
  949|      0|                return 347
  950|      0|            } else if 988.5 ... 1010.5 ~= pointX { // 28
  951|      0|                return 348
  952|      0|            } else if 1021 ... 1041 ~= pointX { // 29
  953|      0|                return 349
  954|      0|            } else if 1052.5 ... 1072.5 ~= pointX { // 30
  955|      0|                return 350
  956|      0|            }
  957|      0|        }
  958|      0|        return 0
  959|      0|    }
  960|       |
  961|      0|    func coordinateTranslate(translatePoint: Int) {
  962|      0|        if translatePoint == 0 {
  963|      0|            coordinateNumberX = 0
  964|      0|            coordinateNumberY = 0
  965|      0|        }
  966|      0|        // up side -
  967|      0|        if 1 ... 25 ~= translatePoint {
  968|      0|            coordinateNumberY = 220.5
  969|      0|            if translatePoint == 1 {
  970|      0|                coordinateNumberX = 123
  971|      0|            } else if translatePoint == 2 {
  972|      0|                coordinateNumberX = 153.5
  973|      0|            } else if translatePoint == 3 {
  974|      0|                coordinateNumberX = 185.5
  975|      0|            } else if translatePoint == 4 {
  976|      0|                coordinateNumberX = 215.5
  977|      0|            } else if translatePoint == 5 {
  978|      0|                coordinateNumberX = 247.5
  979|      0|            } else if translatePoint == 6 {
  980|      0|                coordinateNumberX = 315.5
  981|      0|            } else if translatePoint == 7 {
  982|      0|                coordinateNumberX = 347
  983|      0|            } else if translatePoint == 8 {
  984|      0|                coordinateNumberX = 378.5
  985|      0|            } else if translatePoint == 9 {
  986|      0|                coordinateNumberX = 410
  987|      0|            } else if translatePoint == 10 {
  988|      0|                coordinateNumberX = 439.5
  989|      0|            } else if translatePoint == 11 {
  990|      0|                coordinateNumberX = 511
  991|      0|            } else if translatePoint == 12 {
  992|      0|                coordinateNumberX = 542.5
  993|      0|            } else if translatePoint == 13 {
  994|      0|                coordinateNumberX = 573.5
  995|      0|            } else if translatePoint == 14 {
  996|      0|                coordinateNumberX = 605
  997|      0|            } else if translatePoint == 15 {
  998|      0|                coordinateNumberX = 634.5
  999|      0|            } else if translatePoint == 16 {
 1000|      0|                coordinateNumberX = 711.5
 1001|      0|            } else if translatePoint == 17 {
 1002|      0|                coordinateNumberX = 742
 1003|      0|            } else if translatePoint == 18 {
 1004|      0|                coordinateNumberX = 775.5
 1005|      0|            } else if translatePoint == 19 {
 1006|      0|                coordinateNumberX = 805
 1007|      0|            } else if translatePoint == 20 {
 1008|      0|                coordinateNumberX = 837
 1009|      0|            } else if translatePoint == 21 {
 1010|      0|                coordinateNumberX = 911.5
 1011|      0|            } else if translatePoint == 22 {
 1012|      0|                coordinateNumberX = 944
 1013|      0|            } else if translatePoint == 23 {
 1014|      0|                coordinateNumberX = 976
 1015|      0|            } else if translatePoint == 24 {
 1016|      0|                coordinateNumberX = 1005
 1017|      0|            } else if translatePoint == 25 {
 1018|      0|                coordinateNumberX = 1037
 1019|      0|            }
 1020|      0|        }
 1021|      0|
 1022|      0|        // up side +
 1023|      0|        if 26 ... 50 ~= translatePoint {
 1024|      0|            coordinateNumberY = 255.5
 1025|      0|            if translatePoint == 26 {
 1026|      0|                coordinateNumberX = 123
 1027|      0|            } else if translatePoint == 27 {
 1028|      0|                coordinateNumberX = 153.5
 1029|      0|            } else if translatePoint == 28 {
 1030|      0|                coordinateNumberX = 185.5
 1031|      0|            } else if translatePoint == 29 {
 1032|      0|                coordinateNumberX = 215.5
 1033|      0|            } else if translatePoint == 30 {
 1034|      0|                coordinateNumberX = 247.5
 1035|      0|            } else if translatePoint == 31 {
 1036|      0|                coordinateNumberX = 315.5
 1037|      0|            } else if translatePoint == 32 {
 1038|      0|                coordinateNumberX = 347
 1039|      0|            } else if translatePoint == 33 {
 1040|      0|                coordinateNumberX = 378.5
 1041|      0|            } else if translatePoint == 34 {
 1042|      0|                coordinateNumberX = 410
 1043|      0|            } else if translatePoint == 35 {
 1044|      0|                coordinateNumberX = 439.5
 1045|      0|            } else if translatePoint == 36 {
 1046|      0|                coordinateNumberX = 511
 1047|      0|            } else if translatePoint == 37 {
 1048|      0|                coordinateNumberX = 542.5
 1049|      0|            } else if translatePoint == 38 {
 1050|      0|                coordinateNumberX = 573.5
 1051|      0|            } else if translatePoint == 39 {
 1052|      0|                coordinateNumberX = 605
 1053|      0|            } else if translatePoint == 40 {
 1054|      0|                coordinateNumberX = 634.5
 1055|      0|            } else if translatePoint == 41 {
 1056|      0|                coordinateNumberX = 711.5
 1057|      0|            } else if translatePoint == 42 {
 1058|      0|                coordinateNumberX = 742
 1059|      0|            } else if translatePoint == 43 {
 1060|      0|                coordinateNumberX = 775.5
 1061|      0|            } else if translatePoint == 44 {
 1062|      0|                coordinateNumberX = 805
 1063|      0|            } else if translatePoint == 45 {
 1064|      0|                coordinateNumberX = 837
 1065|      0|            } else if translatePoint == 46 {
 1066|      0|                coordinateNumberX = 911.5
 1067|      0|            } else if translatePoint == 47 {
 1068|      0|                coordinateNumberX = 944
 1069|      0|            } else if translatePoint == 48 {
 1070|      0|                coordinateNumberX = 976
 1071|      0|            } else if translatePoint == 49 {
 1072|      0|                coordinateNumberX = 1005
 1073|      0|            } else if translatePoint == 50 {
 1074|      0|                coordinateNumberX = 1037
 1075|      0|            }
 1076|      0|        }
 1077|      0|
 1078|      0|        // down side -
 1079|      0|        if 351 ... 375 ~= translatePoint {
 1080|      0|            coordinateNumberY = 748
 1081|      0|            if translatePoint == 351 {
 1082|      0|                coordinateNumberX = 123
 1083|      0|            } else if translatePoint == 352 {
 1084|      0|                coordinateNumberX = 153.5
 1085|      0|            } else if translatePoint == 353 {
 1086|      0|                coordinateNumberX = 185.5
 1087|      0|            } else if translatePoint == 354 {
 1088|      0|                coordinateNumberX = 215.5
 1089|      0|            } else if translatePoint == 355 {
 1090|      0|                coordinateNumberX = 247.5
 1091|      0|            } else if translatePoint == 356 {
 1092|      0|                coordinateNumberX = 315.5
 1093|      0|            } else if translatePoint == 357 {
 1094|      0|                coordinateNumberX = 347
 1095|      0|            } else if translatePoint == 358 {
 1096|      0|                coordinateNumberX = 378.5
 1097|      0|            } else if translatePoint == 359 {
 1098|      0|                coordinateNumberX = 410
 1099|      0|            } else if translatePoint == 360 {
 1100|      0|                coordinateNumberX = 439.5
 1101|      0|            } else if translatePoint == 361 {
 1102|      0|                coordinateNumberX = 511
 1103|      0|            } else if translatePoint == 362 {
 1104|      0|                coordinateNumberX = 542.5
 1105|      0|            } else if translatePoint == 363 {
 1106|      0|                coordinateNumberX = 573.5
 1107|      0|            } else if translatePoint == 364 {
 1108|      0|                coordinateNumberX = 605
 1109|      0|            } else if translatePoint == 365 {
 1110|      0|                coordinateNumberX = 634.5
 1111|      0|            } else if translatePoint == 366 {
 1112|      0|                coordinateNumberX = 711.5
 1113|      0|            } else if translatePoint == 367 {
 1114|      0|                coordinateNumberX = 742
 1115|      0|            } else if translatePoint == 368 {
 1116|      0|                coordinateNumberX = 775.5
 1117|      0|            } else if translatePoint == 369 {
 1118|      0|                coordinateNumberX = 805
 1119|      0|            } else if translatePoint == 370 {
 1120|      0|                coordinateNumberX = 837
 1121|      0|            } else if translatePoint == 371 {
 1122|      0|                coordinateNumberX = 911.5
 1123|      0|            } else if translatePoint == 372 {
 1124|      0|                coordinateNumberX = 944
 1125|      0|            } else if translatePoint == 373 {
 1126|      0|                coordinateNumberX = 976
 1127|      0|            } else if translatePoint == 374 {
 1128|      0|                coordinateNumberX = 1005
 1129|      0|            } else if translatePoint == 375 {
 1130|      0|                coordinateNumberX = 1037
 1131|      0|            }
 1132|      0|        }
 1133|      0|
 1134|      0|        // down side +
 1135|      0|        if 376 ... 400 ~= translatePoint {
 1136|      0|            coordinateNumberY = 782.5
 1137|      0|            if translatePoint == 376 {
 1138|      0|                coordinateNumberX = 123
 1139|      0|            } else if translatePoint == 377 {
 1140|      0|                coordinateNumberX = 153.5
 1141|      0|            } else if translatePoint == 378 {
 1142|      0|                coordinateNumberX = 185.5
 1143|      0|            } else if translatePoint == 379 {
 1144|      0|                coordinateNumberX = 215.5
 1145|      0|            } else if translatePoint == 380 {
 1146|      0|                coordinateNumberX = 247.5
 1147|      0|            } else if translatePoint == 381 {
 1148|      0|                coordinateNumberX = 315.5
 1149|      0|            } else if translatePoint == 382 {
 1150|      0|                coordinateNumberX = 347
 1151|      0|            } else if translatePoint == 383 {
 1152|      0|                coordinateNumberX = 378.5
 1153|      0|            } else if translatePoint == 384 {
 1154|      0|                coordinateNumberX = 410
 1155|      0|            } else if translatePoint == 385 {
 1156|      0|                coordinateNumberX = 439.5
 1157|      0|            } else if translatePoint == 386 {
 1158|      0|                coordinateNumberX = 511
 1159|      0|            } else if translatePoint == 387 {
 1160|      0|                coordinateNumberX = 542.5
 1161|      0|            } else if translatePoint == 388 {
 1162|      0|                coordinateNumberX = 573.5
 1163|      0|            } else if translatePoint == 389 {
 1164|      0|                coordinateNumberX = 605
 1165|      0|            } else if translatePoint == 390 {
 1166|      0|                coordinateNumberX = 634.5
 1167|      0|            } else if translatePoint == 391 {
 1168|      0|                coordinateNumberX = 711.5
 1169|      0|            } else if translatePoint == 392 {
 1170|      0|                coordinateNumberX = 742
 1171|      0|            } else if translatePoint == 393 {
 1172|      0|                coordinateNumberX = 775.5
 1173|      0|            } else if translatePoint == 394 {
 1174|      0|                coordinateNumberX = 805
 1175|      0|            } else if translatePoint == 395 {
 1176|      0|                coordinateNumberX = 837
 1177|      0|            } else if translatePoint == 396 {
 1178|      0|                coordinateNumberX = 911.5
 1179|      0|            } else if translatePoint == 397 {
 1180|      0|                coordinateNumberX = 944
 1181|      0|            } else if translatePoint == 398 {
 1182|      0|                coordinateNumberX = 976
 1183|      0|            } else if translatePoint == 399 {
 1184|      0|                coordinateNumberX = 1005
 1185|      0|            } else if translatePoint == 400 {
 1186|      0|                coordinateNumberX = 1037
 1187|      0|            }
 1188|      0|        }
 1189|      0|
 1190|      0|        // j
 1191|      0|        if 51 ... 80 ~= translatePoint {
 1192|      0|            coordinateNumberY = 336.5
 1193|      0|            if translatePoint == 51 {
 1194|      0|                coordinateNumberX = 107.5
 1195|      0|            } else if translatePoint == 52 {
 1196|      0|                coordinateNumberX = 142.5
 1197|      0|            } else if translatePoint == 53 {
 1198|      0|                coordinateNumberX = 176
 1199|      0|            } else if translatePoint == 54 {
 1200|      0|                coordinateNumberX = 208
 1201|      0|            } else if translatePoint == 55 {
 1202|      0|                coordinateNumberX = 241
 1203|      0|            } else if translatePoint == 56 {
 1204|      0|                coordinateNumberX = 273
 1205|      0|            } else if translatePoint == 57 {
 1206|      0|                coordinateNumberX = 305.5
 1207|      0|            } else if translatePoint == 58 {
 1208|      0|                coordinateNumberX = 337.5
 1209|      0|            } else if translatePoint == 59 {
 1210|      0|                coordinateNumberX = 371
 1211|      0|            } else if translatePoint == 60 {
 1212|      0|                coordinateNumberX = 402.5
 1213|      0|            } else if translatePoint == 61 {
 1214|      0|                coordinateNumberX = 436
 1215|      0|            } else if translatePoint == 62 {
 1216|      0|                coordinateNumberX = 468.5
 1217|      0|            } else if translatePoint == 63 {
 1218|      0|                coordinateNumberX = 504
 1219|      0|            } else if translatePoint == 64 {
 1220|      0|                coordinateNumberX = 538
 1221|      0|            } else if translatePoint == 65 {
 1222|      0|                coordinateNumberX = 569.5
 1223|      0|            } else if translatePoint == 66 {
 1224|      0|                coordinateNumberX = 603
 1225|      0|            } else if translatePoint == 67 {
 1226|      0|                coordinateNumberX = 635
 1227|      0|            } else if translatePoint == 68 {
 1228|      0|                coordinateNumberX = 669.5
 1229|      0|            } else if translatePoint == 69 {
 1230|      0|                coordinateNumberX = 701.5
 1231|      0|            } else if translatePoint == 70 {
 1232|      0|                coordinateNumberX = 733
 1233|      0|            } else if translatePoint == 71 {
 1234|      0|                coordinateNumberX = 765.5
 1235|      0|            } else if translatePoint == 72 {
 1236|      0|                coordinateNumberX = 798.5
 1237|      0|            } else if translatePoint == 73 {
 1238|      0|                coordinateNumberX = 833
 1239|      0|            } else if translatePoint == 74 {
 1240|      0|                coordinateNumberX = 867.5
 1241|      0|            } else if translatePoint == 75 {
 1242|      0|                coordinateNumberX = 899.5
 1243|      0|            } else if translatePoint == 76 {
 1244|      0|                coordinateNumberX = 933
 1245|      0|            } else if translatePoint == 77 {
 1246|      0|                coordinateNumberX = 967
 1247|      0|            } else if translatePoint == 78 {
 1248|      0|                coordinateNumberX = 999.5
 1249|      0|            } else if translatePoint == 79 {
 1250|      0|                coordinateNumberX = 1031
 1251|      0|            } else if translatePoint == 80 {
 1252|      0|                coordinateNumberX = 1062.5
 1253|      0|            }
 1254|      0|        }
 1255|      0|
 1256|      0|        // i
 1257|      0|        if 81 ... 110 ~= translatePoint {
 1258|      0|            coordinateNumberY = 365
 1259|      0|            if translatePoint == 81 {
 1260|      0|                coordinateNumberX = 107.5
 1261|      0|            } else if translatePoint == 82 {
 1262|      0|                coordinateNumberX = 142.5
 1263|      0|            } else if translatePoint == 83 {
 1264|      0|                coordinateNumberX = 176
 1265|      0|            } else if translatePoint == 84 {
 1266|      0|                coordinateNumberX = 208
 1267|      0|            } else if translatePoint == 85 {
 1268|      0|                coordinateNumberX = 241
 1269|      0|            } else if translatePoint == 86 {
 1270|      0|                coordinateNumberX = 273
 1271|      0|            } else if translatePoint == 87 {
 1272|      0|                coordinateNumberX = 305.5
 1273|      0|            } else if translatePoint == 88 {
 1274|      0|                coordinateNumberX = 337.5
 1275|      0|            } else if translatePoint == 89 {
 1276|      0|                coordinateNumberX = 371
 1277|      0|            } else if translatePoint == 90 {
 1278|      0|                coordinateNumberX = 402.5
 1279|      0|            } else if translatePoint == 91 {
 1280|      0|                coordinateNumberX = 436
 1281|      0|            } else if translatePoint == 92 {
 1282|      0|                coordinateNumberX = 468.5
 1283|      0|            } else if translatePoint == 93 {
 1284|      0|                coordinateNumberX = 504
 1285|      0|            } else if translatePoint == 94 {
 1286|      0|                coordinateNumberX = 538
 1287|      0|            } else if translatePoint == 95 {
 1288|      0|                coordinateNumberX = 569.5
 1289|      0|            } else if translatePoint == 96 {
 1290|      0|                coordinateNumberX = 603
 1291|      0|            } else if translatePoint == 97 {
 1292|      0|                coordinateNumberX = 635
 1293|      0|            } else if translatePoint == 98 {
 1294|      0|                coordinateNumberX = 669.5
 1295|      0|            } else if translatePoint == 99 {
 1296|      0|                coordinateNumberX = 701.5
 1297|      0|            } else if translatePoint == 100 {
 1298|      0|                coordinateNumberX = 733
 1299|      0|            } else if translatePoint == 101 {
 1300|      0|                coordinateNumberX = 765.5
 1301|      0|            } else if translatePoint == 102 {
 1302|      0|                coordinateNumberX = 798.5
 1303|      0|            } else if translatePoint == 103 {
 1304|      0|                coordinateNumberX = 833
 1305|      0|            } else if translatePoint == 104 {
 1306|      0|                coordinateNumberX = 867.5
 1307|      0|            } else if translatePoint == 105 {
 1308|      0|                coordinateNumberX = 899.5
 1309|      0|            } else if translatePoint == 106 {
 1310|      0|                coordinateNumberX = 933
 1311|      0|            } else if translatePoint == 107 {
 1312|      0|                coordinateNumberX = 967
 1313|      0|            } else if translatePoint == 108 {
 1314|      0|                coordinateNumberX = 999.5
 1315|      0|            } else if translatePoint == 109 {
 1316|      0|                coordinateNumberX = 1031
 1317|      0|            } else if translatePoint == 110 {
 1318|      0|                coordinateNumberX = 1062.5
 1319|      0|            }
 1320|      0|        }
 1321|      0|
 1322|      0|        // h
 1323|      0|        if 111 ... 140 ~= translatePoint {
 1324|      0|            coordinateNumberY = 399.5
 1325|      0|            if translatePoint == 111 {
 1326|      0|                coordinateNumberX = 107.5
 1327|      0|            } else if translatePoint == 112 {
 1328|      0|                coordinateNumberX = 142.5
 1329|      0|            } else if translatePoint == 113 {
 1330|      0|                coordinateNumberX = 176
 1331|      0|            } else if translatePoint == 114 {
 1332|      0|                coordinateNumberX = 208
 1333|      0|            } else if translatePoint == 115 {
 1334|      0|                coordinateNumberX = 241
 1335|      0|            } else if translatePoint == 116 {
 1336|      0|                coordinateNumberX = 273
 1337|      0|            } else if translatePoint == 117 {
 1338|      0|                coordinateNumberX = 305.5
 1339|      0|            } else if translatePoint == 118 {
 1340|      0|                coordinateNumberX = 337.5
 1341|      0|            } else if translatePoint == 119 {
 1342|      0|                coordinateNumberX = 371
 1343|      0|            } else if translatePoint == 120 {
 1344|      0|                coordinateNumberX = 402.5
 1345|      0|            } else if translatePoint == 121 {
 1346|      0|                coordinateNumberX = 436
 1347|      0|            } else if translatePoint == 122 {
 1348|      0|                coordinateNumberX = 468.5
 1349|      0|            } else if translatePoint == 123 {
 1350|      0|                coordinateNumberX = 504
 1351|      0|            } else if translatePoint == 124 {
 1352|      0|                coordinateNumberX = 538
 1353|      0|            } else if translatePoint == 125 {
 1354|      0|                coordinateNumberX = 569.5
 1355|      0|            } else if translatePoint == 126 {
 1356|      0|                coordinateNumberX = 603
 1357|      0|            } else if translatePoint == 127 {
 1358|      0|                coordinateNumberX = 635
 1359|      0|            } else if translatePoint == 128 {
 1360|      0|                coordinateNumberX = 669.5
 1361|      0|            } else if translatePoint == 129 {
 1362|      0|                coordinateNumberX = 701.5
 1363|      0|            } else if translatePoint == 130 {
 1364|      0|                coordinateNumberX = 733
 1365|      0|            } else if translatePoint == 131 {
 1366|      0|                coordinateNumberX = 765.5
 1367|      0|            } else if translatePoint == 132 {
 1368|      0|                coordinateNumberX = 798.5
 1369|      0|            } else if translatePoint == 133 {
 1370|      0|                coordinateNumberX = 833
 1371|      0|            } else if translatePoint == 134 {
 1372|      0|                coordinateNumberX = 867.5
 1373|      0|            } else if translatePoint == 135 {
 1374|      0|                coordinateNumberX = 899.5
 1375|      0|            } else if translatePoint == 136 {
 1376|      0|                coordinateNumberX = 933
 1377|      0|            } else if translatePoint == 137 {
 1378|      0|                coordinateNumberX = 967
 1379|      0|            } else if translatePoint == 138 {
 1380|      0|                coordinateNumberX = 999.5
 1381|      0|            } else if translatePoint == 139 {
 1382|      0|                coordinateNumberX = 1031
 1383|      0|            } else if translatePoint == 140 {
 1384|      0|                coordinateNumberX = 1062.5
 1385|      0|            }
 1386|      0|        }
 1387|      0|
 1388|      0|        // g
 1389|      0|        if 141 ... 170 ~= translatePoint {
 1390|      0|            coordinateNumberY = 428.5
 1391|      0|            if translatePoint == 141 {
 1392|      0|                coordinateNumberX = 107.5
 1393|      0|            } else if translatePoint == 142 {
 1394|      0|                coordinateNumberX = 142.5
 1395|      0|            } else if translatePoint == 143 {
 1396|      0|                coordinateNumberX = 176
 1397|      0|            } else if translatePoint == 144 {
 1398|      0|                coordinateNumberX = 208
 1399|      0|            } else if translatePoint == 145 {
 1400|      0|                coordinateNumberX = 241
 1401|      0|            } else if translatePoint == 146 {
 1402|      0|                coordinateNumberX = 273
 1403|      0|            } else if translatePoint == 147 {
 1404|      0|                coordinateNumberX = 305.5
 1405|      0|            } else if translatePoint == 148 {
 1406|      0|                coordinateNumberX = 337.5
 1407|      0|            } else if translatePoint == 149 {
 1408|      0|                coordinateNumberX = 371
 1409|      0|            } else if translatePoint == 150 {
 1410|      0|                coordinateNumberX = 402.5
 1411|      0|            } else if translatePoint == 151 {
 1412|      0|                coordinateNumberX = 436
 1413|      0|            } else if translatePoint == 152 {
 1414|      0|                coordinateNumberX = 468.5
 1415|      0|            } else if translatePoint == 153 {
 1416|      0|                coordinateNumberX = 504
 1417|      0|            } else if translatePoint == 154 {
 1418|      0|                coordinateNumberX = 538
 1419|      0|            } else if translatePoint == 155 {
 1420|      0|                coordinateNumberX = 569.5
 1421|      0|            } else if translatePoint == 156 {
 1422|      0|                coordinateNumberX = 603
 1423|      0|            } else if translatePoint == 157 {
 1424|      0|                coordinateNumberX = 635
 1425|      0|            } else if translatePoint == 158 {
 1426|      0|                coordinateNumberX = 669.5
 1427|      0|            } else if translatePoint == 159 {
 1428|      0|                coordinateNumberX = 701.5
 1429|      0|            } else if translatePoint == 160 {
 1430|      0|                coordinateNumberX = 733
 1431|      0|            } else if translatePoint == 161 {
 1432|      0|                coordinateNumberX = 765.5
 1433|      0|            } else if translatePoint == 162 {
 1434|      0|                coordinateNumberX = 798.5
 1435|      0|            } else if translatePoint == 163 {
 1436|      0|                coordinateNumberX = 833
 1437|      0|            } else if translatePoint == 164 {
 1438|      0|                coordinateNumberX = 867.5
 1439|      0|            } else if translatePoint == 165 {
 1440|      0|                coordinateNumberX = 899.5
 1441|      0|            } else if translatePoint == 166 {
 1442|      0|                coordinateNumberX = 933
 1443|      0|            } else if translatePoint == 167 {
 1444|      0|                coordinateNumberX = 967
 1445|      0|            } else if translatePoint == 168 {
 1446|      0|                coordinateNumberX = 999.5
 1447|      0|            } else if translatePoint == 169 {
 1448|      0|                coordinateNumberX = 1031
 1449|      0|            } else if translatePoint == 170 {
 1450|      0|                coordinateNumberX = 1062.5
 1451|      0|            }
 1452|      0|        }
 1453|      0|
 1454|      0|        // f
 1455|      0|        if 171 ... 200 ~= translatePoint {
 1456|      0|            coordinateNumberY = 459.5
 1457|      0|            if translatePoint == 171 {
 1458|      0|                coordinateNumberX = 107.5
 1459|      0|            } else if translatePoint == 172 {
 1460|      0|                coordinateNumberX = 142.5
 1461|      0|            } else if translatePoint == 173 {
 1462|      0|                coordinateNumberX = 176
 1463|      0|            } else if translatePoint == 174 {
 1464|      0|                coordinateNumberX = 208
 1465|      0|            } else if translatePoint == 175 {
 1466|      0|                coordinateNumberX = 241
 1467|      0|            } else if translatePoint == 176 {
 1468|      0|                coordinateNumberX = 273
 1469|      0|            } else if translatePoint == 177 {
 1470|      0|                coordinateNumberX = 305.5
 1471|      0|            } else if translatePoint == 178 {
 1472|      0|                coordinateNumberX = 337.5
 1473|      0|            } else if translatePoint == 179 {
 1474|      0|                coordinateNumberX = 371
 1475|      0|            } else if translatePoint == 180 {
 1476|      0|                coordinateNumberX = 402.5
 1477|      0|            } else if translatePoint == 181 {
 1478|      0|                coordinateNumberX = 436
 1479|      0|            } else if translatePoint == 182 {
 1480|      0|                coordinateNumberX = 468.5
 1481|      0|            } else if translatePoint == 183 {
 1482|      0|                coordinateNumberX = 504
 1483|      0|            } else if translatePoint == 184 {
 1484|      0|                coordinateNumberX = 538
 1485|      0|            } else if translatePoint == 185 {
 1486|      0|                coordinateNumberX = 569.5
 1487|      0|            } else if translatePoint == 186 {
 1488|      0|                coordinateNumberX = 603
 1489|      0|            } else if translatePoint == 187 {
 1490|      0|                coordinateNumberX = 635
 1491|      0|            } else if translatePoint == 188 {
 1492|      0|                coordinateNumberX = 669.5
 1493|      0|            } else if translatePoint == 189 {
 1494|      0|                coordinateNumberX = 701.5
 1495|      0|            } else if translatePoint == 190 {
 1496|      0|                coordinateNumberX = 733
 1497|      0|            } else if translatePoint == 191 {
 1498|      0|                coordinateNumberX = 765.5
 1499|      0|            } else if translatePoint == 192 {
 1500|      0|                coordinateNumberX = 798.5
 1501|      0|            } else if translatePoint == 193 {
 1502|      0|                coordinateNumberX = 833
 1503|      0|            } else if translatePoint == 194 {
 1504|      0|                coordinateNumberX = 867.5
 1505|      0|            } else if translatePoint == 195 {
 1506|      0|                coordinateNumberX = 899.5
 1507|      0|            } else if translatePoint == 196 {
 1508|      0|                coordinateNumberX = 933
 1509|      0|            } else if translatePoint == 197 {
 1510|      0|                coordinateNumberX = 967
 1511|      0|            } else if translatePoint == 198 {
 1512|      0|                coordinateNumberX = 999.5
 1513|      0|            } else if translatePoint == 199 {
 1514|      0|                coordinateNumberX = 1031
 1515|      0|            } else if translatePoint == 200 {
 1516|      0|                coordinateNumberX = 1062.5
 1517|      0|            }
 1518|      0|        }
 1519|      0|
 1520|      0|        // e
 1521|      0|        if 201 ... 230 ~= translatePoint {
 1522|      0|            coordinateNumberY = 538.5
 1523|      0|            if translatePoint == 201 {
 1524|      0|                coordinateNumberX = 107.5
 1525|      0|            } else if translatePoint == 202 {
 1526|      0|                coordinateNumberX = 142.5
 1527|      0|            } else if translatePoint == 203 {
 1528|      0|                coordinateNumberX = 176
 1529|      0|            } else if translatePoint == 204 {
 1530|      0|                coordinateNumberX = 208
 1531|      0|            } else if translatePoint == 205 {
 1532|      0|                coordinateNumberX = 241
 1533|      0|            } else if translatePoint == 206 {
 1534|      0|                coordinateNumberX = 273
 1535|      0|            } else if translatePoint == 207 {
 1536|      0|                coordinateNumberX = 305.5
 1537|      0|            } else if translatePoint == 208 {
 1538|      0|                coordinateNumberX = 337.5
 1539|      0|            } else if translatePoint == 209 {
 1540|      0|                coordinateNumberX = 371
 1541|      0|            } else if translatePoint == 210 {
 1542|      0|                coordinateNumberX = 402.5
 1543|      0|            } else if translatePoint == 211 {
 1544|      0|                coordinateNumberX = 436
 1545|      0|            } else if translatePoint == 212 {
 1546|      0|                coordinateNumberX = 468.5
 1547|      0|            } else if translatePoint == 213 {
 1548|      0|                coordinateNumberX = 504
 1549|      0|            } else if translatePoint == 214 {
 1550|      0|                coordinateNumberX = 538
 1551|      0|            } else if translatePoint == 215 {
 1552|      0|                coordinateNumberX = 569.5
 1553|      0|            } else if translatePoint == 216 {
 1554|      0|                coordinateNumberX = 603
 1555|      0|            } else if translatePoint == 217 {
 1556|      0|                coordinateNumberX = 635
 1557|      0|            } else if translatePoint == 218 {
 1558|      0|                coordinateNumberX = 669.5
 1559|      0|            } else if translatePoint == 219 {
 1560|      0|                coordinateNumberX = 701.5
 1561|      0|            } else if translatePoint == 220 {
 1562|      0|                coordinateNumberX = 733
 1563|      0|            } else if translatePoint == 221 {
 1564|      0|                coordinateNumberX = 765.5
 1565|      0|            } else if translatePoint == 222 {
 1566|      0|                coordinateNumberX = 798.5
 1567|      0|            } else if translatePoint == 223 {
 1568|      0|                coordinateNumberX = 833
 1569|      0|            } else if translatePoint == 224 {
 1570|      0|                coordinateNumberX = 867.5
 1571|      0|            } else if translatePoint == 225 {
 1572|      0|                coordinateNumberX = 899.5
 1573|      0|            } else if translatePoint == 226 {
 1574|      0|                coordinateNumberX = 933
 1575|      0|            } else if translatePoint == 227 {
 1576|      0|                coordinateNumberX = 967
 1577|      0|            } else if translatePoint == 228 {
 1578|      0|                coordinateNumberX = 999.5
 1579|      0|            } else if translatePoint == 229 {
 1580|      0|                coordinateNumberX = 1031
 1581|      0|            } else if translatePoint == 230 {
 1582|      0|                coordinateNumberX = 1062.5
 1583|      0|            }
 1584|      0|        }
 1585|      0|
 1586|      0|        // d
 1587|      0|        if 231 ... 260 ~= translatePoint {
 1588|      0|            coordinateNumberY = 568
 1589|      0|            if translatePoint == 231 {
 1590|      0|                coordinateNumberX = 107.5
 1591|      0|            } else if translatePoint == 232 {
 1592|      0|                coordinateNumberX = 142.5
 1593|      0|            } else if translatePoint == 233 {
 1594|      0|                coordinateNumberX = 176
 1595|      0|            } else if translatePoint == 234 {
 1596|      0|                coordinateNumberX = 208
 1597|      0|            } else if translatePoint == 235 {
 1598|      0|                coordinateNumberX = 241
 1599|      0|            } else if translatePoint == 236 {
 1600|      0|                coordinateNumberX = 273
 1601|      0|            } else if translatePoint == 237 {
 1602|      0|                coordinateNumberX = 305.5
 1603|      0|            } else if translatePoint == 238 {
 1604|      0|                coordinateNumberX = 337.5
 1605|      0|            } else if translatePoint == 239 {
 1606|      0|                coordinateNumberX = 371
 1607|      0|            } else if translatePoint == 240 {
 1608|      0|                coordinateNumberX = 402.5
 1609|      0|            } else if translatePoint == 241 {
 1610|      0|                coordinateNumberX = 436
 1611|      0|            } else if translatePoint == 242 {
 1612|      0|                coordinateNumberX = 468.5
 1613|      0|            } else if translatePoint == 243 {
 1614|      0|                coordinateNumberX = 504
 1615|      0|            } else if translatePoint == 244 {
 1616|      0|                coordinateNumberX = 538
 1617|      0|            } else if translatePoint == 245 {
 1618|      0|                coordinateNumberX = 569.5
 1619|      0|            } else if translatePoint == 246 {
 1620|      0|                coordinateNumberX = 603
 1621|      0|            } else if translatePoint == 247 {
 1622|      0|                coordinateNumberX = 635
 1623|      0|            } else if translatePoint == 248 {
 1624|      0|                coordinateNumberX = 669.5
 1625|      0|            } else if translatePoint == 249 {
 1626|      0|                coordinateNumberX = 701.5
 1627|      0|            } else if translatePoint == 250 {
 1628|      0|                coordinateNumberX = 733
 1629|      0|            } else if translatePoint == 251 {
 1630|      0|                coordinateNumberX = 765.5
 1631|      0|            } else if translatePoint == 252 {
 1632|      0|                coordinateNumberX = 798.5
 1633|      0|            } else if translatePoint == 253 {
 1634|      0|                coordinateNumberX = 833
 1635|      0|            } else if translatePoint == 254 {
 1636|      0|                coordinateNumberX = 867.5
 1637|      0|            } else if translatePoint == 255 {
 1638|      0|                coordinateNumberX = 899.5
 1639|      0|            } else if translatePoint == 256 {
 1640|      0|                coordinateNumberX = 933
 1641|      0|            } else if translatePoint == 257 {
 1642|      0|                coordinateNumberX = 967
 1643|      0|            } else if translatePoint == 258 {
 1644|      0|                coordinateNumberX = 999.5
 1645|      0|            } else if translatePoint == 259 {
 1646|      0|                coordinateNumberX = 1031
 1647|      0|            } else if translatePoint == 260 {
 1648|      0|                coordinateNumberX = 1062.5
 1649|      0|            }
 1650|      0|        }
 1651|      0|
 1652|      0|        // c
 1653|      0|        if 261 ... 290 ~= translatePoint {
 1654|      0|            coordinateNumberY = 598.5
 1655|      0|            if translatePoint == 261 {
 1656|      0|                coordinateNumberX = 107.5
 1657|      0|            } else if translatePoint == 262 {
 1658|      0|                coordinateNumberX = 142.5
 1659|      0|            } else if translatePoint == 263 {
 1660|      0|                coordinateNumberX = 176
 1661|      0|            } else if translatePoint == 264 {
 1662|      0|                coordinateNumberX = 208
 1663|      0|            } else if translatePoint == 265 {
 1664|      0|                coordinateNumberX = 241
 1665|      0|            } else if translatePoint == 266 {
 1666|      0|                coordinateNumberX = 273
 1667|      0|            } else if translatePoint == 267 {
 1668|      0|                coordinateNumberX = 305.5
 1669|      0|            } else if translatePoint == 268 {
 1670|      0|                coordinateNumberX = 337.5
 1671|      0|            } else if translatePoint == 269 {
 1672|      0|                coordinateNumberX = 371
 1673|      0|            } else if translatePoint == 270 {
 1674|      0|                coordinateNumberX = 402.5
 1675|      0|            } else if translatePoint == 271 {
 1676|      0|                coordinateNumberX = 436
 1677|      0|            } else if translatePoint == 272 {
 1678|      0|                coordinateNumberX = 468.5
 1679|      0|            } else if translatePoint == 273 {
 1680|      0|                coordinateNumberX = 504
 1681|      0|            } else if translatePoint == 274 {
 1682|      0|                coordinateNumberX = 538
 1683|      0|            } else if translatePoint == 275 {
 1684|      0|                coordinateNumberX = 569.5
 1685|      0|            } else if translatePoint == 276 {
 1686|      0|                coordinateNumberX = 603
 1687|      0|            } else if translatePoint == 277 {
 1688|      0|                coordinateNumberX = 635
 1689|      0|            } else if translatePoint == 278 {
 1690|      0|                coordinateNumberX = 669.5
 1691|      0|            } else if translatePoint == 279 {
 1692|      0|                coordinateNumberX = 701.5
 1693|      0|            } else if translatePoint == 280 {
 1694|      0|                coordinateNumberX = 733
 1695|      0|            } else if translatePoint == 281 {
 1696|      0|                coordinateNumberX = 765.5
 1697|      0|            } else if translatePoint == 282 {
 1698|      0|                coordinateNumberX = 798.5
 1699|      0|            } else if translatePoint == 283 {
 1700|      0|                coordinateNumberX = 833
 1701|      0|            } else if translatePoint == 284 {
 1702|      0|                coordinateNumberX = 867.5
 1703|      0|            } else if translatePoint == 285 {
 1704|      0|                coordinateNumberX = 899.5
 1705|      0|            } else if translatePoint == 286 {
 1706|      0|                coordinateNumberX = 933
 1707|      0|            } else if translatePoint == 287 {
 1708|      0|                coordinateNumberX = 967
 1709|      0|            } else if translatePoint == 288 {
 1710|      0|                coordinateNumberX = 999.5
 1711|      0|            } else if translatePoint == 289 {
 1712|      0|                coordinateNumberX = 1031
 1713|      0|            } else if translatePoint == 290 {
 1714|      0|                coordinateNumberX = 1062.5
 1715|      0|            }
 1716|      0|        }
 1717|      0|
 1718|      0|        // b
 1719|      0|        if 291 ... 320 ~= translatePoint {
 1720|      0|            coordinateNumberY = 631
 1721|      0|            if translatePoint == 291 {
 1722|      0|                coordinateNumberX = 107.5
 1723|      0|            } else if translatePoint == 292 {
 1724|      0|                coordinateNumberX = 142.5
 1725|      0|            } else if translatePoint == 293 {
 1726|      0|                coordinateNumberX = 176
 1727|      0|            } else if translatePoint == 294 {
 1728|      0|                coordinateNumberX = 208
 1729|      0|            } else if translatePoint == 295 {
 1730|      0|                coordinateNumberX = 241
 1731|      0|            } else if translatePoint == 296 {
 1732|      0|                coordinateNumberX = 273
 1733|      0|            } else if translatePoint == 297 {
 1734|      0|                coordinateNumberX = 305.5
 1735|      0|            } else if translatePoint == 298 {
 1736|      0|                coordinateNumberX = 337.5
 1737|      0|            } else if translatePoint == 299 {
 1738|      0|                coordinateNumberX = 371
 1739|      0|            } else if translatePoint == 300 {
 1740|      0|                coordinateNumberX = 402.5
 1741|      0|            } else if translatePoint == 301 {
 1742|      0|                coordinateNumberX = 436
 1743|      0|            } else if translatePoint == 302 {
 1744|      0|                coordinateNumberX = 468.5
 1745|      0|            } else if translatePoint == 303 {
 1746|      0|                coordinateNumberX = 504
 1747|      0|            } else if translatePoint == 304 {
 1748|      0|                coordinateNumberX = 538
 1749|      0|            } else if translatePoint == 305 {
 1750|      0|                coordinateNumberX = 569.5
 1751|      0|            } else if translatePoint == 306 {
 1752|      0|                coordinateNumberX = 603
 1753|      0|            } else if translatePoint == 307 {
 1754|      0|                coordinateNumberX = 635
 1755|      0|            } else if translatePoint == 308 {
 1756|      0|                coordinateNumberX = 669.5
 1757|      0|            } else if translatePoint == 309 {
 1758|      0|                coordinateNumberX = 701.5
 1759|      0|            } else if translatePoint == 310 {
 1760|      0|                coordinateNumberX = 733
 1761|      0|            } else if translatePoint == 311 {
 1762|      0|                coordinateNumberX = 765.5
 1763|      0|            } else if translatePoint == 312 {
 1764|      0|                coordinateNumberX = 798.5
 1765|      0|            } else if translatePoint == 313 {
 1766|      0|                coordinateNumberX = 833
 1767|      0|            } else if translatePoint == 314 {
 1768|      0|                coordinateNumberX = 867.5
 1769|      0|            } else if translatePoint == 315 {
 1770|      0|                coordinateNumberX = 899.5
 1771|      0|            } else if translatePoint == 316 {
 1772|      0|                coordinateNumberX = 933
 1773|      0|            } else if translatePoint == 317 {
 1774|      0|                coordinateNumberX = 967
 1775|      0|            } else if translatePoint == 318 {
 1776|      0|                coordinateNumberX = 999.5
 1777|      0|            } else if translatePoint == 319 {
 1778|      0|                coordinateNumberX = 1031
 1779|      0|            } else if translatePoint == 320 {
 1780|      0|                coordinateNumberX = 1062.5
 1781|      0|            }
 1782|      0|        }
 1783|      0|
 1784|      0|        // a
 1785|      0|        if 321 ... 350 ~= translatePoint {
 1786|      0|            coordinateNumberY = 661.5
 1787|      0|            if translatePoint == 321 {
 1788|      0|                coordinateNumberX = 107.5
 1789|      0|            } else if translatePoint == 322 {
 1790|      0|                coordinateNumberX = 142.5
 1791|      0|            } else if translatePoint == 323 {
 1792|      0|                coordinateNumberX = 176
 1793|      0|            } else if translatePoint == 324 {
 1794|      0|                coordinateNumberX = 208
 1795|      0|            } else if translatePoint == 325 {
 1796|      0|                coordinateNumberX = 241
 1797|      0|            } else if translatePoint == 326 {
 1798|      0|                coordinateNumberX = 273
 1799|      0|            } else if translatePoint == 327 {
 1800|      0|                coordinateNumberX = 305.5
 1801|      0|            } else if translatePoint == 328 {
 1802|      0|                coordinateNumberX = 337.5
 1803|      0|            } else if translatePoint == 329 {
 1804|      0|                coordinateNumberX = 371
 1805|      0|            } else if translatePoint == 330 {
 1806|      0|                coordinateNumberX = 402.5
 1807|      0|            } else if translatePoint == 331 {
 1808|      0|                coordinateNumberX = 436
 1809|      0|            } else if translatePoint == 332 {
 1810|      0|                coordinateNumberX = 468.5
 1811|      0|            } else if translatePoint == 333 {
 1812|      0|                coordinateNumberX = 504
 1813|      0|            } else if translatePoint == 334 {
 1814|      0|                coordinateNumberX = 538
 1815|      0|            } else if translatePoint == 335 {
 1816|      0|                coordinateNumberX = 569.5
 1817|      0|            } else if translatePoint == 336 {
 1818|      0|                coordinateNumberX = 603
 1819|      0|            } else if translatePoint == 337 {
 1820|      0|                coordinateNumberX = 635
 1821|      0|            } else if translatePoint == 338 {
 1822|      0|                coordinateNumberX = 669.5
 1823|      0|            } else if translatePoint == 339 {
 1824|      0|                coordinateNumberX = 701.5
 1825|      0|            } else if translatePoint == 340 {
 1826|      0|                coordinateNumberX = 733
 1827|      0|            } else if translatePoint == 341 {
 1828|      0|                coordinateNumberX = 765.5
 1829|      0|            } else if translatePoint == 342 {
 1830|      0|                coordinateNumberX = 798.5
 1831|      0|            } else if translatePoint == 343 {
 1832|      0|                coordinateNumberX = 833
 1833|      0|            } else if translatePoint == 344 {
 1834|      0|                coordinateNumberX = 867.5
 1835|      0|            } else if translatePoint == 345 {
 1836|      0|                coordinateNumberX = 899.5
 1837|      0|            } else if translatePoint == 346 {
 1838|      0|                coordinateNumberX = 933
 1839|      0|            } else if translatePoint == 347 {
 1840|      0|                coordinateNumberX = 967
 1841|      0|            } else if translatePoint == 348 {
 1842|      0|                coordinateNumberX = 999.5
 1843|      0|            } else if translatePoint == 349 {
 1844|      0|                coordinateNumberX = 1031
 1845|      0|            } else if translatePoint == 350 {
 1846|      0|                coordinateNumberX = 1062.5
 1847|      0|            }
 1848|      0|        }
 1849|      0|
 1850|      0|        // Analog
 1851|      0|        if 404 ... 414 ~= translatePoint {
 1852|      0|            coordinateNumberY = 984
 1853|      0|            if translatePoint == 404 { // 3.3V
 1854|      0|                coordinateNumberX = 605.5
 1855|      0|            } else if translatePoint == 405 { // 5V
 1856|      0|                coordinateNumberX = 644.5
 1857|      0|            } else if translatePoint == 406 { // GND
 1858|      0|                coordinateNumberX = 685
 1859|      0|            } else if translatePoint == 407 { // GND
 1860|      0|                coordinateNumberX = 722
 1861|      0|            } else if translatePoint == 408 { // Vin
 1862|      0|                coordinateNumberX = 763
 1863|      0|            } else if translatePoint == 409 { // A0
 1864|      0|                coordinateNumberX = 835
 1865|      0|            } else if translatePoint == 410 { // A1
 1866|      0|                coordinateNumberX = 882
 1867|      0|            } else if translatePoint == 411 { // A2
 1868|      0|                coordinateNumberX = 921.5
 1869|      0|            } else if translatePoint == 412 { // A3
 1870|      0|                coordinateNumberX = 961.5
 1871|      0|            } else if translatePoint == 413 { // A4
 1872|      0|                coordinateNumberX = 999.5
 1873|      0|            } else if translatePoint == 414 { // A5
 1874|      0|                coordinateNumberX = 1038
 1875|      0|            }
 1876|      0|        }
 1877|      0|
 1878|      0|        // Digital
 1879|      0|        if 418 ... 432 ~= translatePoint {
 1880|      0|            coordinateNumberY = 65.5
 1881|      0|            if translatePoint == 418 { // GND
 1882|      0|                coordinateNumberX = 502.5
 1883|      0|            } else if translatePoint == 419 { // 13
 1884|      0|                coordinateNumberX = 541.5
 1885|      0|            } else if translatePoint == 420 {
 1886|      0|                coordinateNumberX = 581
 1887|      0|            } else if translatePoint == 421 {
 1888|      0|                coordinateNumberX = 622
 1889|      0|            } else if translatePoint == 422 {
 1890|      0|                coordinateNumberX = 661.5
 1891|      0|            } else if translatePoint == 423 {
 1892|      0|                coordinateNumberX = 699.5
 1893|      0|            } else if translatePoint == 424 {
 1894|      0|                coordinateNumberX = 739
 1895|      0|            } else if translatePoint == 425 {
 1896|      0|                coordinateNumberX = 805.5
 1897|      0|            } else if translatePoint == 426 {
 1898|      0|                coordinateNumberX = 845
 1899|      0|            } else if translatePoint == 427 {
 1900|      0|                coordinateNumberX = 882.5
 1901|      0|            } else if translatePoint == 428 {
 1902|      0|                coordinateNumberX = 922
 1903|      0|            } else if translatePoint == 429 {
 1904|      0|                coordinateNumberX = 962.5
 1905|      0|            } else if translatePoint == 430 {
 1906|      0|                coordinateNumberX = 1001.5
 1907|      0|            } else if translatePoint == 431 {
 1908|      0|                coordinateNumberX = 1040.5
 1909|      0|            } else if translatePoint == 432 {
 1910|      0|                coordinateNumberX = 1078.5
 1911|      0|            }
 1912|      0|        }
 1913|      0|
 1914|      0|//        return true
 1915|      0|    }
 1916|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/CustomView/ArduinoUnoView/ArduinoUnoView.swift:
    1|       |//
    2|       |//  ArduinoUnoView.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/06/05.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |class ArduinoUnoView: UIView {
   12|       |    var tapLocation: CGPoint = CGPoint()
   13|       |    var cgRect: CGRect = CGRect()
   14|       |    var uiView = UIView()
   15|       |
   16|       |    /*
   17|       |     // Only override draw() if you perform custom drawing.
   18|       |     // An empty implementation adversely affects performance during animation.
   19|       |     override func draw(_ rect: CGRect) {
   20|       |     // Drawing code
   21|       |     }
   22|       |     */
   23|       |
   24|       |    // コードから生成された場合
   25|      0|    override init(frame: CGRect) {
   26|      0|        super.init(frame: frame)
   27|      0|        loadNib()
   28|      0|    }
   29|       |
   30|       |    // ストーリーボードから生成された場合
   31|      0|    required init(coder aDecoder: NSCoder) {
   32|      0|        super.init(coder: aDecoder)!
   33|      0|        loadNib()
   34|      0|    }
   35|       |
   36|      0|    func loadNib() {
   37|      0|        let view = Bundle.main.loadNibNamed("ArduinoUnoView", owner: self, options: nil)?.first as! UIView
   38|      0|        view.frame = bounds
   39|      0|        addSubview(view)
   40|      0|    }
   41|       |}
   42|       |
   43|       |/*
   44|       | 参考サイト
   45|       | https://qiita.com/i6r/items/5ff6224b3b7eea62e906
   46|       | http://blue-bear.jp/kb/swift4-uiview%E3%81%AEx-y%E5%BA%A7%E6%A8%99%E3%82%84%E6%A8%AA%E5%B9%85%E3%83%BB%E7%B8%A6%E5%B9%85%E3%82%92%E3%82%AB%E3%83%B3%E3%82%BF%E3%83%B3%E3%81%AB%E5%8F%96%E5%BE%97%E3%83%BB%E8%A8%AD%E5%AE%9A/
   47|       | */
   48|       |
   49|       |extension UIView {
   50|       |    var top: CGFloat {
   51|      0|        get {
   52|      0|            return frame.origin.y
   53|      0|        }
   54|      0|        set {
   55|      0|            var frame = self.frame
   56|      0|            frame.origin.y = newValue
   57|      0|            self.frame = frame
   58|      0|        }
   59|       |    }
   60|       |
   61|       |    var bottom: CGFloat {
   62|      0|        get {
   63|      0|            return frame.origin.y + frame.size.height
   64|      0|        }
   65|      0|        set {
   66|      0|            var frame = self.frame
   67|      0|            frame.origin.y = newValue - self.frame.size.height
   68|      0|            self.frame = frame
   69|      0|        }
   70|       |    }
   71|       |
   72|       |    var right: CGFloat {
   73|      0|        get {
   74|      0|            return frame.origin.x + frame.size.width
   75|      0|        }
   76|      0|        set {
   77|      0|            var frame = self.frame
   78|      0|            frame.origin.x = newValue - self.frame.size.width
   79|      0|            self.frame = frame
   80|      0|        }
   81|       |    }
   82|       |
   83|       |    var left: CGFloat {
   84|      0|        get {
   85|      0|            return frame.origin.x
   86|      0|        }
   87|      0|        set {
   88|      0|            var frame = self.frame
   89|      0|            frame.origin.x = newValue
   90|      0|            self.frame = frame
   91|      0|        }
   92|       |    }
   93|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/CustomView/CustomArduinoBoard/CustomArduinoUno.swift:
    1|       |//
    2|       |//  ArduinoUnoADVIS.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/08/17.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |class CustomArduinoUno: UIView {
   12|       |    var tapLocation: CGPoint = CGPoint()
   13|       |    var cgRect: CGRect = CGRect()
   14|       |    var uiView = UIView()
   15|       |
   16|       |    /*
   17|       |     // Only override draw() if you perform custom drawing.
   18|       |     // An empty implementation adversely affects performance during animation.
   19|       |     override func draw(_ rect: CGRect) {
   20|       |     // Drawing code
   21|       |     }
   22|       |     */
   23|       |
   24|       |    // コードから生成された場合
   25|      0|    override init(frame: CGRect) {
   26|      0|        super.init(frame: frame)
   27|      0|        loadNib()
   28|      0|    }
   29|       |
   30|       |    // ストーリーボードから生成された場合
   31|      0|    required init(coder aDecoder: NSCoder) {
   32|      0|        super.init(coder: aDecoder)!
   33|      0|        loadNib()
   34|      0|    }
   35|       |
   36|      0|    func loadNib() {
   37|      0|        let view = Bundle.main.loadNibNamed("CustomArduinoUno", owner: self, options: nil)?.first as! UIView
   38|      0|        view.frame = bounds
   39|      0|        addSubview(view)
   40|      0|    }
   41|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/CustomView/CustomMenuButton.swift:
    1|       |//
    2|       |//  CustomMenuButton.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/08/17.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |class CustomMenuButton: UIButton {
   13|      0|    override func awakeFromNib() {
   14|      0|        super.awakeFromNib()
   15|      0|
   16|      0|        setTitleColor(.white, for: .normal)
   17|      0|        setTitleColor(.darkGray, for: [.selected, .highlighted])
   18|      0|        setTitleColor(.black, for: .selected)
   19|      0|        titleLabel?.font = UIFont.boldSystemFont(ofSize: 16)
   20|      0|        tintColor = .clear
   21|      0|        layer.cornerRadius = frame.height / 2
   22|      0|        layer.borderColor = UIColor.white.cgColor
   23|      0|        layer.borderWidth = 2
   24|      0|    }
   25|       |
   26|       |    override var isSelected: Bool {
   27|      0|        didSet {
   28|      0|            updateBackgroundColor()
   29|      0|        }
   30|       |    }
   31|       |
   32|       |    override var isHighlighted: Bool {
   33|      0|        didSet {
   34|      0|            updateBackgroundColor()
   35|      0|        }
   36|       |    }
   37|       |
   38|      0|    fileprivate func updateBackgroundColor() {
   39|      0|        if !isSelected && !isHighlighted {
   40|      0|            backgroundColor = .clear
   41|      0|        } else if !isSelected && isHighlighted {
   42|      0|            backgroundColor = .lightGray
   43|      0|        } else {
   44|      0|            backgroundColor = .white
   45|      0|        }
   46|      0|    }
   47|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/CustomView/MaterialButton.swift:
    1|       |//
    2|       |//  MaterialButton.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/08/21.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |class MaterialButton: UIButton {
   13|       |    private let tapEffectView = UIView(frame: CGRect(x: 0, y: 0, width: 1, height: 1))
   14|       |
   15|      6|    override func awakeFromNib() {
   16|      6|        super.awakeFromNib()
   17|      6|        setup()
   18|      6|    }
   19|       |
   20|      0|    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
   21|      0|        super.touchesBegan(touches, with: event)
   22|      0|        if let point = touches.first?.location(in: self) {
   23|      0|            tapEffectView.frame.origin = point
   24|      0|
   25|      0|            tapEffectView.alpha = 0.3
   26|      0|            tapEffectView.isHidden = false
   27|      0|            tapEffectView.transform = CGAffineTransform(scaleX: 1.0, y: 1.0)
   28|      0|
   29|      0|            UIView.animate(withDuration: 0.5,
   30|      0|                           animations: {
   31|      0|                               self.tapEffectView.alpha = 0
   32|      0|                               self.tapEffectView.transform = CGAffineTransform(scaleX: 200.0, y: 200.0)
   33|      0|            }) { _ in
   34|      0|                self.tapEffectView.isHidden = true
   35|      0|                self.tapEffectView.transform = CGAffineTransform(scaleX: 1.0, y: 1.0)
   36|      0|            }
   37|      0|        }
   38|      0|    }
   39|       |
   40|      6|    private func setup() {
   41|      6|        // corner raidus
   42|      6|        layer.cornerRadius = 4.0
   43|      6|        layer.masksToBounds = true
   44|      6|        // 円を描画
   45|      6|        let shapeLayer = CAShapeLayer()
   46|      6|        shapeLayer.fillColor = UIColor.red.cgColor
   47|      6|        shapeLayer.path = UIBezierPath(ovalIn: tapEffectView.bounds).cgPath
   48|      6|        tapEffectView.layer.addSublayer(shapeLayer)
   49|      6|        tapEffectView.isHidden = true
   50|      6|
   51|      6|        addSubview(tapEffectView)
   52|      6|    }
   53|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/CustomView/MyTableViewCell/MyTableViewCell.swift:
    1|       |//
    2|       |//  MyTableViewCell.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/08/16.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |final class MyTableViewCell: UITableViewCell {
   12|       |    let label = UILabel()
   13|       |    // @IBOutlet weak var label: UILabel!
   14|       |
   15|      0|    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
   16|      0|        super.init(style: style, reuseIdentifier: reuseIdentifier)
   17|      0|
   18|      0|        contentView.addSubview(label)
   19|      0|        label.textColor = UIColor.red
   20|      0|    }
   21|       |
   22|      0|    required init?(coder _: NSCoder) {
   23|      0|        fatalError("init(coder:) has not been implemented")
   24|      0|    }
   25|       |
   26|      0|    override func setSelected(_ selected: Bool, animated: Bool) {
   27|      0|        super.setSelected(selected, animated: animated)
   28|      0|    }
   29|       |
   30|      0|    override func layoutSubviews() {
   31|      0|        super.layoutSubviews()
   32|      0|
   33|      0|        label.frame = contentView.bounds
   34|      0|        label.frame.origin.x += 12
   35|      0|    }
   36|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/CustomView/MyTableViewSectionHeader/MyTableViewSectionHeader.swift:
    1|       |//
    2|       |//  MyTableViewSectionHeader.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/08/16.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import LUExpandableTableView
   10|       |// import LUExpandableTableView
   11|       |import UIKit
   12|       |
   13|       |class MyTableViewSectionHeader: LUExpandableTableViewSectionHeader {
   14|       |    @IBOutlet var tableViewButton: UIButton!
   15|       |//    @IBOutlet weak var label: UILabel!
   16|       |
   17|       |    override var isExpanded: Bool {
   18|      0|        didSet {
   19|      0|            // Change the title of the button when section header expand/collapse
   20|      0|            // If you want to change when tpped button ↓
   21|      0|            //tableViewButton?.setTitle(isExpanded ? "Collapse" : "Expand", for: .normal)
   22|      0|        }
   23|       |    }
   24|       |
   25|      0|    @IBAction func expandCollapse(_: UIButton) {
   26|      0|        delegate?.expandableSectionHeader(self, shouldExpandOrCollapseAtSection: section)
   27|      0|    }
   28|       |
   29|      0|    override func awakeFromNib() {
   30|      0|        super.awakeFromNib()
   31|      0|//        label?.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(didTapOnLabel)))
   32|      0|//        label?.isUserInteractionEnabled = true
   33|      0|    }
   34|       |
   35|      0|    @objc private func didTapOnLabel(_: UIGestureRecognizer) {
   36|      0|        // Send the message to his delegate that was selected
   37|      0|        delegate?.expandableSectionHeader(self, wasSelectedAtSection: section)
   38|      0|    }
   39|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/AmpereRetention.swift:
    1|       |//
    2|       |//  AmpereRetention.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 3/10/19.
    6|       |//  Copyright © 2019 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |/// 電流値をいい感じにするクラス
   12|       |class AmpereRetention {
   13|       |    var partsDraw = PartsDraw()
   14|       |    var arduinoUnoPointControl12_9 = ArduinoUnoPointControl12_9()
   15|       |
   16|       |    var i: [Int] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] // 電流の配列に値を入れる際に何番目に入れるかを管理
   17|       |    var ampereGetPointXArray: [[Double]] = [[], [], [], [], [], [], [], [], [], [], [], []] // 電流を描画する点のx座標用配列
   18|       |    var ampereGetPointYArray: [[Double]] = [[], [], [], [], [], [], [], [], [], [], [], []] // 電流を描画する点のy座標用配列
   19|       |    var ampereTranslatePointArray: [[Double]] = [[], [], [], [], [], [], [], [], [], [], [], []] // 電流を描画する点を保持する配列
   20|       |    var ampereVoltValue: [[Int]] = [[], [], [], [], [], [], [], [], [], [], [], []] // 電流を求めるための電圧値を保持する配列
   21|       |    var ampereResistorValue: [[Int]] = [[], [], [], [], [], [], [], [], [], [], [], []] // 電流を求めるための抵抗を保持する配列
   22|       |    var ampereValue: [[Double]] = [[], [], [], [], [], [], [], [], [], [], [], []] // 電流値を保持する配列
   23|       |    var ampereUnit: [[String]] = [[], [], [], [], [], [], [], [], [], [], [], []] // 電流の単位を保持する配列
   24|       |    var ampereTotalVoltArray: [Int] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] // 電流計算用の電圧値
   25|       |    var ampereTotalResistorArray: [Double] = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] // 電流計算用の抵抗値
   26|       |    var ampere_total_value: Double = 0.0
   27|       |    var ampere_total_unit = ""
   28|       |
   29|       |    /// 電流描画用の配列に値を入れる
   30|       |    /// - parameter j: 1つ目の引数。
   31|       |    /// - parameter index: 2つ目の引数。
   32|       |    /// - returns: なし
   33|      0|    func ampereInsertResistor(j: Int, index _: Int) {
   34|      0|        let resistorResult = ampereResistorValue[j][i[j] + 1]
   35|      0|        // 電流値を計算して配列に入れる
   36|      0|        if ampereVoltValue[j][i[j] / 2] > 0 {
   37|      0|            ampereTotalVoltArray[j] = ampereTotalVoltArray[j] + ampereVoltValue[j][i[j] / 2]
   38|      0|            ampereTotalResistorArray[j] = ampereTotalResistorArray[j] + Double(ampereResistorValue[j][i[j]]) * pow(10.0, Double(resistorResult))
   39|      0|        }
   40|      0|    }
   41|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/DangerDraw.swift:
    1|       |//
    2|       |//  DangerDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/26/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |class DangerDraw: UIView {
   13|       |    var startX: Double = 0
   14|       |    var startY: Double = 0
   15|       |
   16|       |    /// 線を描画するための座標を設定
   17|       |    ///
   18|       |    /// - Parameters:
   19|       |    ///   - startX: X座標
   20|       |    ///   - startY: Y座標
   21|       |    /// メンバ変数にそれぞれ代入
   22|      0|    func intoBoardPoint(startX: Double, startY: Double) {
   23|      0|        self.startX = startX
   24|      0|        self.startY = startY
   25|      0|    }
   26|       |
   27|      0|    override func draw(_: CGRect) {
   28|      0|        let ledCircle = UIBezierPath(ovalIn: CGRect(x: startX, y: startY, width: 20, height: 20))
   29|      0|        ledCircle.lineWidth = 4
   30|      0|        UIColor.red.setStroke()
   31|      0|        ledCircle.stroke()
   32|      0|
   33|      0|//        let starLayer = CAShapeLayer.init()
   34|      0|//        let starFrame = CGRect.init(x: startX, y: startY, width: 20, height: 20)
   35|      0|//        starLayer.frame = starFrame
   36|      0|//
   37|      0|//        starLayer.strokeColor = UIColor.yellow.cgColor
   38|      0|//        starLayer.fillColor = UIColor.yellow.cgColor
   39|      0|//
   40|      0|//        let starLine = UIBezierPath()
   41|      0|//        starLine.move(to: CGPoint.init(x: 0, y: starFrame.size.height / 3))
   42|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width / 3, y: starFrame.size.height / 3))
   43|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width / 2, y: 0))
   44|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width * 2 / 3, y: starFrame.size.height / 3))
   45|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width, y: starFrame.size.height / 3))
   46|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width * 3 / 4, y: starFrame.size.height * 3 / 5))
   47|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width * 9 / 10 , y: starFrame.size.height * 9 / 10))
   48|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width / 2, y: starFrame.size.height * 3 / 4))
   49|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width / 10 , y: starFrame.size.height * 9 / 10))
   50|      0|//        starLine.addLine(to: CGPoint.init(x: starFrame.size.width / 4, y: starFrame.size.height * 3 / 5))
   51|      0|//        starLine.close()
   52|      0|//
   53|      0|//        // 星を描画
   54|      0|//        starLayer.path = starLine.cgPath
   55|      0|    }
   56|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/GyroDraw.swift:
    1|       |//
    2|       |//  jyroDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/26/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |class GyroDraw: UIView {
   13|       |    /* 描画用の座標保持変数 */
   14|       |    var x1: Double = 0
   15|       |    var y1: Double = 0
   16|       |    var x2: Double = 0
   17|       |    var y2: Double = 0
   18|       |    var x3: Double = 0
   19|       |    var y3: Double = 0
   20|       |    var x4: Double = 0
   21|       |    var y4: Double = 0
   22|       |    var x5: Double = 0
   23|       |    var y5: Double = 0
   24|       |    var x6: Double = 0
   25|       |    var y6: Double = 0
   26|       |    var x7: Double = 0
   27|       |    var y7: Double = 0
   28|       |    var x8: Double = 0
   29|       |    var y8: Double = 0
   30|       |    /* 中間管理職変数 */
   31|       |    var gyroCenterX: Double = 0
   32|       |    var gyroCenterY: Double = 0
   33|       |
   34|      0|    func intoBoardPoint(x1: Double, y1: Double, x2: Double, y2: Double, x3: Double, y3: Double, x4: Double, y4: Double) {
   35|      0|        self.x1 = x1
   36|      0|        self.y1 = y1
   37|      0|        self.x2 = x2
   38|      0|        self.y2 = y2
   39|      0|        self.x3 = x3
   40|      0|        self.y3 = y3
   41|      0|        self.x4 = x4
   42|      0|        self.y4 = y4
   43|      0|        x5 = x1
   44|      0|        y5 = y1 + 76
   45|      0|        x6 = x2
   46|      0|        y6 = y2 + 76
   47|      0|        x7 = x3
   48|      0|        y7 = y3 + 76
   49|      0|        x8 = x4
   50|      0|        y8 = y4 + 76
   51|      0|
   52|      0|        gyroCenterX = abs(x3 - x2) / 2 + x2
   53|      0|        gyroCenterY = abs(y6 - y3) / 2 + y3
   54|      0|    }
   55|       |
   56|      0|    override func draw(_: CGRect) {
   57|      0|        let foundation = UIBezierPath(rect: CGRect(x: x1 - 19, y: y1 - 17, width: 125, height: 100))
   58|      0|        UIColor.green.setFill()
   59|      0|        foundation.fill()
   60|      0|        UIColor.green.setStroke()
   61|      0|        foundation.stroke()
   62|      0|
   63|      0|        let circle1 = UIBezierPath(ovalIn: CGRect(x: x1 - 13, y: y1 - 8, width: 15, height: 15))
   64|      0|        circle1.lineWidth = 3
   65|      0|        UIColor.gray.setFill()
   66|      0|        circle1.fill()
   67|      0|        UIColor.white.setStroke()
   68|      0|        circle1.stroke()
   69|      0|        let circle2 = UIBezierPath(ovalIn: CGRect(x: x2 - 12, y: y2 - 8, width: 15, height: 15))
   70|      0|        circle2.lineWidth = 3
   71|      0|        UIColor.gray.setFill()
   72|      0|        circle2.fill()
   73|      0|        UIColor.white.setStroke()
   74|      0|        circle2.stroke()
   75|      0|        let circle3 = UIBezierPath(ovalIn: CGRect(x: x3 - 12, y: y3 - 8, width: 15, height: 15))
   76|      0|        circle3.lineWidth = 3
   77|      0|        UIColor.gray.setFill()
   78|      0|        circle3.fill()
   79|      0|        UIColor.white.setStroke()
   80|      0|        circle3.stroke()
   81|      0|        let circle4 = UIBezierPath(ovalIn: CGRect(x: x4 - 12, y: y4 - 8, width: 15, height: 15))
   82|      0|        circle4.lineWidth = 3
   83|      0|        UIColor.gray.setFill()
   84|      0|        circle4.fill()
   85|      0|        UIColor.white.setStroke()
   86|      0|        circle4.stroke()
   87|      0|        let circle5 = UIBezierPath(ovalIn: CGRect(x: x5 - 12, y: y5 - 8, width: 15, height: 15))
   88|      0|        circle5.lineWidth = 3
   89|      0|        UIColor.gray.setFill()
   90|      0|        circle5.fill()
   91|      0|        UIColor.white.setStroke()
   92|      0|        circle5.stroke()
   93|      0|        let circle6 = UIBezierPath(ovalIn: CGRect(x: x6 - 12, y: y6 - 8, width: 15, height: 15))
   94|      0|        circle6.lineWidth = 3
   95|      0|        UIColor.gray.setFill()
   96|      0|        circle6.fill()
   97|      0|        UIColor.white.setStroke()
   98|      0|        circle6.stroke()
   99|      0|        let circle7 = UIBezierPath(ovalIn: CGRect(x: x7 - 12, y: y7 - 8, width: 15, height: 15))
  100|      0|        circle7.lineWidth = 3
  101|      0|        UIColor.gray.setFill()
  102|      0|        circle7.fill()
  103|      0|        UIColor.white.setStroke()
  104|      0|        circle7.stroke()
  105|      0|        let circle8 = UIBezierPath(ovalIn: CGRect(x: x8 - 12, y: y8 - 8, width: 15, height: 15))
  106|      0|        circle8.lineWidth = 3
  107|      0|        UIColor.gray.setFill()
  108|      0|        circle8.fill()
  109|      0|        UIColor.white.setStroke()
  110|      0|        circle8.stroke()
  111|      0|
  112|      0|        let centerCore = UIBezierPath(rect: CGRect(x: x2 - 8, y: y2 + 20, width: x3 - x2 + 11, height: gyroCenterY - y2))
  113|      0|        UIColor.black.setFill()
  114|      0|        centerCore.fill()
  115|      0|        centerCore.stroke()
  116|      0|    }
  117|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/LedDraw.swift:
    1|       |//
    2|       |//  LedLineDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/24/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |class LedDraw: UIView {
   13|       |    var startX: Double = 0
   14|       |    var startY: Double = 0
   15|       |    var endX: Double = 0
   16|       |    var endY: Double = 0
   17|       |
   18|       |    /// 線を描画するための座標を設定
   19|       |    ///
   20|       |    /// - Parameters:
   21|       |    ///   - startX: 起点のX座標
   22|       |    ///   - startY: 起点のY座標
   23|       |    ///   - endX: 終点のX座標
   24|       |    ///   - endY: 週手のY座標
   25|       |    /// メンバ変数にそれぞれ代入
   26|      0|    func intoBoardPoint(startX: Double, startY: Double, endX: Double, endY: Double) {
   27|      0|        self.startX = startX
   28|      0|        self.startY = startY
   29|      0|        self.endX = endX
   30|      0|        self.endY = endY
   31|      0|    }
   32|       |
   33|      0|    override func draw(_: CGRect) {
   34|      0|        let line = UIBezierPath()
   35|      0|        // 起点
   36|      0|        line.move(to: CGPoint(x: startX, y: startY))
   37|      0|        // 終点
   38|      0|        line.addLine(to: CGPoint(x: endX, y: endY))
   39|      0|        // ラインを結ぶ
   40|      0|        line.close()
   41|      0|        // 色の設定
   42|      0|        UIColor.gray.setStroke()
   43|      0|        // ライン幅
   44|      0|        line.lineWidth = 3
   45|      0|        // 描画
   46|      0|        line.stroke()
   47|      0|        // 電球の描画
   48|      0|        let ledCircle = UIBezierPath(ovalIn: CGRect(x: (startX + endX) / 2 - 6,
   49|      0|                                                    y: (startY + endY) / 2 - 6,
   50|      0|                                                    width: 15, height: 15))
   51|      0|        ledCircle.lineWidth = 3
   52|      0|        UIColor.gray.setFill()
   53|      0|        ledCircle.fill()
   54|      0|        UIColor.green.setStroke()
   55|      0|        ledCircle.stroke()
   56|      0|    }
   57|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/LedLightupDraw.swift:
    1|       |//
    2|       |//  LedLightupDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/26/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |class LedLightupDraw: UIView {
   13|       |    var startX: Double = 0
   14|       |    var startY: Double = 0
   15|       |    var endX: Double = 0
   16|       |    var endY: Double = 0
   17|       |
   18|       |    /// 線を描画するための座標を設定
   19|       |    ///
   20|       |    /// - Parameters:
   21|       |    ///   - startX: 起点のX座標
   22|       |    ///   - startY: 起点のY座標
   23|       |    ///   - endX: 終点のX座標
   24|       |    ///   - endY: 週手のY座標
   25|       |    /// メンバ変数にそれぞれ代入
   26|      0|    func intoBoardPoint(startX: Double, startY: Double, endX: Double, endY: Double) {
   27|      0|        self.startX = startX
   28|      0|        self.startY = startY
   29|      0|        self.endX = endX
   30|      0|        self.endY = endY
   31|      0|    }
   32|       |
   33|      0|    override func draw(_: CGRect) {
   34|      0|        // UIBezierPath のインスタンス生成
   35|      0|        let line = UIBezierPath()
   36|      0|        // 起点
   37|      0|        line.move(to: CGPoint(x: startX, y: startY))
   38|      0|        // 帰着点
   39|      0|        line.addLine(to: CGPoint(x: endX, y: endY))
   40|      0|
   41|      0|        // ラインを結ぶ
   42|      0|        line.close()
   43|      0|        // 色の設定
   44|      0|        UIColor.gray.setStroke()
   45|      0|        // ライン幅
   46|      0|        line.lineWidth = 3
   47|      0|        // 描画
   48|      0|        line.stroke()
   49|      0|        let ledCircle = UIBezierPath(ovalIn: CGRect(x: (startX + endX) / 2 - 6,
   50|      0|                                                    y: (startY + endY) / 2 - 6,
   51|      0|                                                    width: 15, height: 15))
   52|      0|        ledCircle.lineWidth = 3
   53|      0|        UIColor.green.setFill()
   54|      0|        ledCircle.fill()
   55|      0|        UIColor.green.setStroke()
   56|      0|        ledCircle.stroke()
   57|      0|    }
   58|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/LineDraw.swift:
    1|       |//
    2|       |//  LineDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/23/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |/// 線を描画するクラス
   13|       |class LineDraw: UIView {
   14|       |    var startX: Double = 0
   15|       |    var startY: Double = 0
   16|       |    var endX: Double = 0
   17|       |    var endY: Double = 0
   18|       |
   19|       |    /// 線を描画するための座標を設定
   20|       |    ///
   21|       |    /// - Parameters:
   22|       |    ///   - startX: 起点のX座標
   23|       |    ///   - startY: 起点のY座標
   24|       |    ///   - endX: 終点のX座標
   25|       |    ///   - endY: 週手のY座標
   26|       |    /// メンバ変数にそれぞれ代入
   27|      0|    func intoBoardPoint(startX: Double, startY: Double, endX: Double, endY: Double) {
   28|      0|        self.startX = startX
   29|      0|        self.startY = startY
   30|      0|        self.endX = endX
   31|      0|        self.endY = endY
   32|      0|    }
   33|       |
   34|       |    /// 線を描画するメソッド
   35|       |    ///
   36|       |    /// - Parameter _: なし
   37|       |    /// 1. UIBezierPathインスタンス生成（UIBezierPathについては，[こちら](https://dev.classmethod.jp/smartphone/iphone/play-uibezierpath-1/)）
   38|       |    /// 2. 起点の座標設定
   39|       |    /// 3. 終点の座標設定
   40|       |    /// 4. closeで線を結ぶ
   41|       |    /// 5. 線の幅を設定（ここでは，5）
   42|       |    /// 6. 描画
   43|      0|    override func draw(_: CGRect) {
   44|      0|        // make instance
   45|      0|        let line = UIBezierPath()
   46|      0|        // starting point
   47|      0|        line.move(to: CGPoint(x: startX, y: startY))
   48|      0|        // end point
   49|      0|        line.addLine(to: CGPoint(x: endX, y: endY))
   50|      0|        line.close()
   51|      0|        // line color
   52|      0|        UIColor.blue.setStroke()
   53|      0|        // line width
   54|      0|        line.lineWidth = 5
   55|      0|        // draw
   56|      0|        line.stroke()
   57|      0|    }
   58|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/PartsDraw.swift:
    1|       |//
    2|       |//  PartsDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/23/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |/// モジュール描画Class
   12|       |class PartsDraw {
   13|       |//    class var partsDrawInstance : PartsDraw {
   14|       |//        struct Static {
   15|       |//            static let instance : PartsDraw = PartsDraw()
   16|       |//        }
   17|       |//        return Static.instance
   18|       |//    }
   19|       |
   20|       |    var jumperNumber = 0
   21|       |    var ledNumber = 0
   22|       |    var resistorNumber = 0
   23|       |    var gyroNumber = 0
   24|       |
   25|       |    var wireGetPointXArray: Array<Double> = [] // ジャンパワイヤを描画する点のx座標用配列
   26|       |    var wireGetPointYArray: Array<Double> = [] // ジャンパワイヤを描画する点のy座標用配列
   27|       |    var wireTranslatePointArray: Array<Int> = [] // ジャンパワイヤを描画する点を保持する配列
   28|       |
   29|       |    var ledGetPointXArray: [Double] = [] // LEDを描画する点のx座標用配列
   30|       |    var ledGetPointYArray: [Double] = [] // LEDを描画する点のy座標用配列
   31|       |    var ledTranslatePointArray: [Int] = [] // LEDを描画する点を保持する配列
   32|       |
   33|       |    var resistorGetPointXArray: [Double] = [] // 抵抗器を描画する点のx座標用配列
   34|       |    var resistorGetPointYArray: [Double] = [] // 抵抗器を描画する点のy座標用配列
   35|       |    var resistorTranslatePointArray: [Int] = [] // 抵抗器を描画する点を保持する配列
   36|       |
   37|       |    var gyroGetPointXArray: [Double] = [] // ジャイロセンサを描画する点のx座標用配列
   38|       |    var gyroGetPointYArray: [Double] = [] // ジャイロセンサを描画する点のy座標用配列
   39|       |    var gyroTranslatePointArray: [Int] = [] // ジャイロセンサを描画する点を保持する配列
   40|       |
   41|       |    var pointControl = ArduinoUnoPointControl12_9() // インスタンス生成
   42|       |
   43|       |    /// ジャンパワイヤ描画用の配列に値を入れる
   44|       |    ///
   45|       |    /// - Parameter translatePoint: ブレッドボードの番号
   46|       |    /// 1. ブレッドボード上の値を座標に変換
   47|       |    /// 2. タップされたX座標をinsert
   48|       |    /// 3. タップされたY座標をinsert
   49|       |    /// 4. 使用したtranslatepointを保持
   50|      0|    func wireDraw(translatePoint: Int) {
   51|      0|        /* ブレッドボード上の値を座標に変換 */
   52|      0|        // pointControl.
   53|      0|        pointControl.coordinateTranslate(translatePoint: translatePoint)
   54|      0|        /* タッチされた座標を配列に入れる(x) */
   55|      0|        wireGetPointXArray.insert(pointControl.coordinateNumberX, at: jumperNumber)
   56|      0|        /* タッチされた座標を配列に入れる(y) */
   57|      0|        wireGetPointYArray.insert(pointControl.coordinateNumberY, at: jumperNumber)
   58|      0|        /* 使用したtranslatepointを保持 */
   59|      0|        wireTranslatePointArray.insert(translatePoint, at: jumperNumber)
   60|      0|        jumperNumber += 1
   61|      0|    }
   62|       |
   63|       |    /// LED描画用の配列に値を入れる
   64|       |    ///
   65|       |    /// - Parameter translatePoint: ブレッドボードの番号
   66|       |    /// 1. ブレッドボード上の値を座標に変換
   67|       |    /// 2. タップされたX座標をinsert
   68|       |    /// 3. タップされたY座標をinsert
   69|       |    /// 4. 使用したtranslatepointを保持
   70|      0|    func ledDraw(translatePoint: Int) {
   71|      0|        pointControl.coordinateTranslate(translatePoint: translatePoint)
   72|      0|        ledGetPointXArray.insert(pointControl.coordinateNumberX, at: ledNumber)
   73|      0|        ledGetPointYArray.insert(pointControl.coordinateNumberY, at: ledNumber)
   74|      0|        ledTranslatePointArray.insert(translatePoint, at: ledNumber)
   75|      0|        ledNumber += 1
   76|      0|    }
   77|       |
   78|       |    /// 抵抗器描画用の配列に値を入れる
   79|       |    ///
   80|       |    /// - Parameter translatePoint: ブレッドボードの番号
   81|       |    /// 1. ブレッドボード上の値を座標に変換
   82|       |    /// 2. タップされたX座標をinsert
   83|       |    /// 3. タップされたY座標をinsert
   84|       |    /// 4. 使用したtranslatepointを保持
   85|      0|    func resistorDraw(translatePoint: Int) {
   86|      0|        pointControl.coordinateTranslate(translatePoint: translatePoint)
   87|      0|        resistorGetPointXArray.insert(pointControl.coordinateNumberX, at: resistorNumber)
   88|      0|        resistorGetPointYArray.insert(pointControl.coordinateNumberY, at: resistorNumber)
   89|      0|        resistorTranslatePointArray.insert(translatePoint, at: resistorNumber)
   90|      0|        resistorNumber += 1
   91|      0|    }
   92|       |
   93|       |    /// ジャイロセンサ描画用の配列に値を入れる
   94|       |    ///
   95|       |    /// - Parameter translatePoint: ブレッドボードの番号
   96|       |    /// 1. ブレッドボード上の値を座標に変換
   97|       |    /// 2. タップされたX座標をinsert
   98|       |    /// 3. タップされたY座標をinsert
   99|       |    /// 4. 使用したtranslatepointを保持
  100|      0|    func gyroDraw(translatePoint: Int) {
  101|      0|        pointControl.coordinateTranslate(translatePoint: translatePoint)
  102|      0|        gyroGetPointXArray.insert(pointControl.coordinateNumberX, at: gyroNumber)
  103|      0|        gyroGetPointYArray.insert(pointControl.coordinateNumberY, at: gyroNumber)
  104|      0|        gyroTranslatePointArray.insert(translatePoint, at: gyroNumber)
  105|      0|        gyroNumber += 1
  106|      0|    }
  107|       |
  108|       |    /* */
  109|       |
  110|       |    /// 配列の中身が2の倍数の時に描画を開始するためのメソッド
  111|       |    ///
  112|       |    /// - Parameter flagNumber: 配列の中身の個数
  113|       |    /// - Returns: 0もしくは，1を返す
  114|      0|    func flagDraw(flagNumber: Int) -> Int {
  115|      0|        if flagNumber == 0 {
  116|      0|            if jumperNumber > 0 && jumperNumber % 2 == 0 {
  117|      0|                return 1
  118|      0|            } else {
  119|      0|                return 0
  120|      0|            }
  121|      0|
  122|      0|        } else if flagNumber == 1 {
  123|      0|            if ledNumber > 0 && ledNumber % 2 == 0 {
  124|      0|                return 1
  125|      0|            } else {
  126|      0|                return 0
  127|      0|            }
  128|      0|
  129|      0|        } else if flagNumber == 2 {
  130|      0|            if resistorNumber > 0 && resistorNumber % 2 == 0 {
  131|      0|                return 1
  132|      0|            } else {
  133|      0|                return 0
  134|      0|            }
  135|      0|
  136|      0|        } else if flagNumber == 3 {
  137|      0|            if gyroNumber > 0 && gyroNumber % 4 == 0 {
  138|      0|                return 1
  139|      0|            } else {
  140|      0|                return 0
  141|      0|            }
  142|      0|        } else {
  143|      0|            return 0
  144|      0|        }
  145|      0|    }
  146|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/ResitorDraw.swift:
    1|       |//
    2|       |//  ResitorDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/25/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |class ResitorDraw: UIView {
   13|       |    var startX: Double = 0
   14|       |    var startY: Double = 0
   15|       |    var endX: Double = 0
   16|       |    var endY: Double = 0
   17|       |    var resistorLongX: Double = 0
   18|       |    var resistorLongY: Double = 0
   19|       |    var resistorFirstX: Double = 0
   20|       |    var resistorFirstY: Double = 0
   21|       |    var resistorLengthX: Double = 0
   22|       |    var resistorLengthY: Double = 0
   23|       |
   24|      0|    func intoBoardPoint(startX: Double, startY: Double, endX: Double, endY: Double) {
   25|      0|        self.startX = startX
   26|      0|        self.startY = startY
   27|      0|        self.endX = endX
   28|      0|        self.endY = endY
   29|      0|    }
   30|       |
   31|      0|    override func draw(_: CGRect) {
   32|      0|        // 平方根
   33|      0|        resistorLengthX = abs(startX - endX)
   34|      0|        resistorLengthY = abs(startY - endY)
   35|      0|
   36|      0|        if resistorLengthX == 0 {
   37|      0|            resistorFirstY = 20
   38|      0|        } else if resistorLengthY == 0 {
   39|      0|            resistorFirstX = 20
   40|      0|        } else if resistorLengthX == resistorLengthY {
   41|      0|            resistorFirstX = 5
   42|      0|            resistorFirstY = 5
   43|      0|        } else {
   44|      0|            resistorFirstX = abs(startX - endX) / 8
   45|      0|            resistorFirstY = abs(startY - endY) / 8
   46|      0|        }
   47|      0|
   48|      0|        let line = UIBezierPath()
   49|      0|        // 起点
   50|      0|        line.move(to: CGPoint(x: startX, y: startY))
   51|      0|        // 終点
   52|      0|        line.addLine(to: CGPoint(x: endX, y: endY))
   53|      0|        line.close()
   54|      0|        // 色の設定
   55|      0|        UIColor.lightGray.setFill()
   56|      0|        UIColor.black.setStroke()
   57|      0|        // ライン幅
   58|      0|        line.lineWidth = 3
   59|      0|        // 描画
   60|      0|        line.stroke()
   61|      0|        // 抵抗部分の描画
   62|      0|        if startX > endX {
   63|      0|            resistorLongX = abs(startX - endX) / 2 + endX
   64|      0|        } else if startX < endX {
   65|      0|            resistorLongX = abs(startX - endX) / 2 + startX
   66|      0|        } else if startX == endX {
   67|      0|            resistorLongX = startX
   68|      0|        }
   69|      0|        if startY > endY {
   70|      0|            resistorLongY = abs(startY - endY) / 2 + endY
   71|      0|        } else if startY < endY {
   72|      0|            resistorLongY = abs(startY - endY) / 2 + startY
   73|      0|        } else if startY == endY {
   74|      0|            resistorLongY = startY
   75|      0|        }
   76|      0|        let resistorLine = UIBezierPath()
   77|      0|
   78|      0|        if startX < endX && startY > endY || startX > endX && startY < endY {
   79|      0|            resistorLine.move(to: CGPoint(x: resistorLongX + resistorFirstX, y: resistorLongY - resistorFirstY))
   80|      0|            resistorLine.addLine(to: CGPoint(x: resistorLongX - resistorFirstX, y: resistorLongY + resistorFirstY))
   81|      0|        } else {
   82|      0|            resistorLine.move(to: CGPoint(x: resistorLongX - resistorFirstX, y: resistorLongY - resistorFirstY))
   83|      0|            resistorLine.addLine(to: CGPoint(x: resistorLongX + resistorFirstX, y: resistorLongY + resistorFirstY))
   84|      0|        }
   85|      0|        resistorLine.close()
   86|      0|        UIColor.brown.setStroke()
   87|      0|        resistorLine.lineWidth = 9
   88|      0|        resistorLine.stroke()
   89|      0|    }
   90|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/SelectedCircle.swift:
    1|       |//
    2|       |//  SelectedCircle.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 4/2/19.
    6|       |//  Copyright © 2019 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |/// 選択中の箇所を示すクラス
   13|       |class SelectedCircle: UIView {
   14|       |    var startX: Double = 0
   15|       |    var startY: Double = 0
   16|       |    var endX: Double = 0
   17|       |    var endY: Double = 0
   18|       |
   19|       |    /// 線を描画するための座標を設定
   20|       |    ///
   21|       |    /// - Parameters:
   22|       |    ///   - startX: X座標
   23|       |    ///   - startY: Y座標
   24|       |    /// メンバ変数にそれぞれ代入
   25|      0|    func intoBoardPoint(startX: Double, startY: Double) {
   26|      0|        self.startX = startX
   27|      0|        self.startY = startY
   28|      0|    }
   29|       |
   30|      0|    override func draw(_: CGRect) {
   31|      0|        // 選択されているところ
   32|      0|        let selectedCircle = UIBezierPath(arcCenter: CGPoint(x: startX, y: startY), radius: 10, startAngle: 0, endAngle: CGFloat(Double.pi) * 2, clockwise: true)
   33|      0|        selectedCircle.lineWidth = 3
   34|      0|        UIColor.purple.setFill()
   35|      0|        selectedCircle.fill()
   36|      0|        UIColor.purple.setStroke()
   37|      0|        selectedCircle.stroke()
   38|      0|    }
   39|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/VoltCircleDraw.swift:
    1|       |//
    2|       |//  VoltCircleDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/26/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |// 電圧値を表示する丸のを出すクラス
   13|       |class VoltCircleDraw: UIView {
   14|       |    var startX: Double = 0
   15|       |    var startY: Double = 0
   16|       |
   17|       |    /// 線を描画するための座標を設定
   18|       |    ///
   19|       |    /// - Parameters:
   20|       |    ///   - startX: X座標
   21|       |    ///   - startY: Y座標
   22|       |    /// メンバ変数にそれぞれ代入
   23|      0|    func intoBoardPoint(startX: Double, startY: Double) {
   24|      0|        self.startX = startX
   25|      0|        self.startY = startY
   26|      0|    }
   27|       |
   28|      0|    override func draw(_: CGRect) {
   29|      0|        let voltCircle = UIBezierPath(ovalIn: CGRect(x: startY, y: startY, width: 25, height: 25))
   30|      0|        voltCircle.lineWidth = 4
   31|      0|        UIColor.white.setFill()
   32|      0|        voltCircle.fill()
   33|      0|        UIColor.yellow.setStroke()
   34|      0|        voltCircle.stroke()
   35|      0|    }
   36|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/VoltDraw.swift:
    1|       |//
    2|       |//  VoltDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/26/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |// 電圧値の数字を表示するクラス
   13|       |class VoltDraw: UIView {
   14|       |    var startX: Double = 0
   15|       |    var startY: Double = 0
   16|       |    var endX: Double = 0
   17|       |    var endY: Double = 0
   18|       |
   19|       |    /// 線を描画するための座標を設定
   20|       |    ///
   21|       |    /// - Parameters:
   22|       |    ///   - startX: 起点のX座標
   23|       |    ///   - startY: 起点のY座標
   24|       |    ///   - endX: 終点のX座標
   25|       |    ///   - endY: 週手のY座標
   26|       |    /// メンバ変数にそれぞれ代入
   27|      0|    func intoBoardPoint(startX: Double, startY: Double, endX: Double, endY: Double) {
   28|      0|        self.startX = startX
   29|      0|        self.startY = startY
   30|      0|        self.endX = endX
   31|      0|        self.endY = endY
   32|      0|    }
   33|       |
   34|      0|    override func draw(_: CGRect) {
   35|      0|        let line = UIBezierPath()
   36|      0|        line.move(to: CGPoint(x: startX, y: startY))
   37|      0|        line.addLine(to: CGPoint(x: endX, y: endY))
   38|      0|        line.close()
   39|      0|        let voltColor = UIColor(red: 1, green: 1, blue: 0, alpha: 0.5)
   40|      0|        voltColor.setStroke()
   41|      0|        line.lineWidth = 5 // 線の太さ
   42|      0|        line.stroke()
   43|      0|    }
   44|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/VoltRetention.swift:
    1|       |//
    2|       |//  VoltRetention.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/26/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |class VoltRetention {
   12|       |//    var partsDraw = PartsDraw()
   13|       |    var flagPowerIn = 0
   14|       |    var flagPartIn = 0
   15|       |    var flagGndIn = 0
   16|       |
   17|       |    var searchInput = 0
   18|       |    var voltBoardNumber = 0
   19|       |    var thirtyValue = 0
   20|       |    var voltValue = 0
   21|       |    var pinNumber = 0
   22|       |    var pinNumberConnection = 0
   23|       |    var pinValue = 0
   24|       |    var thisValue = 0
   25|       |    var returnPinValue = 0
   26|       |    var returnControlNumber = 0
   27|       |
   28|       |    var voltDrawStart = 0
   29|       |    var voltDrawEnd = 0
   30|       |
   31|       |    var voltControlArray = Array(repeating: 0, count: 90)
   32|       |    var voltConnectedArray: [[Int]] = [[404], [405], [408], [409], [410], [411], [419], [420], [421], [422], [423], [424]]
   33|       |    var voltInPinArray: [Int] = [412, 413, 414]
   34|       |
   35|       |    /*
   36|       |     voltPowerIn
   37|       |     役割:powerピンまたはデジタルI/Oにパーツの接続があるかどうかを調べ、接続があった場合にはflagPowerInから1(Int)を返り値として返す
   38|       |     */
   39|      0|    func voltPowerIn(repeatNumber: Int) -> Int {
   40|      0|        if flagPowerIn == 0 {
   41|      0|            voltControlArray[64] = 3
   42|      0|            voltControlArray[65] = 5
   43|      0|            voltControlArray[66] = 0
   44|      0|            voltControlArray[67] = 0
   45|      0|            voltControlArray[68] = 10
   46|      0|            voltControlArray[69] = 3
   47|      0|            voltControlArray[70] = 3
   48|      0|            voltControlArray[71] = 3
   49|      0|            voltControlArray[72] = 0
   50|      0|            voltControlArray[73] = 0
   51|      0|            voltControlArray[74] = 0
   52|      0|
   53|      0|            voltControlArray[75] = 0
   54|      0|            voltControlArray[76] = 5
   55|      0|            voltControlArray[77] = 5
   56|      0|            voltControlArray[78] = 5
   57|      0|            voltControlArray[79] = 5
   58|      0|            voltControlArray[80] = 5
   59|      0|            voltControlArray[81] = 5
   60|      0|            voltControlArray[82] = 0
   61|      0|            voltControlArray[83] = 0
   62|      0|            voltControlArray[84] = 0
   63|      0|            voltControlArray[85] = 0
   64|      0|            voltControlArray[86] = 0
   65|      0|            voltControlArray[87] = 0
   66|      0|            voltControlArray[88] = 0
   67|      0|            voltControlArray[89] = 0
   68|      0|
   69|      0|            searchInput = voltConnectedArray[repeatNumber][0]
   70|      0|
   71|      0|            /* 404~418で動作しないようにする */
   72|      0|            if partsDraw.ledTranslatePointArray.firstIndex(of: searchInput) != nil {
   73|      0|                if partsDraw.ledTranslatePointArray.firstIndex(of: searchInput)! % 2 == 0 {
   74|      0|                    pinNumber = partsDraw.ledTranslatePointArray[partsDraw.ledTranslatePointArray.firstIndex(of: searchInput)! + 1]
   75|      0|                    flagPowerIn = 1
   76|      0|                    if searchInput == 404 || 409 ... 411 ~= searchInput {
   77|      0|                        voltValue = 3
   78|      0|                    } else if searchInput == 405 || 419 ... 424 ~= searchInput {
   79|      0|                        voltValue = 5
   80|      0|                    } else if searchInput == 408 {
   81|      0|                        voltValue = 10
   82|      0|                    } else {
   83|      0|                        voltValue = 0
   84|      0|                    }
   85|      0|                    flagPowerIn = 1
   86|      0|                } else {
   87|      0|                    pinNumber = partsDraw.ledTranslatePointArray[partsDraw.ledTranslatePointArray.firstIndex(of: searchInput)! + 1]
   88|      0|                    if searchInput == 404 || 409 ... 411 ~= searchInput {
   89|      0|                        voltValue = 3
   90|      0|                    } else if searchInput == 405 || 419 ... 424 ~= searchInput {
   91|      0|                        voltValue = 5
   92|      0|                    } else if searchInput == 408 {
   93|      0|                        voltValue = 10
   94|      0|                    } else {
   95|      0|                        flagPowerIn = 0
   96|      0|                    }
   97|      0|                    flagPowerIn = 1
   98|      0|                }
   99|      0|            }
  100|      0|
  101|      0|            if partsDraw.wireTranslatePointArray.firstIndex(of: searchInput) != nil {
  102|      0|                if partsDraw.wireTranslatePointArray.firstIndex(of: searchInput)! % 2 == 0 {
  103|      0|                    pinNumber = partsDraw.wireTranslatePointArray[partsDraw.wireTranslatePointArray.firstIndex(of: searchInput)! + 1]
  104|      0|
  105|      0|                    if searchInput == 404 || 409 ... 411 ~= searchInput {
  106|      0|                        voltValue = 3
  107|      0|                    } else if searchInput == 405 || 419 ... 424 ~= searchInput {
  108|      0|                        voltValue = 5
  109|      0|                    } else if searchInput == 408 {
  110|      0|                        voltValue = 10
  111|      0|                    } else {
  112|      0|                        voltValue = 0
  113|      0|                    }
  114|      0|                    flagPowerIn = 1
  115|      0|                } else {
  116|      0|                    pinNumber = partsDraw.wireTranslatePointArray[partsDraw.wireTranslatePointArray.firstIndex(of: searchInput)! - 1]
  117|      0|                    if searchInput == 404 || 409 ... 411 ~= searchInput {
  118|      0|                        voltValue = 3
  119|      0|                    } else if searchInput == 405 || 419 ... 424 ~= searchInput {
  120|      0|                        voltValue = 5
  121|      0|                    } else if searchInput == 408 {
  122|      0|                        voltValue = 10
  123|      0|                    } else {
  124|      0|                        voltValue = 0
  125|      0|                    }
  126|      0|                    flagPowerIn = 1
  127|      0|                }
  128|      0|            }
  129|      0|
  130|      0|            if partsDraw.resistorTranslatePointArray.firstIndex(of: searchInput) != nil {
  131|      0|                if partsDraw.resistorTranslatePointArray.firstIndex(of: searchInput)! % 2 == 0 {
  132|      0|                    pinNumber = partsDraw.resistorTranslatePointArray[partsDraw.resistorTranslatePointArray.firstIndex(of: searchInput)! + 1]
  133|      0|
  134|      0|                    if searchInput == 404 || 409 ... 411 ~= searchInput {
  135|      0|                        voltValue = 3
  136|      0|                    } else if searchInput == 405 || 419 ... 424 ~= searchInput {
  137|      0|                        voltValue = 5
  138|      0|                    } else if searchInput == 408 {
  139|      0|                        voltValue = 10
  140|      0|                    } else {
  141|      0|                        voltValue = 0
  142|      0|                    }
  143|      0|                    flagPowerIn = 1
  144|      0|                } else {
  145|      0|                    pinNumber = partsDraw.resistorTranslatePointArray[partsDraw.resistorTranslatePointArray.firstIndex(of: searchInput)! + 1]
  146|      0|                    if searchInput == 404 || 409 ... 411 ~= searchInput {
  147|      0|                        voltValue = 3
  148|      0|                    } else if searchInput == 405 || 419 ... 424 ~= searchInput {
  149|      0|                        voltValue = 5
  150|      0|                    } else if searchInput == 408 {
  151|      0|                        voltValue = 10
  152|      0|                    } else {
  153|      0|                        voltValue = 0
  154|      0|                    }
  155|      0|                    flagPowerIn = 1
  156|      0|                }
  157|      0|            }
  158|      0|        }
  159|      0|        for iSearch in 0 ..< repeatNumber {
  160|      0|            if voltConnectedArray[iSearch].firstIndex(of: pinNumber) != nil && repeatNumber != 0 {
  161|      0|                pinNumber = 0
  162|      0|            }
  163|      0|        }
  164|      0|        if pinNumber != 0 {
  165|      0|            voltConnectedArray[repeatNumber].append(pinNumber)
  166|      0|        }
  167|      0|        return pinNumber
  168|      0|    }
  169|       |
  170|       |    /*
  171|       |     voltConnection
  172|       |     2:パーツによって接続されているピンを調べる
  173|       |     inPinNumber:pinNumberを引数として撮ってきて使う形にしたい(願望)
  174|       |     */
  175|       |
  176|      0|    func voltConnection(inPinNumber: Int, repeatNumber: Int) -> Int {
  177|      0|        if pinNumber != 0 {
  178|      0|            /* inPinNumberが描画用配列の何番目かを調べる */
  179|      0|            if partsDraw.wireTranslatePointArray.firstIndex(of: inPinNumber) != nil {
  180|      0|                pinNumberConnection = partsDraw.wireTranslatePointArray.firstIndex(of: inPinNumber)!
  181|      0|                /* 接続先を調べる */
  182|      0|                if pinNumberConnection == 0 {
  183|      0|                    pinValue = partsDraw.wireTranslatePointArray[pinNumberConnection + 1]
  184|      0|                } else if pinNumberConnection % 2 == 0 {
  185|      0|                    pinValue = partsDraw.wireTranslatePointArray[pinNumberConnection + 1]
  186|      0|                } else {
  187|      0|                    pinValue = partsDraw.wireTranslatePointArray[pinNumberConnection - 1]
  188|      0|                }
  189|      0|
  190|      0|            } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinNumber) != nil {
  191|      0|                pinNumberConnection = partsDraw.ledTranslatePointArray.firstIndex(of: inPinNumber)!
  192|      0|                /* 接続先を調べる */
  193|      0|                if pinNumberConnection == 0 {
  194|      0|                    pinValue = partsDraw.ledTranslatePointArray[pinNumberConnection + 1]
  195|      0|                } else if pinNumberConnection % 2 == 0 {
  196|      0|                    pinValue = partsDraw.ledTranslatePointArray[pinNumberConnection + 1]
  197|      0|                } else {
  198|      0|                    pinValue = partsDraw.ledTranslatePointArray[pinNumberConnection - 1]
  199|      0|                }
  200|      0|
  201|      0|            } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinNumber) != nil {
  202|      0|                pinNumberConnection = partsDraw.resistorTranslatePointArray.firstIndex(of: inPinNumber)!
  203|      0|                /* 接続先を調べる */
  204|      0|                if pinNumberConnection == 0 {
  205|      0|                    pinValue = partsDraw.resistorTranslatePointArray[pinNumberConnection + 1]
  206|      0|                } else if pinNumberConnection % 2 == 0 {
  207|      0|                    pinValue = partsDraw.resistorTranslatePointArray[pinNumberConnection + 1]
  208|      0|                } else {
  209|      0|                    pinValue = partsDraw.resistorTranslatePointArray[pinNumberConnection - 1]
  210|      0|                }
  211|      0|            }
  212|      0|//            else if partsDraw.gyroTranslatePointArray.index(of: inPinNumber) != nil {
  213|      0|//                pinNumberConnection = partsDraw.gyroTranslatePointArray.index(of: inPinNumber)!
  214|      0|//                if pinNumberConnection == 4 && pinValue == 0 {
  215|      0|            ////                    for iGyro in 1..<5 {
  216|      0|            ////                        if voltConnectedArray[repeatNumber].index(of: partsDraw.gyroTranslatePointArray[pinNumberConnection - iGyro]) == nil {
  217|      0|            ////
  218|      0|            ////                        }
  219|      0|            ////                    }
  220|      0|//                } else if pinNumberConnection == 3 && pinValue == 0 {
  221|      0|            ////                    for iGyro in 0..<4 {
  222|      0|            ////                        if voltConnectedArray[repeatNumber].index(of: partsDraw.gyroTranslatePointArray[pinNumberConnection - iGyro]) == nil {
  223|      0|            ////
  224|      0|            ////                        }
  225|      0|            ////                    }
  226|      0|//                } else if pinNumberConnection == 2 && pinValue == 0 {
  227|      0|            ////                    for iGyro in 0..<4 {
  228|      0|            ////                        if voltConnectedArray[repeatNumber].index(of: partsDraw.gyroTranslatePointArray[pinNumberConnection + 1 - iGyro]) == nil {
  229|      0|            ////
  230|      0|            ////                        }
  231|      0|            ////                    }
  232|      0|//                } else if pinNumberConnection == 1 && pinValue == 0 {
  233|      0|            ////                    for iGyro in 0..<4 {
  234|      0|            ////                        if voltConnectedArray[repeatNumber].index(of: partsDraw.gyroTranslatePointArray[pinNumberConnection + 2 - iGyro]) == nil {
  235|      0|            ////
  236|      0|            ////                        }
  237|      0|            ////                    }
  238|      0|//                }
  239|      0|//            }
  240|      0|        }
  241|      0|        if voltConnectedArray[repeatNumber].firstIndex(of: pinValue) == nil {
  242|      0|            voltConnectedArray[repeatNumber].append(pinValue)
  243|      0|        }
  244|      0|        return pinValue
  245|      0|    }
  246|       |
  247|       |    /*
  248|       |     voltSearchNearConnection:同じ行or列の接続を調べる
  249|       |     inPinValue:調べたい行or列の中のピンの番号
  250|       |     返り値:行or列内の接続のあるピンの番号。ない場合は0を返す
  251|       |     */
  252|      0|    func voltSearchNearConnection(inPinValue: Int, repeatNumber: Int) -> Int {
  253|      0|        if inPinValue != 0 && returnPinValue == 0 {
  254|      0|            if voltConnectedArray[repeatNumber].firstIndex(of: inPinValue) == nil {
  255|      0|                voltConnectedArray[repeatNumber].append(inPinValue)
  256|      0|            }
  257|      0|            // プラス，マイナス行の管理
  258|      0|            if 1 ... 25 ~= inPinValue {
  259|      0|                thirtyValue = 0
  260|      0|                for i in 1 ..< 26 {
  261|      0|                    if partsDraw.wireTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  262|      0|                        returnPinValue = i
  263|      0|                    } else if partsDraw.ledTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  264|      0|                        returnPinValue = i
  265|      0|                    } else if partsDraw.resistorTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  266|      0|                        returnPinValue = i
  267|      0|                    } else if partsDraw.gyroTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  268|      0|                        returnPinValue = i
  269|      0|                    }
  270|      0|                }
  271|      0|            } else if 26 ... 50 ~= inPinValue {
  272|      0|                for i in 26 ..< 51 {
  273|      0|                    if partsDraw.wireTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  274|      0|                        returnPinValue = i
  275|      0|                    } else if partsDraw.ledTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  276|      0|                        returnPinValue = i
  277|      0|                    } else if partsDraw.resistorTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  278|      0|                        returnPinValue = i
  279|      0|                    } else if partsDraw.gyroTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  280|      0|                        returnPinValue = i
  281|      0|                    }
  282|      0|                }
  283|      0|            } else if 351 ... 375 ~= inPinValue {
  284|      0|                for i in 351 ..< 376 {
  285|      0|                    if partsDraw.wireTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  286|      0|                        returnPinValue = i
  287|      0|                    } else if partsDraw.ledTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  288|      0|                        returnPinValue = i
  289|      0|                    } else if partsDraw.resistorTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  290|      0|                        returnPinValue = i
  291|      0|                    } else if partsDraw.gyroTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  292|      0|                        returnPinValue = i
  293|      0|                    }
  294|      0|                }
  295|      0|            } else if 376 ... 400 ~= inPinValue {
  296|      0|                for i in 376 ..< 401 {
  297|      0|                    if partsDraw.wireTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  298|      0|                        returnPinValue = i
  299|      0|                    } else if partsDraw.ledTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  300|      0|                        returnPinValue = i
  301|      0|                    } else if partsDraw.resistorTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  302|      0|                        returnPinValue = i
  303|      0|                    } else if partsDraw.gyroTranslatePointArray.firstIndex(of: i) != nil && voltConnectedArray[repeatNumber].firstIndex(of: i) == nil {
  304|      0|                        returnPinValue = i
  305|      0|                    }
  306|      0|                }
  307|      0|            }
  308|      0|
  309|      0|            /* f~j列の管理 */
  310|      0|            if 51 ... 200 ~= inPinValue {
  311|      0|                if 51 ... 80 ~= inPinValue {
  312|      0|                    for _ in 0 ..< 5 {
  313|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  314|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  315|      0|                            returnPinValue = inPinValue + thirtyValue
  316|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  317|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  318|      0|                            returnPinValue = inPinValue + thirtyValue
  319|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  320|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  321|      0|                            returnPinValue = inPinValue + thirtyValue
  322|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  323|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  324|      0|                            returnPinValue = inPinValue + thirtyValue
  325|      0|                        }
  326|      0|                        thirtyValue += 30
  327|      0|                    }
  328|      0|                } else if 81 ... 110 ~= inPinValue {
  329|      0|                    thirtyValue = -30
  330|      0|                    for _ in 0 ..< 5 {
  331|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  332|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  333|      0|                            returnPinValue = inPinValue + thirtyValue
  334|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  335|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  336|      0|                            returnPinValue = inPinValue + thirtyValue
  337|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  338|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  339|      0|                            returnPinValue = inPinValue + thirtyValue
  340|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  341|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  342|      0|                            returnPinValue = inPinValue + thirtyValue
  343|      0|                        }
  344|      0|                        thirtyValue += 30
  345|      0|                    }
  346|      0|                } else if 111 ... 140 ~= inPinValue {
  347|      0|                    thirtyValue = -60
  348|      0|                    for _ in 0 ..< 5 {
  349|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  350|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  351|      0|                            returnPinValue = inPinValue + thirtyValue
  352|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  353|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  354|      0|                            returnPinValue = inPinValue + thirtyValue
  355|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  356|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  357|      0|                            returnPinValue = inPinValue + thirtyValue
  358|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  359|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  360|      0|                            returnPinValue = inPinValue + thirtyValue
  361|      0|                        }
  362|      0|                        thirtyValue += 30
  363|      0|                    }
  364|      0|                } else if 141 ... 170 ~= inPinValue {
  365|      0|                    thirtyValue = -90
  366|      0|                    for _ in 0 ..< 5 {
  367|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  368|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  369|      0|                            returnPinValue = inPinValue + thirtyValue
  370|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  371|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  372|      0|                            returnPinValue = inPinValue + thirtyValue
  373|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  374|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  375|      0|                            returnPinValue = inPinValue + thirtyValue
  376|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  377|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  378|      0|                            returnPinValue = inPinValue + thirtyValue
  379|      0|                        }
  380|      0|                        thirtyValue += 30
  381|      0|                    }
  382|      0|                } else if 171 ... 200 ~= inPinValue {
  383|      0|                    thirtyValue = -120
  384|      0|                    for _ in 0 ..< 5 {
  385|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  386|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  387|      0|                            returnPinValue = inPinValue + thirtyValue
  388|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  389|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  390|      0|                            returnPinValue = inPinValue + thirtyValue
  391|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  392|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  393|      0|                            returnPinValue = inPinValue + thirtyValue
  394|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  395|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  396|      0|                            returnPinValue = inPinValue + thirtyValue
  397|      0|                        }
  398|      0|                        thirtyValue += 30
  399|      0|                    }
  400|      0|                }
  401|      0|            }
  402|      0|
  403|      0|            /* a~e列の管理 */
  404|      0|            if 201 ... 350 ~= inPinValue {
  405|      0|                if 201 ... 230 ~= inPinValue {
  406|      0|                    for _ in 0 ..< 5 {
  407|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  408|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  409|      0|                            returnPinValue = inPinValue + thirtyValue
  410|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  411|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  412|      0|                            returnPinValue = inPinValue + thirtyValue
  413|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  414|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  415|      0|                            returnPinValue = inPinValue + thirtyValue
  416|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  417|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  418|      0|                            returnPinValue = inPinValue + thirtyValue
  419|      0|                        }
  420|      0|                        thirtyValue += 30
  421|      0|                    }
  422|      0|                } else if 231 ... 260 ~= inPinValue {
  423|      0|                    thirtyValue = -30
  424|      0|                    for _ in 0 ..< 5 {
  425|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  426|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  427|      0|                            returnPinValue = inPinValue + thirtyValue
  428|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  429|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  430|      0|                            returnPinValue = inPinValue + thirtyValue
  431|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  432|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  433|      0|                            returnPinValue = inPinValue + thirtyValue
  434|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  435|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  436|      0|                            returnPinValue = inPinValue + thirtyValue
  437|      0|                        }
  438|      0|                        thirtyValue += 30
  439|      0|                    }
  440|      0|                } else if 261 ... 290 ~= inPinValue {
  441|      0|                    thirtyValue = -60
  442|      0|                    for _ in 0 ..< 5 {
  443|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  444|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  445|      0|                            returnPinValue = inPinValue + thirtyValue
  446|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  447|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  448|      0|                            returnPinValue = inPinValue + thirtyValue
  449|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  450|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  451|      0|                            returnPinValue = inPinValue + thirtyValue
  452|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  453|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  454|      0|                            returnPinValue = inPinValue + thirtyValue
  455|      0|                        }
  456|      0|                        thirtyValue += 30
  457|      0|                    }
  458|      0|                } else if 291 ... 320 ~= inPinValue {
  459|      0|                    thirtyValue = -90
  460|      0|                    for _ in 0 ..< 5 {
  461|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  462|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  463|      0|                            returnPinValue = inPinValue + thirtyValue
  464|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  465|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  466|      0|                            returnPinValue = inPinValue + thirtyValue
  467|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  468|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  469|      0|                            returnPinValue = inPinValue + thirtyValue
  470|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  471|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  472|      0|                            returnPinValue = inPinValue + thirtyValue
  473|      0|                        }
  474|      0|                        thirtyValue += 30
  475|      0|                    }
  476|      0|                } else if 321 ... 350 ~= inPinValue {
  477|      0|                    thirtyValue = -120
  478|      0|                    for _ in 0 ..< 5 {
  479|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  480|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  481|      0|                            returnPinValue = inPinValue + thirtyValue
  482|      0|                        } else if partsDraw.ledTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  483|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  484|      0|                            returnPinValue = inPinValue + thirtyValue
  485|      0|                        } else if partsDraw.resistorTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  486|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  487|      0|                            returnPinValue = inPinValue + thirtyValue
  488|      0|                        } else if partsDraw.gyroTranslatePointArray.firstIndex(of: inPinValue + thirtyValue) != nil
  489|      0|                            && voltConnectedArray[repeatNumber].firstIndex(of: inPinValue + thirtyValue) == nil {
  490|      0|                            returnPinValue = inPinValue + thirtyValue
  491|      0|                        }
  492|      0|                        thirtyValue += 30
  493|      0|                    }
  494|      0|                }
  495|      0|            }
  496|      0|        }
  497|      0|        if voltConnectedArray[repeatNumber].firstIndex(of: returnPinValue) == nil && returnPinValue != 0 {
  498|      0|            voltConnectedArray[repeatNumber].append(returnPinValue)
  499|      0|        }
  500|      0|        return returnPinValue
  501|      0|    }
  502|       |
  503|       |    /* ボード上の電圧管理 */
  504|      0|    func voltValueControl(pinNumber: Int) {
  505|      0|        if pinNumber < 401 {
  506|      0|            /* プラス，マイナス行の管理 */
  507|      0|            if 1 ... 25 ~= pinNumber {
  508|      0|                voltControlArray[60] = voltValue
  509|      0|                voltBoardNumber = 60
  510|      0|            } else if 26 ... 50 ~= pinNumber {
  511|      0|                voltControlArray[61] = voltValue
  512|      0|                voltBoardNumber = 61
  513|      0|            } else if 351 ... 375 ~= pinNumber {
  514|      0|                voltControlArray[62] = voltValue
  515|      0|                voltBoardNumber = 62
  516|      0|            } else if 376 ... 400 ~= pinNumber {
  517|      0|                voltControlArray[63] = voltValue
  518|      0|                voltBoardNumber = 63
  519|      0|            }
  520|      0|
  521|      0|            /* f~j */
  522|      0|            for i in 0 ..< 30 {
  523|      0|                if pinNumber == 51 + i || pinNumber == 81 + i || pinNumber == 111 + i
  524|      0|                    || pinNumber == 141 + i || pinNumber == 171 + i {
  525|      0|                    voltControlArray[i] = voltValue
  526|      0|                    voltBoardNumber = i
  527|      0|                }
  528|      0|            }
  529|      0|
  530|      0|            /* a~e */
  531|      0|            for i in 30 ..< 60 {
  532|      0|                if pinNumber == 171 + i || pinNumber == 201 + i || pinNumber == 231 + i
  533|      0|                    || pinNumber == 261 + i || pinNumber == 291 + i {
  534|      0|                    voltControlArray[i] = voltValue
  535|      0|                    voltBoardNumber = i
  536|      0|                }
  537|      0|            }
  538|      0|        }
  539|      0|    }
  540|       |
  541|       |    /*
  542|       |     VoltControlの値を取ってくるやつ
  543|       |     bordNumber:ボード番号
  544|       |     thisValue
  545|       |     */
  546|      0|    func voltReturnValue(boardNumber: Int) -> Int {
  547|      0|        if boardNumber < 401 {
  548|      0|            /* プラス，マイナス行の管理 */
  549|      0|            if 1 ... 25 ~= boardNumber {
  550|      0|                thisValue = voltControlArray[60]
  551|      0|            } else if 26 ... 50 ~= boardNumber {
  552|      0|                thisValue = voltControlArray[61]
  553|      0|            } else if 351 ... 375 ~= boardNumber {
  554|      0|                thisValue = voltControlArray[62]
  555|      0|            } else if 376 ... 400 ~= boardNumber {
  556|      0|                thisValue = voltControlArray[63]
  557|      0|            }
  558|      0|
  559|      0|            /* f~j列の管理 */
  560|      0|            for i in 0 ..< 30 {
  561|      0|                if boardNumber == 51 + i || boardNumber == 81 + i || boardNumber == 111 + i
  562|      0|                    || boardNumber == 141 + i || boardNumber == 171 + i {
  563|      0|                    thisValue = voltControlArray[i]
  564|      0|                }
  565|      0|            }
  566|      0|
  567|      0|            /* a~e列の管理 */
  568|      0|            for i in 30 ..< 60 {
  569|      0|                if boardNumber == 171 + i || boardNumber == 201 + i || boardNumber == 231 + i
  570|      0|                    || boardNumber == 261 + i || boardNumber == 291 + i {
  571|      0|                    thisValue = voltControlArray[i]
  572|      0|                }
  573|      0|            }
  574|      0|        }
  575|      0|        return thisValue
  576|      0|    }
  577|       |
  578|       |    /*
  579|       |     VoltControlArrayのやつを変換用
  580|       |     voltTransNumber:controlArray内の番号
  581|       |     */
  582|      0|    func voltBoardTranslate(voltTransNumber: Int) {
  583|      0|        if 0 ... 29 ~= voltTransNumber {
  584|      0|            for i in 0 ..< 30 {
  585|      0|                if voltTransNumber == i {
  586|      0|                    voltDrawStart = 51 + i
  587|      0|                    voltDrawEnd = 171 + i
  588|      0|                }
  589|      0|            }
  590|      0|        } else if 30 ... 59 ~= voltTransNumber {
  591|      0|            for i in 0 ..< 30 {
  592|      0|                if voltTransNumber == 30 + i {
  593|      0|                    voltDrawStart = 201 + i
  594|      0|                    voltDrawEnd = 321 + i
  595|      0|                }
  596|      0|            }
  597|      0|        } else if voltTransNumber == 60 {
  598|      0|            voltDrawStart = 1
  599|      0|            voltDrawEnd = 25
  600|      0|        } else if voltTransNumber == 61 {
  601|      0|            voltDrawStart = 26
  602|      0|            voltDrawEnd = 50
  603|      0|        } else if voltTransNumber == 62 {
  604|      0|            voltDrawStart = 351
  605|      0|            voltDrawEnd = 375
  606|      0|        } else if voltTransNumber == 63 {
  607|      0|            voltDrawStart = 376
  608|      0|            voltDrawEnd = 400
  609|      0|        }
  610|      0|    }
  611|       |
  612|      0|    func voltControlNumberBack(boardNumber: Int) -> Int {
  613|      0|        if boardNumber < 401 {
  614|      0|            /* f~j列の管理 */
  615|      0|            for i in 0 ..< 30 {
  616|      0|                if boardNumber == 51 + i || boardNumber == 81 + i || boardNumber == 111 + i
  617|      0|                    || boardNumber == 141 + i || boardNumber == 171 + i {
  618|      0|                    returnControlNumber = i
  619|      0|                }
  620|      0|            }
  621|      0|            /* a~e列の管理 */
  622|      0|            for i in 30 ..< 60 {
  623|      0|                if boardNumber == 171 + i || boardNumber == 201 + i || boardNumber == 231 + i
  624|      0|                    || boardNumber == 261 + i || boardNumber == 291 + i {
  625|      0|                    returnControlNumber = i
  626|      0|                }
  627|      0|            }
  628|      0|        }
  629|      0|        return returnControlNumber
  630|      0|    }
  631|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Extantions/CALayer/CALayer+UIColor.swift:
    1|       |//
    2|       |//  CALayer+UIColor.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/08/18.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |extension UIView {
   13|       |    @IBInspectable var cornerRadius: CGFloat {
   14|      0|        get {
   15|      0|            return layer.cornerRadius
   16|      0|        }
   17|      6|        set {
   18|      6|            layer.cornerRadius = newValue
   19|      6|            layer.masksToBounds = newValue > 0
   20|      6|        }
   21|       |    }
   22|       |
   23|       |    @IBInspectable var borderWidth: CGFloat {
   24|      0|        get {
   25|      0|            return layer.borderWidth
   26|      0|        }
   27|      6|        set {
   28|      6|            layer.borderWidth = newValue
   29|      6|        }
   30|       |    }
   31|       |
   32|       |    @IBInspectable var borderColor: UIColor? {
   33|      0|        get {
   34|      0|            return UIColor(cgColor: layer.borderColor!)
   35|      0|        }
   36|      6|        set {
   37|      6|            layer.borderColor = newValue?.cgColor
   38|      6|        }
   39|       |    }
   40|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Extantions/ViewController/ViewController+ExpandableDelegate.swift:
    1|       |//
    2|       |//  ViewController+ExpandableDelegate.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/08/23.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import ExpandableCell
   10|       |import Foundation
   11|       |import SCLAlertView
   12|       |import UIKit
   13|       |
   14|       |private let expandableTableViewHeader: [String] = ["Arduino Board", "MODULE", "SETTINGS"]
   15|       |private let expandableTableViewCell: [[String]] = [["Arduino Uno", "Arduino Leonard"],
   16|       |                                                   ["ジャンパワイヤ", "LED", "抵抗器", "ジャイロセンサ"],
   17|       |                                                   ["サーバーに送信", "サーバーから取得"]]
   18|       |var wireDrawRan = 0
   19|       |var ledDrawRan = 0
   20|       |var resistorDrawRan = 0
   21|       |var gyroDrawRan = 0
   22|       |var naturalRan = 0
   23|       |var gyroRan = 0
   24|       |var dangerDrawRan = 0
   25|       |var runRan = 0
   26|       |
   27|       |// var arduinoUnoPointControl12_9 = ArduinoUnoPointControl12_9()
   28|       |// var partsDraw = PartsDraw.partsDrawInstance
   29|       |var partsDraw = PartsDraw()
   30|       |
   31|       |extension ViewController: ExpandableDelegate {
   32|      0|    func expandableTableView(_: ExpandableTableView, expandedCellsForRowAt indexPath: IndexPath) -> [UITableViewCell]? {
   33|      0|        switch indexPath.section {
   34|      0|        case 0:
   35|      0|
   36|      0|            switch indexPath.row {
   37|      0|            case 0:
   38|      0|                let cell00 = tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID) as! ExpandedCell
   39|      0|                cell00.titleLabel.text = expandableTableViewCell[0][0]
   40|      0|                let cell01 = tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID) as! ExpandedCell
   41|      0|                cell01.titleLabel.text = expandableTableViewCell[0][1]
   42|      0|                return [cell00, cell01]
   43|      0|
   44|      0|            case 1:
   45|      0|                let cell10 = tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID) as! ExpandedCell
   46|      0|                cell10.titleLabel.text = expandableTableViewCell[1][0]
   47|      0|                let cell11 = tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID) as! ExpandedCell
   48|      0|                cell11.titleLabel.text = expandableTableViewCell[1][1]
   49|      0|                let cell12 = tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID) as! ExpandedCell
   50|      0|                cell12.titleLabel.text = expandableTableViewCell[1][2]
   51|      0|                let cell13 = tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID) as! ExpandedCell
   52|      0|                cell13.titleLabel.text = expandableTableViewCell[1][3]
   53|      0|                return [cell10, cell11, cell12, cell13]
   54|      0|
   55|      0|            case 2:
   56|      0|                let cell20 = tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID) as! ExpandedCell
   57|      0|                cell20.titleLabel.text = expandableTableViewCell[2][0]
   58|      0|                let cell21 = tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID) as! ExpandedCell
   59|      0|                cell21.titleLabel.text = expandableTableViewCell[2][1]
   60|      0|                return [cell20, cell21]
   61|      0|
   62|      0|            default:
   63|      0|                break
   64|      0|            }
   65|      0|        default:
   66|      0|            break
   67|      0|        }
   68|      0|        return nil
   69|      0|    }
   70|       |
   71|      0|    func expandableTableView(_: ExpandableTableView, heightsForExpandedRowAt indexPath: IndexPath) -> [CGFloat]? {
   72|      0|        switch indexPath.section {
   73|      0|        case 0:
   74|      0|            switch indexPath.row {
   75|      0|            case 0:
   76|      0|                return [44, 44, 44]
   77|      0|
   78|      0|            case 1:
   79|      0|                return [44, 44, 44, 44]
   80|      0|
   81|      0|            case 2:
   82|      0|                return [44, 44, 44]
   83|      0|
   84|      0|//            case 3:
   85|      0|//                return [44, 44, 44]
   86|      0|
   87|      0|            default:
   88|      0|                break
   89|      0|            }
   90|      0|        default:
   91|      0|            break
   92|      0|        }
   93|      0|        return nil
   94|      0|    }
   95|       |
   96|      6|    func numberOfSections(in _: ExpandableTableView) -> Int {
   97|      6|        return 1
   98|      6|    }
   99|       |
  100|      6|    func expandableTableView(_: ExpandableTableView, numberOfRowsInSection _: Int) -> Int {
  101|      6|        return expandableTableViewHeader.count
  102|      6|    }
  103|       |
  104|      0|    func expandableTableView(_: ExpandableTableView, didSelectRowAt _: IndexPath) {
  105|      0|        //        print("didSelectRow:\(indexPath)")
  106|      0|    }
  107|       |
  108|      0|    func expandableTableView(_: ExpandableTableView, didSelectExpandedRowAt _: IndexPath) {
  109|      0|        //        print("didSelectExpandedRowAt:\(indexPath)")
  110|      0|    }
  111|       |
  112|      0|    func expandableTableView(_: ExpandableTableView, expandedCell: UITableViewCell, didSelectExpandedRowAt indexPath: IndexPath) {
  113|      0|        if let cell = expandedCell as? ExpandedCell {
  114|      0|            log.info("\(cell.titleLabel.text ?? "")")
  115|      0|            let cellValue = cell.titleLabel.text ?? ""
  116|      0|            // log.info("\(indexPath.section)")
  117|      0|            log.info("\(indexPath.row)")
  118|      0|            if cellValue == "Arduino Uno" {
  119|      0|                // SCLAlertView().showInfo("\(cell.titleLabel.text ?? "")")
  120|      0|                arduinoImageView.image = UIImage(named: "arduino-uno-advis")
  121|      0|                SCLAlertView().showInfo("Arduino Unoを\n配置しました")
  122|      0|
  123|      0|            } else if cellValue == "Arduino Leonard" {
  124|      0|                SCLAlertView().showInfo("Arduino Leonard")
  125|      0|
  126|      0|            } else if cellValue == "ジャンパワイヤ" {
  127|      0|                if wireDrawRan == 1 {
  128|      0|                    wireDrawRan = 0
  129|      0|                    SCLAlertView().showInfo("ジャンパワイヤ\nOFF")
  130|      0|                } else if wireDrawRan == 0 {
  131|      0|                    wireDrawRan = 1
  132|      0|                    ledDrawRan = 0
  133|      0|                    resistorDrawRan = 0
  134|      0|                    gyroDrawRan = 0
  135|      0|                    SCLAlertView().showInfo("ジャンパワイヤ\nON")
  136|      0|                }
  137|      0|
  138|      0|            } else if cellValue == "LED" {
  139|      0|                if ledDrawRan == 1 {
  140|      0|                    ledDrawRan = 0
  141|      0|                    SCLAlertView().showInfo("LED\nOFF")
  142|      0|                } else if ledDrawRan == 0 {
  143|      0|                    ledDrawRan = 1
  144|      0|                    wireDrawRan = 0
  145|      0|                    resistorDrawRan = 0
  146|      0|                    gyroDrawRan = 0
  147|      0|                    SCLAlertView().showInfo("LED\nON")
  148|      0|                }
  149|      0|
  150|      0|            } else if cellValue == "抵抗器" {
  151|      0|                if resistorDrawRan == 1 {
  152|      0|                    resistorDrawRan = 0
  153|      0|                    SCLAlertView().showInfo("抵抗器\nOFF")
  154|      0|                } else if resistorDrawRan == 0 {
  155|      0|                    resistorDrawRan = 1
  156|      0|                    wireDrawRan = 0
  157|      0|                    ledDrawRan = 0
  158|      0|                    gyroDrawRan = 0
  159|      0|                    SCLAlertView().showInfo("抵抗器\nON")
  160|      0|                }
  161|      0|
  162|      0|            } else if cellValue == "ジャイロセンサ" {
  163|      0|                if gyroDrawRan == 1 {
  164|      0|                    gyroDrawRan = 0
  165|      0|                    SCLAlertView().showInfo("ジャイロセンサ\nOFF")
  166|      0|                } else if gyroDrawRan == 0 {
  167|      0|                    gyroDrawRan = 1
  168|      0|                    wireDrawRan = 0
  169|      0|                    ledDrawRan = 0
  170|      0|                    resistorDrawRan = 0
  171|      0|                    SCLAlertView().showInfo("ジャイロセンサ\nON")
  172|      0|                }
  173|      0|
  174|      0|            } else if cellValue == "サーバーに送信" {
  175|      0|                SCLAlertView().showInfo("サーバーに送信")
  176|      0|            } else if cellValue == "サーバーから取得" {
  177|      0|                SCLAlertView().showInfo("サーバーから取得")
  178|      0|            }
  179|      0|        }
  180|      0|    }
  181|       |
  182|      3|    func expandableTableView(_: ExpandableTableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
  183|      3|        switch indexPath.section {
  184|      3|        case 0:
  185|      3|            switch indexPath.row {
  186|      3|            case 0:
  187|      1|                //                guard let cell = expandableTableView.dequeueReusableCell(withIdentifier: ExpandableCell2.ID) else { return UITableViewCell() }
  188|      1|                //                return cell
  189|      1|                let titleCell0 = tableView.dequeueReusableCell(withIdentifier: ExpandableCell2.ID) as! ExpandableCell2
  190|      1|                titleCell0.sectionLabel.text = expandableTableViewHeader[0]
  191|      1|                return titleCell0
  192|      3|
  193|      3|            case 1:
  194|      1|                let titleCell1 = tableView.dequeueReusableCell(withIdentifier: ExpandableCell2.ID) as! ExpandableCell2
  195|      1|                titleCell1.sectionLabel.text = expandableTableViewHeader[1]
  196|      1|                return titleCell1
  197|      3|
  198|      3|            case 2:
  199|      1|                let titleCell2 = tableView.dequeueReusableCell(withIdentifier: ExpandableCell2.ID) as! ExpandableCell2
  200|      1|                titleCell2.sectionLabel.text = expandableTableViewHeader[2]
  201|      1|                return titleCell2
  202|      3|
  203|      3|            default:
  204|      0|                break
  205|      3|            }
  206|      3|
  207|      3|        default:
  208|      0|            break
  209|      3|        }
  210|      3|
  211|      3|        return UITableViewCell()
  212|      3|    }
  213|       |
  214|      3|    func expandableTableView(_: ExpandableTableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
  215|      3|        switch indexPath.section {
  216|      3|        case 0:
  217|      3|            switch indexPath.row {
  218|      3|            case 0, 1, 2, 3:
  219|      3|                return 66
  220|      3|
  221|      3|            default:
  222|      0|                break
  223|      3|            }
  224|      3|
  225|      3|        default:
  226|      0|            break
  227|      3|        }
  228|      3|
  229|      3|        return 66
  230|      3|    }
  231|       |
  232|      0|    func expandableTableView(_ expandableTableView: UITableView, didHighlightRowAt indexPath: IndexPath) {
  233|      0|        let cell = expandableTableView.cellForRow(at: indexPath)
  234|      0|        cell?.contentView.backgroundColor = #colorLiteral(red: 0.7176470588, green: 0.1098039216, blue: 0.1098039216, alpha: 1)
  235|      0|        cell?.backgroundColor = #colorLiteral(red: 0.7176470588, green: 0.1098039216, blue: 0.1098039216, alpha: 1)
  236|      0|    }
  237|       |
  238|      0|    func expandableTableView(_: UITableView, shouldHighlightRowAt _: IndexPath) -> Bool {
  239|      0|        return true
  240|      0|    }
  241|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/SplashViewController.swift:
    1|       |//
    2|       |//  SplashViewController.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/08/20.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |class SplashViewController: UIViewController {
   12|       |    @IBOutlet var splashImageView: UIImageView!
   13|      2|    override func viewDidLoad() {
   14|      2|        super.viewDidLoad()
   15|      2|
   16|      2|        // Do any additional setup after loading the view.
   17|      2|    }
   18|       |
   19|      2|    override func viewDidAppear(_ animated: Bool) {
   20|      2|        super.viewDidAppear(animated)
   21|      2|
   22|      2|        // Small 80%
   23|      2|        UIView.animate(withDuration: 0.3,
   24|      2|                       delay: 1.0,
   25|      2|                       options: UIView.AnimationOptions.curveEaseOut,
   26|      2|                       animations: { () in
   27|      2|                           self.splashImageView.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)
   28|      2|                       }, completion: { _ in
   29|      1|
   30|      1|        })
   31|      2|
   32|      2|        // × 8
   33|      2|        UIView.animate(withDuration: 0.2,
   34|      2|                       delay: 1.3,
   35|      2|                       options: UIView.AnimationOptions.curveEaseOut,
   36|      2|                       animations: { () in
   37|      2|                           self.splashImageView.transform = CGAffineTransform(scaleX: 8.0, y: 8.0)
   38|      2|                           self.splashImageView.alpha = 0
   39|      2|                       }, completion: { _ in
   40|      1|                           // Delete imageview
   41|      1|                           self.splashImageView.removeFromSuperview()
   42|      1|                           // sleep(1)
   43|      1|                           let storyboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
   44|      1|                           let nextView = storyboard.instantiateViewController(withIdentifier: "Main") as! ViewController
   45|      1|                           self.present(nextView, animated: false, completion: nil)
   46|      1|        })
   47|      2|    }
   48|       |
   49|      0|    override func didReceiveMemoryWarning() {
   50|      0|        super.didReceiveMemoryWarning()
   51|      0|        // Dispose of any resources that can be recreated.
   52|      0|    }
   53|       |
   54|       |    /*
   55|       |     // MARK: - Navigation
   56|       |
   57|       |     // In a storyboard-based application, you will often want to do a little preparation before navigation
   58|       |     override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
   59|       |     // Get the new view controller using segue.destinationViewController.
   60|       |     // Pass the selected object to the new view controller.
   61|       |     }
   62|       |     */
   63|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/ViewController.swift:
    1|       |//
    2|       |//  ViewController.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/06/04.
    6|       |//  Copyright © 2018 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import CoreMotion
   10|       |import ExpandableCell
   11|       |import Foundation
   12|       |import SCLAlertView
   13|       |import SwiftyBeaver
   14|       |import UIKit
   15|       |
   16|       |class ViewController: UIViewController {
   17|       |    private var tapLocation: CGPoint = CGPoint()
   18|       |    private var uiView = UIView()
   19|       |    private var arduino = true
   20|       |    // private var arduinoUnoView: ArduinoUnoView? = nil
   21|       |    var arduinoUnoPointControl12_9 = ArduinoUnoPointControl12_9()
   22|       |    var voltRetention = VoltRetention()
   23|       |
   24|       |    var wireCount = 0
   25|       |    var ledCount = 0
   26|       |    var resistorCount = 0
   27|       |    var gyroCount = 0
   28|       |    var pointInt = 0
   29|       |    var point = "nil"
   30|       |    // フラグ関係の変数
   31|       |    var flagDrawWire = 0
   32|       |    var flagDrawLed = 0
   33|       |    var flagDrawResistor = 0
   34|       |    var flagDrawGyro = 0
   35|       |    var flagBackBegin = 0
   36|       |
   37|       |    var repeatI = 0
   38|       |    var voltConnectNext = 0
   39|       |    var voltControlValue = 0
   40|       |    var voltValueBefore = 0
   41|       |    var voltConnectNumber = 0
   42|       |    var voltValue = 0
   43|       |    var voltLastValue = 0
   44|       |    var voltGyroRun = 0
   45|       |    var voltGyroInValue = 0
   46|       |    var voltGyroControlNumber = 0
   47|       |    var iVoltNumber = 0
   48|       |    var iLedDraw = 0
   49|       |    var iTest2 = 0
   50|       |    var voltLastNumber = 0
   51|       |    var iVoltDraw = 0
   52|       |    var iTest = 0
   53|       |    var motionManager: CMMotionManager!
   54|       |
   55|       |    /* その他の変数 */
   56|       |    //    var backLed = 0
   57|       |    //    var backRegistor = 0
   58|       |    //    var backWire = 0
   59|       |    //    var backJyro = 0
   60|       |
   61|       |    var backViewArray: Array<Int> = []
   62|       |    var ledLightupArrayX: [Double] = []
   63|       |    var ledLightupArrayY: [Double] = []
   64|       |    var voltDrawArrayX: [Double] = []
   65|       |    var voltDrawArrayY: [Double] = []
   66|       |    var testArray: [Int] = []
   67|       |
   68|       |    //    private var logoImageView: UIImageView!
   69|       |
   70|       |//    @IBOutlet runButton: CustomMenuButton!
   71|       |    @IBOutlet var compileButton: MaterialButton!
   72|       |    @IBOutlet var runButton: MaterialButton!
   73|       |    @IBOutlet var backButton: MaterialButton!
   74|       |    @IBOutlet var cleanButton: MaterialButton!
   75|       |    @IBOutlet var editButton: MaterialButton!
   76|       |    @IBOutlet var generateButton: MaterialButton!
   77|       |    //    @IBOutlet cleanButton: CustomMenuButton!
   78|       |//    @IBOutlet backButton: CustomMenuButton!
   79|       |//    @IBOutlet compileButton: CustomMenuButton!
   80|       |//    @IBOutlet editButton: CustomMenuButton!
   81|       |//    @IBOutlet generateButton: CustomMenuButton!
   82|       |    @IBOutlet var tableView: ExpandableTableView!
   83|       |    @IBOutlet var arduinoImageView: UIImageView!
   84|       |
   85|      0|    var cell: UITableViewCell {
   86|      0|        return tableView.dequeueReusableCell(withIdentifier: ExpandedCell.ID)!
   87|      0|    }
   88|       |
   89|       |    //    // CGRectMakeをwrap
   90|       |    //    func CGRectMake(_ x: Double, _ y: Double, _ width: Double, _ height: Double) -> CGRect {
   91|       |    //        return CGRect(x: x, y: y, width: width, height: height)
   92|       |    //    }
   93|       |
   94|      1|    override func viewDidLoad() {
   95|      1|        super.viewDidLoad()
   96|      1|        let deviceSize = judgeDevice(screenSizeHeight: Double(UIScreen.main.nativeBounds.height))
   97|      1|        SCLAlertView().showInfo("\(deviceSize)")
   98|      2|        log.info("viewDidLoad")
   99|      1|        tableView.expandableDelegate = self as ExpandableDelegate
  100|      1|        tableView.animation = .automatic
  101|      1|        tableView.register(UINib(nibName: "NormalCell", bundle: nil), forCellReuseIdentifier: NormalCell.ID)
  102|      1|        tableView.register(UINib(nibName: "ExpandedCell", bundle: nil), forCellReuseIdentifier: ExpandedCell.ID)
  103|      1|        tableView.register(UINib(nibName: "ExpandableCell", bundle: nil), forCellReuseIdentifier: ExpandableCell2.ID)
  104|      1|        // Delete Empty Cell separator
  105|      1|        tableView.tableFooterView = UIView(frame: .zero)
  106|      1|    }
  107|       |
  108|       |    // RUNボタンを押した場合
  109|      0|    @IBAction func runButtonAction(sender _: Any) {
  110|      0|        wireDrawRan = 0
  111|      0|        ledDrawRan = 0
  112|      0|        resistorDrawRan = 0
  113|      0|
  114|      0|        if naturalRan == 0 {
  115|      0|            naturalRan = 1
  116|      0|            // powerの接続を調べる
  117|      0|            while repeatI < 12 {
  118|      0|                voltRetention.pinNumber = 0
  119|      0|                voltConnectNext = voltRetention.voltPowerIn(repeatNumber: repeatI)
  120|      0|                voltControlValue = voltRetention.voltValue
  121|      0|                voltRetention.voltValueControl(pinNumber: voltConnectNext)
  122|      0|                voltValueBefore = voltRetention.voltValue
  123|      0|                repeat {
  124|      0|                    // 変数を戻す0
  125|      0|                    voltRetention.returnPinValue = 0
  126|      0|                    voltRetention.thirtyValue = 0
  127|      0|                    // 接続の行or列に接続があるかを調べる①
  128|      0|                    voltConnectNumber = voltRetention.voltSearchNearConnection(inPinValue: voltConnectNext, repeatNumber: repeatI)
  129|      0|                    // 接続があった場合
  130|      0|                    if voltRetention.returnPinValue != 0 {
  131|      0|                        // 接続があった場合に接続先を調べる②
  132|      0|                        voltConnectNext = voltRetention.voltConnection(inPinNumber: voltConnectNumber, repeatNumber: repeatI)
  133|      0|
  134|      0|                        /* gyroセンサのいろいろ */
  135|      0|                        /* [2],[3]がconnectedArrayの同じ中にあったら */
  136|      0|                        if partsDraw.gyroTranslatePointArray.count == 4 && gyroRan == 0 {
  137|      0|                            if voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[2]) != nil
  138|      0|                                && voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[3]) != nil {
  139|      0|                                if voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[2]) == voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  140|      0|                                    && voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[2]) > 3 {
  141|      0|                                    // ジャイロX値出力用ピンの管理
  142|      0|                                    if voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[1] + 30) == nil {
  143|      0|                                        voltRetention.voltConnectedArray[repeatI].append(partsDraw.gyroTranslatePointArray[1] + 30)
  144|      0|                                    }
  145|      0|                                    // ジャイロY値出力用ピンの管理
  146|      0|                                    if voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[2] + 30) == nil {
  147|      0|                                        voltRetention.voltConnectedArray[repeatI].append(partsDraw.gyroTranslatePointArray[2] + 30)
  148|      0|                                        voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  149|      0|                                    }
  150|      0|                                    // ジャイロZ値出力用ピンの管理
  151|      0|                                    if voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[3] + 30) == nil {
  152|      0|                                        voltRetention.voltConnectedArray[repeatI].append(partsDraw.gyroTranslatePointArray[3] + 30)
  153|      0|                                    }
  154|      0|                                    gyroRan = repeatI
  155|      0|                                }
  156|      0|                            }
  157|      0|                        }
  158|      0|
  159|      0|                        /* 抵抗器が接続されていた場合に電圧値を３下げる */
  160|      0|                        if partsDraw.resistorTranslatePointArray.firstIndex(of: voltConnectNumber) != nil {
  161|      0|                            voltRetention.voltValue = voltRetention.voltValue - 3
  162|      0|                        }
  163|      0|                        /* LEDがあった場合電圧値を１下げる */
  164|      0|                        if partsDraw.ledTranslatePointArray.firstIndex(of: voltConnectNumber) != nil {
  165|      0|                            voltRetention.voltValue = voltRetention.voltValue - 1
  166|      0|                        }
  167|      0|                        // 電圧値を配列に保存
  168|      0|                        if voltRetention.voltReturnValue(boardNumber: voltConnectNext) < voltRetention.voltValue {
  169|      0|                            voltRetention.voltValueControl(pinNumber: voltConnectNext)
  170|      0|                        }
  171|      0|
  172|      0|                        // 接続がなかった場合
  173|      0|                    } else {
  174|      0|                        if voltConnectNext != 0 {
  175|      0|                            iVoltNumber = voltRetention.voltConnectedArray[repeatI].firstIndex(of: voltConnectNext)!
  176|      0|                            iVoltNumber -= 1
  177|      0|                            voltConnectNext = voltRetention.voltConnectedArray[repeatI][iVoltNumber]
  178|      0|                            // 電圧値をもとに戻す
  179|      0|                            if voltRetention.voltValue != voltRetention.voltReturnValue(boardNumber: voltRetention.voltConnectedArray[repeatI][iVoltNumber]) {
  180|      0|                                voltRetention.voltValue = voltRetention.voltReturnValue(boardNumber: voltRetention.voltConnectedArray[repeatI][iVoltNumber])
  181|      0|                            }
  182|      0|                        } else {
  183|      0|                            voltConnectNext = voltRetention.voltConnectedArray[repeatI][0]
  184|      0|                        }
  185|      0|                    }
  186|      0|                } while voltConnectNext != voltRetention.voltConnectedArray[repeatI][0]
  187|      0|                voltRetention.flagPowerIn = 0
  188|      0|                repeatI += 1
  189|      0|            }
  190|      0|            // 各出力ピンのためのfor文の終わり
  191|      0|
  192|      0|            if gyroRan != 0 {
  193|      0|                // 電圧の管理
  194|      0|                voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  195|      0|                voltRetention.voltValue = voltGyroInValue / 5
  196|      0|                voltRetention.voltValueControl(pinNumber: partsDraw.gyroTranslatePointArray[3] + 30)
  197|      0|
  198|      0|                voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  199|      0|                voltRetention.voltValue = voltGyroInValue / 5
  200|      0|                voltRetention.voltValueControl(pinNumber: partsDraw.gyroTranslatePointArray[1] + 30)
  201|      0|
  202|      0|                voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  203|      0|                voltRetention.voltValue = voltGyroInValue / 5
  204|      0|                voltRetention.voltValueControl(pinNumber: partsDraw.gyroTranslatePointArray[2] + 30)
  205|      0|            }
  206|      0|            if gyroRan != 0 {
  207|      0|                for i in 0 ..< 3 {
  208|      0|                    /* 各値出力ピンがアナログ入力ピンに接続されているかを調べる */
  209|      0|                    for j in 1 ..< 4 {
  210|      0|                        /* 各センサー値出力用ピンがそのままAnalog入力ピンに繋がっているかを調べる */
  211|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: partsDraw.gyroTranslatePointArray[j] + 60) != nil
  212|      0|                            && partsDraw.wireTranslatePointArray.firstIndex(of: voltRetention.voltInPinArray[i]) != nil {
  213|      0|                            voltGyroRun += 1
  214|      0|                        } else if partsDraw.wireTranslatePointArray.firstIndex(of: partsDraw.gyroTranslatePointArray[j] + 90) != nil
  215|      0|                            && partsDraw.wireTranslatePointArray.firstIndex(of: voltRetention.voltInPinArray[i]) != nil {
  216|      0|                            voltGyroRun += 1
  217|      0|                        } else if partsDraw.wireTranslatePointArray.firstIndex(of: partsDraw.gyroTranslatePointArray[j] + 120) != nil
  218|      0|                            && partsDraw.wireTranslatePointArray.firstIndex(of: voltRetention.voltInPinArray[i]) != nil {
  219|      0|                            voltGyroRun += 1
  220|      0|                        } else if partsDraw.wireTranslatePointArray.firstIndex(of: partsDraw.gyroTranslatePointArray[j] + 150) != nil
  221|      0|                            && partsDraw.wireTranslatePointArray.firstIndex(of: voltRetention.voltInPinArray[i]) != nil {
  222|      0|                            voltGyroRun += 1
  223|      0|                        }
  224|      0|                    }
  225|      0|                    /* GND接続のピンが出ないから直接指定 */
  226|      0|                    /* ジャイロセンサ出力部の電圧を取得 */
  227|      0|                    voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  228|      0|                    /* GND出力部分の電圧を入れる場所を取得 */
  229|      0|                    voltGyroControlNumber = voltRetention.voltControlNumberBack(boardNumber: partsDraw.gyroTranslatePointArray[1])
  230|      0|                    voltRetention.voltControlArray[voltGyroControlNumber] = voltGyroInValue / 5
  231|      0|                }
  232|      0|            }
  233|      0|
  234|      0|//            // 3Vより大きい電圧値が入力ピンに送られた場合
  235|      0|//            for i in 0..<12 {
  236|      0|//                if 406...407 ~= voltRetention.voltConnectedArray[i].last!
  237|      0|//                    || 412...418 ~= voltRetention.voltConnectedArray[i].last!
  238|      0|//                    || 425...432 ~= voltRetention.voltConnectedArray[i].last! {
  239|      0|//                    voltLastNumber = voltRetention.voltConnectedArray[i][(voltRetention.voltConnectedArray[i].count)-2]
  240|      0|//                    voltLastValue = voltRetention.voltReturnValue(boardNumber: voltLastNumber)
  241|      0|//                    if voltLastNumber > 3 && partsDraw.resistorTranslatePointArray.index(of: voltLastNumber) == nil || voltLastValue >= 7 {
  242|      0|//                        // 破損の描画
  243|      0|//                        arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: voltRetention.voltConnectedArray[i][voltRetention.voltConnectedArray[i].count-1])
  244|      0|//                        let dangerDraw = DangerDraw.init(frame: CGRect.init(x: 0, y: 0,
  245|      0|//                                                                            width: arduinoImageView.bounds.width,
  246|      0|//                                                                            height: arduinoImageView.bounds.height))
  247|      0|//                        dangerDraw.isOpaque = false
  248|      0|//                        dangerDraw.intoBoardPoint(startX: arduinoUnoPointControl12_9.coordinateNumberX-10,
  249|      0|//                                                  startY: arduinoUnoPointControl12_9.coordinateNumberY-10)
  250|      0|//                        self.view.addSubview(dangerDraw)
  251|      0|//                    }
  252|      0|//                }
  253|      0|//            }
  254|      0|
  255|      0|            // アナログピン（入力）に全て接続があったら
  256|      0|            if voltGyroRun > 9 {
  257|      0|                var testFlag = 0
  258|      0|
  259|      0|                motionManager = CMMotionManager()
  260|      0|                // 更新周期の設定
  261|      0|                motionManager.accelerometerUpdateInterval = 0.8
  262|      0|                // 加速度の取得開始
  263|      0|                motionManager.startAccelerometerUpdates(to: OperationQueue.current!,
  264|      0|                                                        withHandler: { (accelData: CMAccelerometerData?, _: Error?) in
  265|      0|                                                            if testFlag == 0 {
  266|      0|                                                                let accel: CMAcceleration = accelData!.acceleration
  267|      0|                                                                print("x: \(accel.x)")
  268|      0|                                                                print("y: \(accel.y)")
  269|      0|                                                                print("z: \(accel.z)")
  270|      0|                                                                testFlag = 1
  271|      0|                                                            }
  272|      0|                })
  273|      0|            }
  274|      0|
  275|      0|            if gyroRan > 0 {
  276|      0|                // 入力に5V以上入ってきた場合
  277|      0|                if voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3]) > 5 {
  278|      0|                    for i in 2 ..< 4 {
  279|      0|                        arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: partsDraw.gyroTranslatePointArray[i])
  280|      0|                        // 危険箇所のハイライト
  281|      0|                        let dangerDraw = DangerDraw(frame: CGRect(x: 0, y: 0,
  282|      0|                                                                  width: arduinoImageView.bounds.width,
  283|      0|                                                                  height: arduinoImageView.bounds.height))
  284|      0|                        dangerDraw.isOpaque = false
  285|      0|                        dangerDraw.intoBoardPoint(startX: arduinoUnoPointControl12_9.coordinateNumberX - 20,
  286|      0|                                                  startY: arduinoUnoPointControl12_9.coordinateNumberY - 10)
  287|      0|                        view.addSubview(dangerDraw)
  288|      0|                    }
  289|      0|                }
  290|      0|            }
  291|      0|
  292|      0|            // LED破損の危険性を知らせる＆&LEDの透過
  293|      0|            if partsDraw.ledTranslatePointArray.count > 1 {
  294|      0|                // LEDの描画分回す
  295|      0|                for _ in 0 ..< partsDraw.ledTranslatePointArray.count / 2 {
  296|      0|                    // LED前後の電圧を調べる
  297|      0|                    if voltRetention.voltReturnValue(boardNumber: partsDraw.ledTranslatePointArray[iLedDraw]) > 0
  298|      0|                        || voltRetention.voltReturnValue(boardNumber: partsDraw.ledTranslatePointArray[iLedDraw + 1]) > 0 {
  299|      0|                        // 1つ目の要素を座標を変換
  300|      0|                        arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: partsDraw.ledTranslatePointArray[iLedDraw])
  301|      0|                        ledLightupArrayX.append(arduinoUnoPointControl12_9.coordinateNumberX)
  302|      0|                        ledLightupArrayY.append(arduinoUnoPointControl12_9.coordinateNumberY)
  303|      0|                        // 2つ目の要素を座標を変換
  304|      0|                        arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: partsDraw.ledTranslatePointArray[iLedDraw + 1])
  305|      0|                        ledLightupArrayX.append(arduinoUnoPointControl12_9.coordinateNumberX)
  306|      0|                        ledLightupArrayY.append(arduinoUnoPointControl12_9.coordinateNumberY)
  307|      0|                        // LEDの点灯
  308|      0|                        let ledLightUpDraw = LedLightupDraw(frame: CGRect(x: 0, y: 0,
  309|      0|                                                                          width: arduinoImageView.bounds.width,
  310|      0|                                                                          height: arduinoImageView.bounds.height))
  311|      0|                        ledLightUpDraw.isOpaque = false
  312|      0|                        ledLightUpDraw.backgroundColor = UIColor.clear
  313|      0|                        ledLightUpDraw.intoBoardPoint(startX: ledLightupArrayX[iLedDraw],
  314|      0|                                                      startY: ledLightupArrayY[iLedDraw],
  315|      0|                                                      endX: ledLightupArrayX[iLedDraw + 1],
  316|      0|                                                      endY: ledLightupArrayY[iLedDraw + 1])
  317|      0|                        view.addSubview(ledLightUpDraw)
  318|      0|                        // 入力値が3Vより大きい場合破損の危険性があるのでハイライト
  319|      0|                        if voltRetention.voltReturnValue(boardNumber: partsDraw.ledTranslatePointArray[iLedDraw]) > 3
  320|      0|                            && voltRetention.voltReturnValue(boardNumber: partsDraw.ledTranslatePointArray[iLedDraw + 1]) < voltRetention.voltReturnValue(boardNumber: partsDraw.ledTranslatePointArray[iLedDraw]) {
  321|      0|                            let dangerDraw = DangerDraw(frame: CGRect(x: 0, y: 0,
  322|      0|                                                                      width: arduinoImageView.bounds.width,
  323|      0|                                                                      height: arduinoImageView.bounds.height))
  324|      0|                            dangerDraw.isOpaque = false
  325|      0|                            dangerDraw.intoBoardPoint(startX: ledLightupArrayX[iLedDraw + 1] - 15,
  326|      0|                                                      startY: ledLightupArrayY[iLedDraw + 1] - 10)
  327|      0|                            view.addSubview(dangerDraw)
  328|      0|                        }
  329|      0|                        // 入力電圧が大きい場合破損の危険性があるのでハイライトPART2
  330|      0|                        if voltRetention.voltReturnValue(boardNumber: partsDraw.ledTranslatePointArray[iLedDraw + 1]) > 3
  331|      0|                            && voltRetention.voltReturnValue(boardNumber: partsDraw.ledTranslatePointArray[iLedDraw]) < voltRetention.voltReturnValue(boardNumber: partsDraw.ledTranslatePointArray[iLedDraw + 1]) {
  332|      0|                            let dangerDraw = DangerDraw(frame: CGRect(x: 0, y: 0,
  333|      0|                                                                      width: arduinoImageView.bounds.width,
  334|      0|                                                                      height: arduinoImageView.bounds.height))
  335|      0|                            dangerDraw.isOpaque = false
  336|      0|                            dangerDraw.intoBoardPoint(startX: ledLightupArrayX[iLedDraw + 1] - 10,
  337|      0|                                                      startY: ledLightupArrayY[iLedDraw + 1] - 10)
  338|      0|                            view.addSubview(dangerDraw)
  339|      0|                        }
  340|      0|                    }
  341|      0|                    iLedDraw += 2
  342|      0|                }
  343|      0|            }
  344|      0|        } else {
  345|      0|            naturalRan = 0
  346|      0|            // 危険箇所表示の削除
  347|      0|            view.subviews.forEach {
  348|      0|                if $0 is DangerDraw {
  349|      0|                    $0.removeFromSuperview()
  350|      0|                }
  351|      0|                if $0 is LedLightupDraw {
  352|      0|                    $0.removeFromSuperview()
  353|      0|                }
  354|      0|            }
  355|      0|            testArray = []
  356|      0|            iTest2 = 0
  357|      0|            voltRetention = VoltRetention()
  358|      0|            ledLightupArrayX.removeAll()
  359|      0|            ledLightupArrayY.removeAll()
  360|      0|            voltConnectNumber = 0
  361|      0|            voltConnectNext = 0
  362|      0|            voltControlValue = 0
  363|      0|            voltValueBefore = 0
  364|      0|            voltValue = 0
  365|      0|
  366|      0|            voltLastNumber = 0
  367|      0|            voltLastValue = 0
  368|      0|            repeatI = 0
  369|      0|            iLedDraw = 0
  370|      0|            gyroRan = 0
  371|      0|            voltGyroInValue = 0
  372|      0|        }
  373|      0|    }
  374|       |
  375|       |    // MARK: - クリーンボタン -
  376|       |
  377|      0|    @IBAction func cleanButtonAction(sender _: Any) {
  378|      0|        //  partsDraw.ledGetPointXArray = []
  379|      0|        partsDraw = PartsDraw()
  380|      0|        voltRetention = VoltRetention()
  381|      0|        backViewArray = []
  382|      0|        wireCount = 0
  383|      0|        ledCount = 0
  384|      0|        resistorCount = 0
  385|      0|        gyroCount = 0
  386|      0|        wireDrawRan = 0
  387|      0|        ledDrawRan = 0
  388|      0|        resistorDrawRan = 0
  389|      0|        testArray = []
  390|      0|        iTest2 = 0
  391|      0|        ledLightupArrayX.removeAll()
  392|      0|        ledLightupArrayY.removeAll()
  393|      0|        flagDrawGyro = 0
  394|      0|        voltConnectNumber = 0
  395|      0|        voltConnectNext = 0
  396|      0|        voltControlValue = 0
  397|      0|        voltValueBefore = 0
  398|      0|        voltValue = 0
  399|      0|        voltLastValue = 0
  400|      0|        voltLastNumber = 0
  401|      0|        repeatI = 0
  402|      0|        gyroRan = 0
  403|      0|        voltGyroInValue = 0
  404|      0|        /* viewの管理 */
  405|      0|        view.subviews.forEach {
  406|      0|            if $0 is LineDraw {
  407|      0|                $0.removeFromSuperview()
  408|      0|            }
  409|      0|            if $0 is LedDraw {
  410|      0|                $0.removeFromSuperview()
  411|      0|            }
  412|      0|            if $0 is ResitorDraw {
  413|      0|                $0.removeFromSuperview()
  414|      0|            }
  415|      0|            if $0 is GyroDraw {
  416|      0|                $0.removeFromSuperview()
  417|      0|            }
  418|      0|            // RUN実行時のview
  419|      0|            if $0 is LedLightupDraw {
  420|      0|                $0.removeFromSuperview()
  421|      0|            }
  422|      0|            if $0 is DangerDraw {
  423|      0|                $0.removeFromSuperview()
  424|      0|            }
  425|      0|            // 選択中のマーク削除
  426|      0|            if $0 is SelectedCircle {
  427|      0|                $0.removeFromSuperview()
  428|      0|            }
  429|      0|        }
  430|      0|    }
  431|       |
  432|       |    // バックボタンを押した場合
  433|      0|    @IBAction func backButtonAction(sender _: Any) {
  434|      0|        if backViewArray.count > 0 {
  435|      0|            flagBackBegin = 1
  436|      0|            /* LEDが消える場合 */
  437|      0|            if backViewArray.last == 2 && flagBackBegin == 1 && backViewArray.count > 0 {
  438|      0|                partsDraw.ledGetPointXArray.removeLast(2)
  439|      0|                partsDraw.ledGetPointYArray.removeLast(2)
  440|      0|                partsDraw.ledTranslatePointArray.removeLast(2)
  441|      0|                partsDraw.ledNumber -= 2
  442|      0|                ledCount = 0
  443|      0|
  444|      0|                /* Viewの削除 */
  445|      0|                view.subviews.forEach {
  446|      0|                    if $0 is LedDraw {
  447|      0|                        $0.removeFromSuperview()
  448|      0|                    }
  449|      0|                }
  450|      0|                /* Viewの再描画 */
  451|      0|                for _ in 0 ..< partsDraw.ledNumber / 2 {
  452|      0|                    let ledDraw = LedDraw(frame: CGRect(x: 0, y: 0,
  453|      0|                                                        width: arduinoImageView.bounds.width,
  454|      0|                                                        height: arduinoImageView.bounds.height))
  455|      0|                    ledDraw.isOpaque = false
  456|      0|                    ledDraw.backgroundColor = UIColor.clear
  457|      0|                    ledDraw.intoBoardPoint(startX: partsDraw.ledGetPointXArray[ledCount],
  458|      0|                                           startY: partsDraw.ledGetPointYArray[ledCount],
  459|      0|                                           endX: partsDraw.ledGetPointXArray[ledCount + 1],
  460|      0|                                           endY: partsDraw.ledGetPointYArray[ledCount + 1])
  461|      0|                    ledCount += 2
  462|      0|                    view.addSubview(ledDraw)
  463|      0|                }
  464|      0|                backViewArray.removeLast()
  465|      0|                flagBackBegin = 0
  466|      0|            }
  467|      0|
  468|      0|            /* 抵抗器が消える場合 */
  469|      0|            if backViewArray.last == 3 && flagBackBegin == 1 && backViewArray.count > 0 {
  470|      0|                partsDraw.resistorGetPointXArray.removeLast(2)
  471|      0|                partsDraw.resistorGetPointYArray.removeLast(2)
  472|      0|                partsDraw.resistorTranslatePointArray.removeLast(2)
  473|      0|                partsDraw.resistorNumber -= 2
  474|      0|                resistorCount = 0
  475|      0|                /* viewの削除 */
  476|      0|                view.subviews.forEach {
  477|      0|                    if $0 is ResitorDraw {
  478|      0|                        $0.removeFromSuperview()
  479|      0|                    }
  480|      0|                }
  481|      0|                /* viewの再描画 */
  482|      0|                for _ in 0 ..< partsDraw.resistorNumber / 2 {
  483|      0|                    let resistorDraw = ResitorDraw(frame: CGRect(x: 0, y: 0,
  484|      0|                                                                 width: arduinoImageView.bounds.width,
  485|      0|                                                                 height: arduinoImageView.bounds.height))
  486|      0|                    resistorDraw.isOpaque = false
  487|      0|                    resistorDraw.backgroundColor = UIColor.clear
  488|      0|                    resistorDraw.intoBoardPoint(startX: partsDraw.resistorGetPointXArray[resistorCount],
  489|      0|                                                startY: partsDraw.resistorGetPointYArray[resistorCount],
  490|      0|                                                endX: partsDraw.resistorGetPointXArray[resistorCount + 1],
  491|      0|                                                endY: partsDraw.resistorGetPointYArray[resistorCount + 1])
  492|      0|                    resistorCount += 2
  493|      0|                    view.addSubview(resistorDraw)
  494|      0|                }
  495|      0|                backViewArray.removeLast()
  496|      0|                flagBackBegin = 0
  497|      0|            }
  498|      0|            /* ジャイロセンサが消える場合 */
  499|      0|            if backViewArray.last == 4 && flagBackBegin == 1 && backViewArray.count > 0 {
  500|      0|                partsDraw.gyroGetPointXArray.removeLast(4)
  501|      0|                partsDraw.gyroGetPointYArray.removeLast(4)
  502|      0|                partsDraw.gyroTranslatePointArray.removeLast(4)
  503|      0|                partsDraw.gyroNumber -= 4
  504|      0|                gyroCount = 0
  505|      0|                /* viewの削除 */
  506|      0|                view.subviews.forEach {
  507|      0|                    if $0 is GyroDraw {
  508|      0|                        $0.removeFromSuperview()
  509|      0|                    }
  510|      0|                }
  511|      0|                for _ in 0 ..< partsDraw.gyroNumber / 4 {
  512|      0|                    let gyroDraw = GyroDraw(frame: CGRect(x: 0, y: 0,
  513|      0|                                                          width: arduinoImageView.bounds.width,
  514|      0|                                                          height: arduinoImageView.bounds.height))
  515|      0|                    gyroDraw.isOpaque = false
  516|      0|                    gyroDraw.backgroundColor = UIColor.clear
  517|      0|                    gyroDraw.intoBoardPoint(x1: partsDraw.gyroGetPointXArray[gyroCount], y1: partsDraw.gyroGetPointYArray[gyroCount],
  518|      0|                                            x2: partsDraw.gyroGetPointXArray[gyroCount + 1], y2: partsDraw.gyroGetPointYArray[gyroCount + 1],
  519|      0|                                            x3: partsDraw.gyroGetPointXArray[gyroCount + 2], y3: partsDraw.gyroGetPointYArray[gyroCount + 2],
  520|      0|                                            x4: partsDraw.gyroGetPointXArray[gyroCount + 3], y4: partsDraw.gyroGetPointYArray[gyroCount + 3])
  521|      0|                    gyroCount += 4
  522|      0|                    view.addSubview(gyroDraw)
  523|      0|                }
  524|      0|                backViewArray.removeLast()
  525|      0|                flagBackBegin = 0
  526|      0|            }
  527|      0|
  528|      0|            /* ジャンパワイヤが消える場合 */
  529|      0|            if backViewArray.last == 1 && flagBackBegin == 1 && backViewArray.count > 0 {
  530|      0|                partsDraw.wireGetPointXArray.removeLast(2)
  531|      0|                partsDraw.wireGetPointYArray.removeLast(2)
  532|      0|                partsDraw.wireTranslatePointArray.removeLast(2)
  533|      0|                partsDraw.jumperNumber -= 2
  534|      0|                wireCount = 0
  535|      0|                /* Viewの削除 */
  536|      0|                view.subviews.forEach {
  537|      0|                    if $0 is LineDraw {
  538|      0|                        $0.removeFromSuperview()
  539|      0|                    }
  540|      0|                }
  541|      0|                /* Viewの再描画 */
  542|      0|                for _ in 0 ..< partsDraw.jumperNumber / 2 {
  543|      0|                    let lineDraw = LineDraw(frame: CGRect(x: 0, y: 0,
  544|      0|                                                          width: arduinoImageView.bounds.width,
  545|      0|                                                          height: arduinoImageView.bounds.height))
  546|      0|                    lineDraw.isOpaque = false
  547|      0|                    lineDraw.backgroundColor = UIColor.clear
  548|      0|                    lineDraw.intoBoardPoint(startX: partsDraw.wireGetPointXArray[wireCount],
  549|      0|                                            startY: partsDraw.wireGetPointYArray[wireCount],
  550|      0|                                            endX: partsDraw.wireGetPointXArray[wireCount + 1],
  551|      0|                                            endY: partsDraw.wireGetPointYArray[wireCount + 1])
  552|      0|                    wireCount += 2
  553|      0|                    view.addSubview(lineDraw)
  554|      0|                }
  555|      0|                backViewArray.removeLast()
  556|      0|                flagBackBegin = 0
  557|      0|            }
  558|      0|            wireDrawRan = 0
  559|      0|            ledDrawRan = 0
  560|      0|        }
  561|      0|    }
  562|       |
  563|       |    // とりあえずVOLT RUNにしとく
  564|      0|    @IBAction func compileButtonAction(sender _: Any) {
  565|      0|        wireDrawRan = 0
  566|      0|        ledDrawRan = 0
  567|      0|        resistorDrawRan = 0
  568|      0|//        gyroDrawRan = 0
  569|      0|        view.subviews.forEach {
  570|      0|            if $0 is SelectedCircle {
  571|      0|                $0.removeFromSuperview()
  572|      0|            }
  573|      0|        }
  574|      0|
  575|      0|        if runRan == 0 {
  576|      0|            runRan = 1
  577|      0|            // powerの接続を調べる
  578|      0|            while repeatI < 12 {
  579|      0|                voltRetention.pinNumber = 0
  580|      0|                voltConnectNext = voltRetention.voltPowerIn(repeatNumber: repeatI)
  581|      0|                voltControlValue = voltRetention.voltValue
  582|      0|                voltRetention.voltValueControl(pinNumber: voltConnectNext)
  583|      0|                voltValueBefore = voltRetention.voltValue
  584|      0|                repeat {
  585|      0|                    // 変数を戻す0
  586|      0|                    voltRetention.returnPinValue = 0
  587|      0|                    voltRetention.thirtyValue = 0
  588|      0|                    // 接続の行or列に接続があるか調べる1
  589|      0|                    voltConnectNumber = voltRetention.voltSearchNearConnection(inPinValue: voltConnectNext, repeatNumber: repeatI)
  590|      0|                    // 接続があった場合
  591|      0|                    if voltRetention.returnPinValue != 0 {
  592|      0|                        // 接続があった場合に接続先を調べる2
  593|      0|                        voltConnectNext = voltRetention.voltConnection(inPinNumber: voltConnectNumber,
  594|      0|                                                                       repeatNumber: repeatI)
  595|      0|                        // gyroセンサの色々
  596|      0|                        // [2]，[3]がconnectedArrayの同じ中にあったら
  597|      0|                        if partsDraw.gyroTranslatePointArray.count == 4 && gyroRan == 0 {
  598|      0|                            if voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[2]) != nil
  599|      0|                                && voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[3]) != nil {
  600|      0|                                // ジャイロセンサのVDDピン，PSDピンの値が同じ値であり，かつ5V以下なら実行
  601|      0|                                if voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[2]) == voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  602|      0|                                    && voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[2]) > 3 {
  603|      0|                                    // ジャイロX値出力用ピンの管理
  604|      0|                                    if voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[1] + 30) == nil {
  605|      0|                                        // ジャイロX値の出力ピンをconnectedArrayに追加
  606|      0|                                        voltRetention.voltConnectedArray[repeatI].append(partsDraw.gyroTranslatePointArray[1] + 30)
  607|      0|                                    }
  608|      0|
  609|      0|                                    // ジャイロY値出力用ピンの管理
  610|      0|                                    if voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[2] + 30) == nil {
  611|      0|                                        // ジャイロY値の出力ピンをconnectedArrayに追加
  612|      0|                                        voltRetention.voltConnectedArray[repeatI].append(partsDraw.gyroTranslatePointArray[2] + 30)
  613|      0|                                        voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  614|      0|                                    }
  615|      0|
  616|      0|                                    // ジャイロZ値出力用ピンの管理
  617|      0|                                    if voltRetention.voltConnectedArray[repeatI].firstIndex(of: partsDraw.gyroTranslatePointArray[3] + 30) == nil {
  618|      0|                                        /* ジャイロZ値の出力ピンをconnectedArrayに追加 */
  619|      0|                                        voltRetention.voltConnectedArray[repeatI].append(partsDraw.gyroTranslatePointArray[3] + 30)
  620|      0|                                    }
  621|      0|                                    // ２回目はいらないように
  622|      0|                                    gyroRan = 1
  623|      0|                                }
  624|      0|                            }
  625|      0|                        }
  626|      0|                        /* 抵抗器があった場合に電圧値の値を3下げる */
  627|      0|                        if partsDraw.resistorTranslatePointArray.firstIndex(of: voltConnectNumber) != nil {
  628|      0|                            voltRetention.voltValue -= 3
  629|      0|                        }
  630|      0|                        /* LEDがあった場合に電圧値の値を1下げる */
  631|      0|                        if partsDraw.ledTranslatePointArray.firstIndex(of: voltConnectNumber) != nil {
  632|      0|                            voltRetention.voltValue -= 1
  633|      0|                        }
  634|      0|                        /* 電圧の値を配列に保存 */
  635|      0|                        if voltRetention.voltReturnValue(boardNumber: voltConnectNext) < voltRetention.voltValue {
  636|      0|                            voltRetention.voltValueControl(pinNumber: voltConnectNext)
  637|      0|                        }
  638|      0|
  639|      0|                        /* 接続がなかった場合 */
  640|      0|                    } else {
  641|      0|                        if voltConnectNext != 0 {
  642|      0|                            iVoltNumber = voltRetention.voltConnectedArray[repeatI].firstIndex(of: voltConnectNext)!
  643|      0|                            iVoltNumber -= 1
  644|      0|                            voltConnectNext = voltRetention.voltConnectedArray[repeatI][iVoltNumber]
  645|      0|                            // 電圧値をもとに戻す
  646|      0|                            if voltRetention.voltValue != voltRetention.voltReturnValue(boardNumber: voltRetention.voltConnectedArray[repeatI][iVoltNumber]) {
  647|      0|                                voltRetention.voltValue = voltRetention.voltReturnValue(boardNumber: voltRetention.voltConnectedArray[repeatI][iVoltNumber])
  648|      0|                            }
  649|      0|                        } else {
  650|      0|                            voltConnectNext = voltRetention.voltConnectedArray[repeatI][0]
  651|      0|                        }
  652|      0|                    }
  653|      0|                } while voltConnectNext != voltRetention.voltConnectedArray[repeatI][0]
  654|      0|                voltRetention.flagPowerIn = 0
  655|      0|                repeatI += 1
  656|      0|            } // 各出力ピンのためのwhile文終わり
  657|      0|
  658|      0|            /* 破損の可能性があるピンを調べ出す */
  659|      0|            /* 入力ピン同士で繋がっていた場合 */
  660|      0|            for i in 0 ..< 12 {
  661|      0|                for j in 0 ..< 12 {
  662|      0|                    /* conectedArrayの中に出力ピンのどれかのナンバーがあればtrue */
  663|      0|                    if voltRetention.voltConnectedArray[i].firstIndex(of: voltRetention.voltConnectedArray[j][0]) != nil {
  664|      0|                        /* conectedArrayの中に見つかった出力ピンのナンバーが0番目以外であればtrue */
  665|      0|                        if voltRetention.voltConnectedArray[i].firstIndex(of: voltRetention.voltConnectedArray[j][0]) != 0 {
  666|      0|                            arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: voltRetention.voltConnectedArray[j][0])
  667|      0|                            let dangerDraw = DangerDraw(frame: CGRect(x: 0, y: 0,
  668|      0|                                                                      width: arduinoImageView.bounds.width,
  669|      0|                                                                      height: arduinoImageView.bounds.height))
  670|      0|                            dangerDraw.isOpaque = false
  671|      0|                            dangerDraw.intoBoardPoint(startX: arduinoUnoPointControl12_9.coordinateNumberX - 10,
  672|      0|                                                      startY: arduinoUnoPointControl12_9.coordinateNumberY - 10)
  673|      0|                            view.addSubview(dangerDraw)
  674|      0|                        }
  675|      0|                    }
  676|      0|                }
  677|      0|            }
  678|      0|
  679|      0|            if gyroRan != 0 {
  680|      0|                // 電圧の管理
  681|      0|                voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  682|      0|                voltRetention.voltValue = voltGyroInValue / 5
  683|      0|                voltRetention.voltValueControl(pinNumber: partsDraw.gyroTranslatePointArray[3] + 30)
  684|      0|
  685|      0|                voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  686|      0|                voltRetention.voltValue = voltGyroInValue / 5
  687|      0|                voltRetention.voltValueControl(pinNumber: partsDraw.gyroTranslatePointArray[1] + 30)
  688|      0|
  689|      0|                voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  690|      0|                voltRetention.voltValue = voltGyroInValue / 5
  691|      0|                voltRetention.voltValueControl(pinNumber: partsDraw.gyroTranslatePointArray[2] + 30)
  692|      0|
  693|      0|                for i in 0 ..< 3 {
  694|      0|                    // 各出力ピンがアナログ入力ピンに接続されているかを調べる
  695|      0|                    for j in 1 ..< 4 {
  696|      0|                        if partsDraw.wireTranslatePointArray.firstIndex(of: partsDraw.gyroTranslatePointArray[j] + 60) != nil
  697|      0|                            && partsDraw.wireTranslatePointArray.firstIndex(of: voltRetention.voltInPinArray[i]) != nil {
  698|      0|                            voltGyroRun += 1
  699|      0|                        } else if partsDraw.wireTranslatePointArray.firstIndex(of: partsDraw.gyroTranslatePointArray[j] + 90) != nil
  700|      0|                            && partsDraw.wireTranslatePointArray.firstIndex(of: voltRetention.voltInPinArray[i]) != nil {
  701|      0|                            voltGyroRun += 1
  702|      0|                        } else if partsDraw.wireTranslatePointArray.firstIndex(of: partsDraw.gyroTranslatePointArray[j] + 120) != nil
  703|      0|                            && partsDraw.wireTranslatePointArray.firstIndex(of: voltRetention.voltInPinArray[i]) != nil {
  704|      0|                            voltGyroRun += 1
  705|      0|                        } else if partsDraw.wireTranslatePointArray.firstIndex(of: partsDraw.gyroTranslatePointArray[j] + 150) != nil
  706|      0|                            && partsDraw.wireTranslatePointArray.firstIndex(of: voltRetention.voltInPinArray[i]) != nil {
  707|      0|                            voltGyroRun += 1
  708|      0|                        }
  709|      0|                    }
  710|      0|                    /* GND接続のピンが出ないから直接指定 */
  711|      0|                    // ジャイロセンサ出力部の電圧を取得
  712|      0|                    voltGyroInValue = voltRetention.voltReturnValue(boardNumber: partsDraw.gyroTranslatePointArray[3])
  713|      0|                    // GND出力部の電圧を入れる場所を取得
  714|      0|                    voltGyroControlNumber = voltRetention.voltControlNumberBack(boardNumber: partsDraw.gyroTranslatePointArray[1])
  715|      0|                    voltRetention.voltControlArray[voltGyroControlNumber] = voltGyroInValue / 5
  716|      0|                }
  717|      0|            }
  718|      0|            // 3Vより大きい電圧値が入力ピンに送られた場合
  719|      0|            for iSearch in 0 ..< 12 {
  720|      0|                if 406 ... 407 ~= voltRetention.voltConnectedArray[iSearch].last!
  721|      0|                    || 412 ... 418 ~= voltRetention.voltConnectedArray[iSearch].last!
  722|      0|                    || 425 ... 432 ~= voltRetention.voltConnectedArray[iSearch].last! {
  723|      0|                    voltLastNumber = voltRetention.voltConnectedArray[iSearch][(voltRetention.voltConnectedArray[iSearch].count) - 2]
  724|      0|                    voltLastValue = voltRetention.voltReturnValue(boardNumber: voltLastNumber)
  725|      0|
  726|      0|                    if voltLastValue > 3 && partsDraw.resistorTranslatePointArray.firstIndex(of: voltLastNumber) == nil || voltLastValue >= 7 {
  727|      0|                        // 破損の描画
  728|      0|                        arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: voltRetention.voltConnectedArray[iSearch][voltRetention.voltConnectedArray[iSearch].count - 1])
  729|      0|                        let dangerDraw = DangerDraw(frame: CGRect(x: 0, y: 0,
  730|      0|                                                                  width: arduinoImageView.bounds.width,
  731|      0|                                                                  height: arduinoImageView.bounds.height))
  732|      0|                        dangerDraw.isOpaque = false
  733|      0|                        dangerDraw.intoBoardPoint(startX: arduinoUnoPointControl12_9.coordinateNumberX - 10,
  734|      0|                                                  startY: arduinoUnoPointControl12_9.coordinateNumberY - 10)
  735|      0|                        view.addSubview(dangerDraw)
  736|      0|                    }
  737|      0|                }
  738|      0|            }
  739|      0|
  740|      0|            /* voltControl配列内部の0以外の箇所をtestArrayに追加 */
  741|      0|            for i in 0 ..< 64 {
  742|      0|                if voltRetention.voltControlArray[i] != 0 {
  743|      0|                    // ボード上の座標に戻す
  744|      0|                    voltRetention.voltBoardTranslate(voltTransNumber: i)
  745|      0|                    testArray.append(voltRetention.voltDrawStart)
  746|      0|                    testArray.append(voltRetention.voltDrawEnd)
  747|      0|                }
  748|      0|            }
  749|      0|            iVoltDraw = testArray.count / 2
  750|      0|
  751|      0|            // 電圧ライン（黄色）の描画
  752|      0|            if testArray.count - 1 > iTest2 {
  753|      0|                for iTest in 0 ..< iVoltDraw {
  754|      0|                    arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: testArray[iTest2])
  755|      0|                    voltDrawArrayX.append(arduinoUnoPointControl12_9.coordinateNumberX)
  756|      0|                    voltDrawArrayY.append(arduinoUnoPointControl12_9.coordinateNumberY)
  757|      0|                    arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: testArray[iTest2 + 1])
  758|      0|                    voltDrawArrayX.append(arduinoUnoPointControl12_9.coordinateNumberX)
  759|      0|                    voltDrawArrayY.append(arduinoUnoPointControl12_9.coordinateNumberY)
  760|      0|                    // 電圧を文字で描画
  761|      0|                    voltValue = voltRetention.voltReturnValue(boardNumber: testArray[iTest2])
  762|      0|//                    let voltLabel = UILabel(frame: CGRect(x: 0, y: 0,
  763|      0|//                                                          width: arduinoImageView.bounds.width,
  764|      0|//                                                          height: arduinoImageView.bounds.height))
  765|      0|                    var voltLabel = UILabel()
  766|      0|                    voltLabel.isOpaque = false
  767|      0|                    // 電圧を表示
  768|      0|                    let voltDraw = VoltDraw(frame: CGRect(x: 0, y: 0,
  769|      0|                                                          width: arduinoImageView.bounds.width,
  770|      0|                                                          height: arduinoImageView.bounds.height))
  771|      0|                    if iTest == 0 {
  772|      0|                        voltDraw.backgroundColor = UIColor(white: 0.5, alpha: 0.6)
  773|      0|                    } else {
  774|      0|                        voltDraw.isOpaque = false
  775|      0|                    }
  776|      0|
  777|      0|                    voltDraw.intoBoardPoint(startX: voltDrawArrayX[iTest2], startY: voltDrawArrayY[iTest2],
  778|      0|                                            endX: voltDrawArrayX[iTest2 + 1], endY: voltDrawArrayY[iTest2 + 1])
  779|      0|                    view.addSubview(voltDraw)
  780|      0|
  781|      0|                    // 文字の位置
  782|      0|                    if 51 ... 350 ~= testArray[iTest2] {
  783|      0|                        if voltValue < 10 {
  784|      0|                            voltLabel = UILabel(frame: CGRect(x: arduinoUnoPointControl12_9.coordinateNumberX - 15,
  785|      0|                                                              y: arduinoUnoPointControl12_9.coordinateNumberY - 77,
  786|      0|                                                              width: 30, height: 30))
  787|      0|                        } else {
  788|      0|                            voltLabel = UILabel(frame: CGRect(x: arduinoUnoPointControl12_9.coordinateNumberX - 15,
  789|      0|                                                              y: arduinoUnoPointControl12_9.coordinateNumberY - 77,
  790|      0|                                                              width: 30, height: 30))
  791|      0|                        }
  792|      0|                    } else {
  793|      0|                        if voltValue < 10 {
  794|      0|                            voltLabel = UILabel(frame: CGRect(x: arduinoUnoPointControl12_9.coordinateNumberX - 465,
  795|      0|                                                              y: arduinoUnoPointControl12_9.coordinateNumberY - 15,
  796|      0|                                                              width: 30, height: 30))
  797|      0|                        } else {
  798|      0|                            voltLabel = UILabel(frame: CGRect(x: arduinoUnoPointControl12_9.coordinateNumberX - 465,
  799|      0|                                                              y: arduinoUnoPointControl12_9.coordinateNumberY - 15,
  800|      0|                                                              width: 30, height: 30))
  801|      0|                        }
  802|      0|                    }
  803|      0|
  804|      0|                    // 文字の描画
  805|      0|                    voltLabel.font = UIFont.systemFont(ofSize: 20) // font size
  806|      0|                    voltLabel.backgroundColor = UIColor.white
  807|      0|                    voltLabel.cornerRadius = 15
  808|      0|                    voltLabel.textAlignment = .center // 中心寄せ
  809|      0|                    voltLabel.borderWidth = 5 // 縁の幅
  810|      0|                    voltLabel.borderColor = UIColor.yellow
  811|      0|                    voltLabel.text = String(voltValue)
  812|      0|                    voltLabel.tag = 1
  813|      0|                    voltLabel.textColor = UIColor.orange
  814|      0|                    voltLabel.shadowColor = UIColor.orange
  815|      0|                    view.addSubview(voltLabel)
  816|      0|                    iTest2 += 2
  817|      0|                }
  818|      0|            }
  819|      0|            // ジャイロセンサの値を出力
  820|      0|            // アナログピン（入力）に全て接続があったら
  821|      0|            if voltGyroRun > 3 {
  822|      0|                // MotionManagerの生成
  823|      0|                motionManager = CMMotionManager()
  824|      0|                // 更新周期の設定
  825|      0|                motionManager.accelerometerUpdateInterval = 0.1
  826|      0|                // 加速度の取得開始
  827|      0|                motionManager.startAccelerometerUpdates(to: OperationQueue.current!,
  828|      0|                                                        withHandler: { (accelData: CMAccelerometerData?, _: Error?) in
  829|      0|                                                            let accel: CMAcceleration = accelData!.acceleration
  830|      0|                                                            print("x: \(accel.x)")
  831|      0|                                                            print("y: \(accel.y)")
  832|      0|                                                            print("z: \(accel.z)")
  833|      0|
  834|      0|                })
  835|      0|            }
  836|      0|        } else {
  837|      0|            runRan = 0
  838|      0|            // 電圧線の消去
  839|      0|            view.subviews.forEach {
  840|      0|                if $0 is DangerDraw {
  841|      0|                    $0.removeFromSuperview()
  842|      0|                }
  843|      0|                if $0 is VoltDraw {
  844|      0|                    $0.removeFromSuperview()
  845|      0|                }
  846|      0|                /* 文字の消去 */
  847|      0|                if $0.tag == 1 {
  848|      0|                    $0.removeFromSuperview()
  849|      0|                }
  850|      0|            }
  851|      0|            testArray = []
  852|      0|            iTest2 = 0
  853|      0|            voltRetention = VoltRetention()
  854|      0|            testArray.removeAll()
  855|      0|            voltDrawArrayX.removeAll()
  856|      0|            voltDrawArrayY.removeAll()
  857|      0|
  858|      0|            flagDrawGyro = 0
  859|      0|            voltConnectNumber = 0
  860|      0|            voltConnectNext = 0
  861|      0|            voltControlValue = 0
  862|      0|            voltValueBefore = 0
  863|      0|            voltValue = 0
  864|      0|            voltLastNumber = 0
  865|      0|            voltLastValue = 0
  866|      0|            repeatI = 0
  867|      0|            gyroRan = 0
  868|      0|            voltGyroInValue = 0
  869|      0|        }
  870|      0|    }
  871|       |
  872|      0|    @IBAction func editButtonAction(sender _: Any) {}
  873|       |
  874|      0|    @IBAction func generateButtonAction(sender _: Any) {}
  875|       |
  876|      2|    override func viewDidLayoutSubviews() {
  877|      2|        super.viewDidLayoutSubviews()
  878|      2|    }
  879|       |
  880|      1|    override func viewDidAppear(_ animated: Bool) {
  881|      1|        super.viewDidAppear(animated)
  882|      1|    }
  883|       |
  884|      0|    override func touchesBegan(_ touches: Set<UITouch>, with _: UIEvent?) {
  885|      0|        // Get touch event
  886|      0|        let touch = touches.first
  887|      0|        // Get tapped coordinate
  888|      0|        tapLocation = touch!.location(in: view)
  889|      0|        point = String(arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y)))
  890|      0|        pointInt = Int(arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y)))
  891|      0|        arduinoUnoPointControl12_9.coordinateTranslate(
  892|      0|            translatePoint: arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y))
  893|      0|        )
  894|      0|
  895|      0|        // ジャンパワイヤここから
  896|      0|        if pointInt != 0 && wireDrawRan == 1 && partsDraw.wireTranslatePointArray.firstIndex(of: pointInt) == nil {
  897|      0|            partsDraw.wireDraw(translatePoint: arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y)))
  898|      0|            flagDrawWire = 1
  899|      0|            view.addSubview(selectedCircle(uiImageView: arduinoImageView, tapLocation: tapLocation))
  900|      0|        }
  901|      0|
  902|      0|        if partsDraw.wireGetPointXArray.count % 2 != 0 && wireDrawRan != 1 {
  903|      0|            partsDraw.wireGetPointXArray.removeLast()
  904|      0|            partsDraw.wireGetPointYArray.removeLast()
  905|      0|            partsDraw.jumperNumber -= 1
  906|      0|            view.subviews.forEach {
  907|      0|                if $0 is SelectedCircle {
  908|      0|                    $0.removeFromSuperview()
  909|      0|                }
  910|      0|            }
  911|      0|        }
  912|      0|
  913|      0|        if pointInt != 0 && partsDraw.flagDraw(flagNumber: 0) == 1 && wireDrawRan == 1 && flagDrawWire == 1 {
  914|      0|            let lineDraw = LineDraw(frame: CGRect(x: 0, y: 0,
  915|      0|                                                  width: arduinoImageView.bounds.width,
  916|      0|                                                  height: arduinoImageView.bounds.height))
  917|      0|            lineDraw.isOpaque = false
  918|      0|            lineDraw.backgroundColor = UIColor.clear
  919|      0|            lineDraw.intoBoardPoint(startX: partsDraw.wireGetPointXArray[wireCount],
  920|      0|                                    startY: partsDraw.wireGetPointYArray[wireCount],
  921|      0|                                    endX: partsDraw.wireGetPointXArray[wireCount + 1],
  922|      0|                                    endY: partsDraw.wireGetPointYArray[wireCount + 1])
  923|      0|            wireCount += 2
  924|      0|            view.addSubview(lineDraw)
  925|      0|            backViewArray.append(1)
  926|      0|            flagDrawWire = 0
  927|      0|            view.subviews.forEach {
  928|      0|                if $0 is SelectedCircle {
  929|      0|                    $0.removeFromSuperview()
  930|      0|                }
  931|      0|            }
  932|      0|        }
  933|      0|        // ジャンパワイヤここまで
  934|      0|
  935|      0|        // LEDここから
  936|      0|        if pointInt != 0 && ledDrawRan == 1 && partsDraw.ledTranslatePointArray.firstIndex(of: pointInt) == nil {
  937|      0|            partsDraw.ledDraw(translatePoint: arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y)))
  938|      0|            flagDrawLed = 1
  939|      0|            view.addSubview(selectedCircle(uiImageView: arduinoImageView, tapLocation: tapLocation))
  940|      0|        }
  941|      0|        /* LEDボタンOFF時に要素が一つだけ残っていた場合消す */
  942|      0|        if partsDraw.ledGetPointXArray.count % 2 != 0 && ledDrawRan != 1 {
  943|      0|            partsDraw.ledGetPointXArray.removeLast()
  944|      0|            partsDraw.ledGetPointYArray.removeLast()
  945|      0|            partsDraw.ledNumber -= 1
  946|      0|            view.subviews.forEach {
  947|      0|                if $0 is SelectedCircle {
  948|      0|                    $0.removeFromSuperview()
  949|      0|                }
  950|      0|            }
  951|      0|        }
  952|      0|        /* LED描画部 */
  953|      0|        if pointInt != 0 && partsDraw.flagDraw(flagNumber: 1) == 1 && ledDrawRan == 1 && flagDrawLed == 1 {
  954|      0|            let ledDraw = LedDraw(frame: CGRect(x: 0, y: 0,
  955|      0|                                                width: arduinoImageView.bounds.width,
  956|      0|                                                height: arduinoImageView.bounds.height))
  957|      0|            ledDraw.isOpaque = false
  958|      0|            ledDraw.backgroundColor = UIColor.clear
  959|      0|            ledDraw.intoBoardPoint(startX: partsDraw.ledGetPointXArray[ledCount],
  960|      0|                                   startY: partsDraw.ledGetPointYArray[ledCount],
  961|      0|                                   endX: partsDraw.ledGetPointXArray[ledCount + 1],
  962|      0|                                   endY: partsDraw.ledGetPointYArray[ledCount + 1])
  963|      0|            ledCount += 2
  964|      0|            view.addSubview(ledDraw)
  965|      0|            backViewArray.append(2)
  966|      0|            flagDrawLed = 0
  967|      0|            view.subviews.forEach {
  968|      0|                if $0 is SelectedCircle {
  969|      0|                    $0.removeFromSuperview()
  970|      0|                }
  971|      0|            }
  972|      0|        }
  973|      0|        // LEDここまで
  974|      0|
  975|      0|        /* 抵抗器描画部 */
  976|      0|        if pointInt != 0 && resistorDrawRan == 1 && partsDraw.resistorTranslatePointArray.firstIndex(of: pointInt) == nil {
  977|      0|            partsDraw.resistorDraw(translatePoint: arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y)))
  978|      0|            flagDrawResistor = 1
  979|      0|            view.addSubview(selectedCircle(uiImageView: arduinoImageView, tapLocation: tapLocation))
  980|      0|        }
  981|      0|        if partsDraw.resistorGetPointYArray.count % 2 != 0 && resistorDrawRan != 1 {
  982|      0|            partsDraw.resistorGetPointXArray.removeLast()
  983|      0|            partsDraw.resistorGetPointYArray.removeLast()
  984|      0|            partsDraw.resistorNumber -= 1
  985|      0|            view.subviews.forEach {
  986|      0|                if $0 is SelectedCircle {
  987|      0|                    $0.removeFromSuperview()
  988|      0|                }
  989|      0|            }
  990|      0|        }
  991|      0|        if pointInt != 0 && partsDraw.flagDraw(flagNumber: 2) == 1 && resistorDrawRan == 1 && flagDrawResistor == 1 {
  992|      0|            let resistorDraw = ResitorDraw(frame: CGRect(x: 0, y: 0,
  993|      0|                                                         width: arduinoImageView.bounds.width,
  994|      0|                                                         height: arduinoImageView.bounds.height))
  995|      0|            resistorDraw.isOpaque = false
  996|      0|            resistorDraw.backgroundColor = UIColor.clear
  997|      0|            resistorDraw.intoBoardPoint(startX: partsDraw.resistorGetPointXArray[resistorCount],
  998|      0|                                        startY: partsDraw.resistorGetPointYArray[resistorCount],
  999|      0|                                        endX: partsDraw.resistorGetPointXArray[resistorCount + 1],
 1000|      0|                                        endY: partsDraw.resistorGetPointYArray[resistorCount + 1])
 1001|      0|            resistorCount += 2
 1002|      0|            view.addSubview(resistorDraw)
 1003|      0|            backViewArray.append(3)
 1004|      0|            flagDrawResistor = 0
 1005|      0|            view.subviews.forEach {
 1006|      0|                if $0 is SelectedCircle {
 1007|      0|                    $0.removeFromSuperview()
 1008|      0|                }
 1009|      0|            }
 1010|      0|        }
 1011|      0|        /* 抵抗器ここまで */
 1012|      0|
 1013|      0|        // ジャイロセンサ描画のための配列に値を入れる
 1014|      0|        if pointInt != 0 && 171 ... 200 ~= pointInt && gyroDrawRan == 1 && partsDraw.gyroTranslatePointArray.firstIndex(of: pointInt) == nil {
 1015|      0|            if partsDraw.gyroTranslatePointArray.count % 4 != 0 && pointInt - 1 == partsDraw.gyroTranslatePointArray.last
 1016|      0|                || partsDraw.gyroTranslatePointArray.count % 4 == 0 {
 1017|      0|                partsDraw.gyroDraw(translatePoint: arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y)))
 1018|      0|                flagDrawGyro = 1
 1019|      0|                view.addSubview(selectedCircle(uiImageView: arduinoImageView, tapLocation: tapLocation)) // 選択中
 1020|      0|            } else if flagDrawGyro != 0 {
 1021|      0|                partsDraw.gyroGetPointXArray.removeLast()
 1022|      0|                partsDraw.gyroGetPointYArray.removeLast()
 1023|      0|                partsDraw.gyroTranslatePointArray.removeLast()
 1024|      0|                partsDraw.gyroNumber -= 1
 1025|      0|                partsDraw.gyroDraw(translatePoint: arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y)))
 1026|      0|                flagDrawGyro = 0
 1027|      0|//                view.subviews.forEach {
 1028|      0|//                    if $0 is SelectedCircle {
 1029|      0|//                        $0.removeFromSuperview()
 1030|      0|//                    }
 1031|      0|//                }
 1032|      0|            }
 1033|      0|        }
 1034|      0|
 1035|      0|        // ジャイロセンサ描画モード:OFF時に不必要な要素が残っていれば消す
 1036|      0|        if partsDraw.gyroGetPointXArray.count % 4 != 0 && gyroDrawRan != 1 {
 1037|      0|            for _ in 0 ..< partsDraw.gyroGetPointXArray.count % 4 {
 1038|      0|                partsDraw.gyroGetPointXArray.removeLast()
 1039|      0|                partsDraw.gyroGetPointYArray.removeLast()
 1040|      0|                partsDraw.gyroNumber -= 1
 1041|      0|            }
 1042|      0|            view.subviews.forEach {
 1043|      0|                if $0 is SelectedCircle {
 1044|      0|                    $0.removeFromSuperview()
 1045|      0|                }
 1046|      0|            }
 1047|      0|        }
 1048|      0|
 1049|      0|        // ジャイロセンサ描画部
 1050|      0|        if pointInt != 0 && 171 ... 200 ~= pointInt && partsDraw.flagDraw(flagNumber: 3) == 1 && gyroDrawRan == 1 && flagDrawGyro == 1 {
 1051|      0|            let gyroDraw = GyroDraw(frame: CGRect(x: 0, y: 0,
 1052|      0|                                                  width: arduinoImageView.bounds.width,
 1053|      0|                                                  height: arduinoImageView.bounds.height))
 1054|      0|            gyroDraw.isOpaque = false
 1055|      0|            gyroDraw.backgroundColor = UIColor.clear
 1056|      0|            gyroDraw.intoBoardPoint(x1: partsDraw.gyroGetPointXArray[gyroCount],
 1057|      0|                                    y1: partsDraw.gyroGetPointYArray[gyroCount],
 1058|      0|                                    x2: partsDraw.gyroGetPointXArray[gyroCount + 1],
 1059|      0|                                    y2: partsDraw.gyroGetPointYArray[gyroCount + 1],
 1060|      0|                                    x3: partsDraw.gyroGetPointXArray[gyroCount + 2],
 1061|      0|                                    y3: partsDraw.gyroGetPointYArray[gyroCount + 2],
 1062|      0|                                    x4: partsDraw.gyroGetPointXArray[gyroCount + 3],
 1063|      0|                                    y4: partsDraw.gyroGetPointYArray[gyroCount + 3])
 1064|      0|            view.addSubview(gyroDraw)
 1065|      0|            gyroCount += 4
 1066|      0|            backViewArray.append(4)
 1067|      0|            flagDrawGyro = 0
 1068|      0|            view.subviews.forEach {
 1069|      0|                if $0 is SelectedCircle {
 1070|      0|                    $0.removeFromSuperview()
 1071|      0|                }
 1072|      0|            }
 1073|      0|        }
 1074|      0|
 1075|      0|        /* Debug */
 1076|      0|        //        let debug = self.arduinoUnoPointControl12_9.pointTranslate(pointX: tapLocation.x, pointY: tapLocation.y)
 1077|      0|        //        SCLAlertView().showInfo("\(debug)")
 1078|      0|        ////        log.debug("\(debug)")
 1079|      0|        //        /* Debug */
 1080|      0|        ////        log.info(tapLocation)
 1081|      0|        //        log.debug("X-cordinate: \(Double(tapLocation.x))")
 1082|      0|        //        log.debug("Y-cordinate: \(Double(tapLocation.y))")
 1083|      0|    }
 1084|       |
 1085|      0|    override func didReceiveMemoryWarning() {
 1086|      0|        super.didReceiveMemoryWarning()
 1087|      0|        // Dispose of any resources that can be recreated.
 1088|      0|    }
 1089|       |}
 1090|       |
 1091|      1|func judgeDevice(screenSizeHeight: Double) -> Int {
 1092|      1|    if screenSizeHeight == 1024 { // Mini, iPad, iPad2
 1093|      0|        return 1
 1094|      1|    } else if screenSizeHeight == 2048 { // Mini2, Mini3, Mini4, iPad3, iPad4, Air, Air2, Pro9.7
 1095|      0|        return 2
 1096|      1|    } else if screenSizeHeight == 2224 { // Pro10.5
 1097|      0|        return 3
 1098|      1|    } else if screenSizeHeight == 2732 { // Pro12.9
 1099|      1|        return 4
 1100|      1|    } else { // Other
 1101|      0|        return 0
 1102|      0|    }
 1103|      0|}
 1104|       |
 1105|      0|func selectedCircle(uiImageView: UIImageView, tapLocation: CGPoint) -> SelectedCircle {
 1106|      0|    let arduinoUnoPointControl12_9 = ArduinoUnoPointControl12_9()
 1107|      0|    let selectedCircle = SelectedCircle(frame: CGRect(x: 0, y: 0,
 1108|      0|                                                      width: uiImageView.bounds.width,
 1109|      0|                                                      height: uiImageView.bounds.height))
 1110|      0|    selectedCircle.backgroundColor = UIColor.clear
 1111|      0|    arduinoUnoPointControl12_9.coordinateTranslate(translatePoint: arduinoUnoPointControl12_9.pointTranslate(pointX: Double(tapLocation.x), pointY: Double(tapLocation.y)))
 1112|      0|    selectedCircle.intoBoardPoint(startX: arduinoUnoPointControl12_9.coordinateNumberX, startY: arduinoUnoPointControl12_9.coordinateNumberY)
 1113|      0|    return selectedCircle
 1114|      0|}

