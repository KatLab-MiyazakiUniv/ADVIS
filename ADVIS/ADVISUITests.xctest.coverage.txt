/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVIS/Drawings/LedDraw.swift:
    1|       |//
    2|       |//  LedLineDraw.swift
    3|       |//  ADVIS
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 8/24/18.
    6|       |//  Copyright © 2018 Tatsumi. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import UIKit
   11|       |
   12|       |class LedDraw: UIView {
   13|       |    var startX: Double = 0
   14|       |    var startY: Double = 0
   15|       |    var endX: Double = 0
   16|       |    var endY: Double = 0
   17|       |
   18|       |    /// 線を描画するための座標を設定
   19|       |    ///
   20|       |    /// - Parameters:
   21|       |    ///   - startX: 起点のX座標
   22|       |    ///   - startY: 起点のY座標
   23|       |    ///   - endX: 終点のX座標
   24|       |    ///   - endY: 週手のY座標
   25|       |    /// メンバ変数にそれぞれ代入
   26|      0|    func intoBoardPoint(startX: Double, startY: Double, endX: Double, endY: Double) {
   27|      0|        self.startX = startX
   28|      0|        self.startY = startY
   29|      0|        self.endX = endX
   30|      0|        self.endY = endY
   31|      0|    }
   32|       |
   33|      0|    override func draw(_: CGRect) {
   34|      0|        let line = UIBezierPath()
   35|      0|        // 起点
   36|      0|        line.move(to: CGPoint(x: startX, y: startY))
   37|      0|        // 終点
   38|      0|        line.addLine(to: CGPoint(x: endX, y: endY))
   39|      0|        // ラインを結ぶ
   40|      0|        line.close()
   41|      0|        // 色の設定
   42|      0|        UIColor.gray.setStroke()
   43|      0|        // ライン幅
   44|      0|        line.lineWidth = 3
   45|      0|        // 描画
   46|      0|        line.stroke()
   47|      0|        // 電球の描画
   48|      0|        let ledCircle = UIBezierPath(ovalIn: CGRect(x: (startX + endX) / 2 - 6,
   49|      0|                                                    y: (startY + endY) / 2 - 6,
   50|      0|                                                    width: 15, height: 15))
   51|      0|        ledCircle.lineWidth = 3
   52|      0|        UIColor.gray.setFill()
   53|      0|        ledCircle.fill()
   54|      0|        UIColor.green.setStroke()
   55|      0|        ledCircle.stroke()
   56|      0|    }
   57|       |}

/Users/travis/build/Tatsumi0000/ADVIS/ADVIS/ADVISUITests/ADVISUITests.swift:
    1|       |//
    2|       |//  ADVISUITests.swift
    3|       |//  ADVISUITests
    4|       |//
    5|       |//  Created by Tatsumi Nishida on 2018/06/04.
    6|       |//  Copyright © 2018年 Tatsumi Nishida. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |
   11|       |class ADVISUITests: XCTestCase {
   12|      1|    override func setUp() {
   13|      1|        super.setUp()
   14|      1|
   15|      1|        // Put setup code here. This method is called before the invocation of each test method in the class.
   16|      1|
   17|      1|        // In UI tests it is usually best to stop immediately when a failure occurs.
   18|      1|        continueAfterFailure = false
   19|      1|        // UI tests must launch the application that they test. Doing this in setup will make sure it happens for each test method.
   20|      1|        XCUIApplication().launch()
   21|      1|
   22|      1|        // In UI tests it’s important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.
   23|      1|    }
   24|       |
   25|      1|    override func tearDown() {
   26|      1|        // Put teardown code here. This method is called after the invocation of each test method in the class.
   27|      1|        super.tearDown()
   28|      1|    }
   29|       |
   30|      1|    func testExample() {
   31|      1|//        let app = XCUIApplication()
   32|      1|//        let doneButton = app/*@START_MENU_TOKEN@*/.buttons["Done"]/*[[".otherElements[\"SCLAlertView\"].buttons[\"Done\"]",".buttons[\"Done\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   33|      1|//        doneButton.tap()
   34|      1|//
   35|      1|//        let tablesQuery = app.tables
   36|      1|//        tablesQuery/*@START_MENU_TOKEN@*/.staticTexts["MODULE"]/*[[".cells.staticTexts[\"MODULE\"]",".staticTexts[\"MODULE\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
   37|      1|//        tablesQuery/*@START_MENU_TOKEN@*/.staticTexts["ジャンパワイヤ"]/*[[".cells.staticTexts[\"ジャンパワイヤ\"]",".staticTexts[\"ジャンパワイヤ\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
   38|      1|//        doneButton.tap()
   39|      1|//
   40|      1|//        let element = app.children(matching: .window).element(boundBy: 0).children(matching: .other).element.children(matching: .other).element
   41|      1|//        element.tap()
   42|      1|//        element.tap()
   43|      1|//
   44|      1|//        let element2 = element.children(matching: .other).element(boundBy: 0)
   45|      1|//        element2.tap()
   46|      1|//        element2.tap()
   47|      1|//        tablesQuery/*@START_MENU_TOKEN@*/.staticTexts["LED"]/*[[".cells.staticTexts[\"LED\"]",".staticTexts[\"LED\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
   48|      1|//        doneButton.tap()
   49|      1|//
   50|      1|//        let element3 = element.children(matching: .other).element(boundBy: 1)
   51|      1|//        element3.tap()
   52|      1|//        element3.tap()
   53|      1|//
   54|      1|//        let voltRunButton = app.buttons["VOLT RUN"]
   55|      1|//        voltRunButton.tap()
   56|      1|//        voltRunButton.tap()
   57|      1|//
   58|      1|//        let runButton = app.buttons["RUN"]
   59|      1|//        runButton.tap()
   60|      1|//        runButton.tap()
   61|      1|//        app.buttons["CLEAN"].tap()
   62|      1|
   63|      1|        // Use recording to get started writing UI tests.
   64|      1|        // Use XCTAssert and related functions to verify your tests produce the correct results.
   65|      1|    }
   66|       |}

